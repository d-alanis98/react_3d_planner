{"version":3,"sources":["redux/reducers/editorDuck.js","classes/Helpers/Requests.js","redux/reducers/projectDuck.js","redux/reducers/objectsDuck.js","redux/store.js","components/Layout/Containers/FixedHeightContainer.js","constants/models/models.js","classes/Renderers/BidimensionalRenderer.js","components/Editor/2D/RendererContainer.js","redux/HOC/withProjectState.js","components/Renderer/2D/HOC/with2DRenderer.js","components/Layout/Flex/Flex.js","components/Layout/Flex/FlexRow.js","components/Layout/Containers/FixedWidthContainer.js","components/Editor/3D/Layout/Editor/EditorActions/ModelThumbnail.js","components/Editor/3D/Layout/Editor/EditorActions/ModelsLibrary/ModelsLibrary.js","components/Editor/2D/Editor/EditorActions/EditorActions.js","components/Editor/2D/Editor/Editor.js","components/Layout/Flex/FlexColumn.js","components/Layout/Labels/LabelWithIcon.js","redux/HOC/withEditorState.js","components/Layout/Buttons/ButtonWithIcon.js","components/ProjectSettings/ProjectSettings.js","classes/3D/Models/TextureFactory.js","components/Editor/3D/Layout/Editor/EditorActions/PlaneActions/PlaneSettings/PlaneSettings.js","classes/3D/Plane/PlaneFactory.js","classes/Renderers/TridimensionalRenderer.js","classes/3D/Camera/CameraRotationFactory.js","components/Editor/3D/Layout/Editor/EditorActions/PlaneActions/CameraPositionMenu.js","components/Editor/3D/Layout/Editor/EditorActions/PlaneActions/PlaneActions.js","components/Editor/3D/Layout/Editor/EditorActions/EditorActions.js","components/Editor/3D/Layout/RendererContainer.js","components/Editor/3D/Layout/Editor/Editor.js","components/Renderer/3D/HOC/with3DRenderer.js","components/Catalog/Data/data.js","components/Catalog/ModelsLibrary/ModelsLibrary.js","components/Catalog/Catalog.js","constants/sections/sections.js","components/Layout/Sidebar/Sections/EditorActions.js","components/Layout/Sidebar/Sections/ProjectActions.js","components/Layout/Sidebar/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["initialState","editorType","editorWidth","editorHeight","reducer","state","action","type","payload","setEditorTypeAction","dispatch","getState","setEditorWidthAction","width","setEditorHeightAction","height","Requests","makeRequest","endpoint","headers","onSuccess","onError","callbackArguments","fetch","then","response","status","json","data","Error","statusText","catch","error","message","split","errorCode","errorMessage","name","scene","version","objects","description","saveProgressSuccess","successMessage","console","log","saveProgressError","setProjectNameAction","projectName","set3DSceneDimensionsAction","sceneWidth","sceneHeight","project","tridimensionalSceneParameters","newTridimensionalSceneParameters","set2DSceneDimensionsAction","bidimensionalSceneParameters","newBidimensionalSceneParameters","setProjectVersionAction","projectVersion","setProjectObjectsAction","projectObjects","setProjectDescriptionAction","projectDescription","addObjectToProjectAction","objectToAdd","newProjectObjects","concat","updateProjectObjectAction","updatedObject","updatedObjects","map","object","id","removeObjectFromProjectAction","objectToRemove","filter","saveProjectAction","method","body","fetching","rootReducer","combineReducers","editor","editorReducer","projectReducer","objectsReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","generateStore","createStore","applyMiddleware","thunk","FixedHeightContainer","children","className","extraProps","TABLE","models","uri","thumbnail","models2D","getModelThumbnail","BidimensionalRenderer","enablePlaneControls","this","domContainer","document","getElementById","DOM_CONTAINER_ID","containerWidth","clientWidth","containerHeight","clientHeight","containerAspectRatio","render","bind","setInitialStage","setInitialLayer","setPlane","addZoomEventToStage","stage","Konva","Stage","container","draggable","layer","Layer","addLayerToStage","draw","add","on","event","evt","preventDefault","oldScale","scaleX","pointer","getPointerPosition","mousePointTo","x","y","newScale","deltaY","scale","newPosition","position","batchDraw","planeCenterCoordinates","plane","Rect","fill","stroke","opacity","strokeWidth","setPlaneCenter","drawGrid","numberOfRows","numberOfCols","drawLinesInAxis","numberOfLines","size","gridSize","Array","from","Math","round","forEach","row","index","requestAnimationFrame","updateCallback","path","view","getModel2DUri","depth","getDimensions","self","Image","fromURL","imageNode","setAttrs","offsetX","offsetY","dragBoundFunc","pos","boundFunction","attrs","widthPadding","heightPadding","RendererContainer","withProjectState","WrappedComponent","connect","ownProps","props","addObject","updateObject","removeObject","setProjectName","setProjectObjects","setProjectVersion","set2DSceneDimensions","set3DSceneDimensions","setProjectDescription","with2DRenderer","useState","setModels","sceneInstance","setSceneInstance","draggedObject","setDraggedObject","useEffect","init","modelsCopy","model","coordinates","quantity","loadSVGModel","createdModel","_id","modelWithUpdatedId","uuid","updateModel","restoreModels","existingObject","findObjectBy2DModelId","tridimensionalEditorState","get3DCoordinates","onCreationSuccess","length","z","id2DModel","find","target","increaseModelQuantity","originCoordinates","calculateOriginCoordinates","originX","originY","addModel","Flex","FlexRow","FixedWidthContainer","ModelThumbnail","title","onClick","modelQuantity","imageClassName","data-toggle","data-placement","src","alt","ModelsLibrary","e","EditorActions","FlexColumn","LabelWithIcon","icon","labelText","withEditorState","editorState","setEditorType","setEditorWidth","setEditorHeight","ButtonWithIcon","buttonText","WithProjectState","changesSaved","setChangesSaved","newProjectName","setNewProjectName","newProjectDescription","setNewProjectDescription","faCogs","value","onChange","placeholder","rows","faCheckCircle","disabled","TextureFactory","WOOD_TEXTURE","FLOOR_TEXTURE","getTextureUri","textureType","PlaneSettings","handleTextureChange","faCog","aria-haspopup","aria-expanded","aria-labelledby","PlaneFactory","DEFAULT_SIZE","GRID","THREE","DEFAULT_GRID","MESH_PLANE","color","rotateX","PI","material","side","TridimensionalRenderer","addTextureToObject","textureUri","isMesh","texture","load","DEFAULT_TEXTURE_URI","encoding","flipY","getOptimalCameraDistance","max","orbitControls","dragControls","enableOrbitControls","setInitialScene","setInitialCameraState","setInitialRenderer","addControls","addPlane","addResizeListener","addLight","cameraDistance","camera","set","lookAt","renderer","antialias","setClearColor","setSize","appendChild","domElement","OrbitControls","DragControls","gridPlane","create","addToScene","addEventListener","setContainerDimensions","aspect","updateProjectionMatrix","update","callback","onDragEnd","element","light","DEFAULT_LIGHT_COLOR","DEFAULT_LIGHT_INTENSITY","push","updateDragControls","isArray","getModelUri","GLTFLoader","gltf","traverse","enabled","initialYPosition","CameraRotationFactory","TOP_VIEW","BACK_VIEW","FRONT_VIEW","FRONT_LEFT","FRONT_RIGHT","ISOMETRIC_VIEW","createCameraRotationVector","distance","DEFAULT_CAMERA_DISTANCE","cameraPosition","setY","setZ","setX","CameraPositionMenu","rotateCamera","faCrosshairs","faCaretSquareUp","faWindowMaximize","faWindowRestore","faCaretSquareRight","faCaretSquareLeft","faCube","WithEditorState","addTextureToPlane","toggleOrbitControls","orbitControlsEnabled","checked","faLock","faLockOpen","faArrowsAlt","with3DRenderer","setOrbitControlsEnabled","setDragEndCallback","editorContainer","load3DModel","findObjectBy3DModelId","bidimensionalEditorState","get2DCoordinates","id3DModel","bidimensionalSceneWidth","bidimensionalSceneHeight","cameraPositionVector","copy","model_id","item","colSpan","faPlusCircle","addObjectToProject","Catalog","faBook","SectionComponentToRender","faToolbox","faObjectGroup","ProjectActions","faSave","faFolderOpen","faDownload","Sidebar","$","tooltip","Boolean","location","hostname","match","store","WithStore","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c4e9f22e.chunk.js","sourcesContent":["/**\r\n * @author Damián Alanís Ramírez\r\n * @version 1.0.0\r\n */\r\n//Imported constants\r\n\r\n\r\n//CONSTANTS\r\n//Action types\r\nconst SET_EDITOR_TYPE   = 'SET_EDITOR_TYPE';\r\nconst SET_EDITOR_WIDTH  = 'SET_EDITOR_WIDTH';\r\nconst SET_EDITOR_HEIGHT = 'SET_EDITOR_HEIGHT';\r\n//Others\r\nconst TRIDIMENSIONAL    = 'TRIDIMENSIONAL_EDITOR';\r\n//Initial state\r\nconst initialState = {\r\n    editorType: TRIDIMENSIONAL,\r\n    editorWidth: 0,\r\n    editorHeight: 0,\r\n}\r\n\r\n//REDUCER\r\nconst reducer = (state = initialState, action) => {\r\n    let { type, payload } = action;\r\n    switch(type){\r\n        case SET_EDITOR_TYPE:\r\n            return {\r\n                ...state,\r\n                editorType: payload,\r\n            };\r\n        case SET_EDITOR_WIDTH:\r\n            return {\r\n                ...state,\r\n                editorWidth: payload,\r\n            };\r\n        case SET_EDITOR_HEIGHT:\r\n            return {\r\n                ...state,\r\n                editorHeight: payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;\r\n\r\n//ACTIONS\r\n/**\r\n * This method sets editor´s type. The available options are 2D or 3D.\r\n * @param {string} editorType \r\n */\r\nexport let setEditorTypeAction = editorType => (dispatch, getState) => {\r\n    dispatch({\r\n        type: SET_EDITOR_TYPE,\r\n        payload: editorType,\r\n    });\r\n}\r\n\r\n/**\r\n * This method sets editor´s width. It must be a number representing the width in meters (assuming natural scale).\r\n * @param {number} width \r\n */\r\nexport let setEditorWidthAction = width => (dispatch, getState) => {\r\n    dispatch({\r\n        type: SET_EDITOR_WIDTH,\r\n        payload: width,\r\n    });\r\n}\r\n\r\n/**\r\n * This method sets editor´s height. It must be a number representing the height in meters (assuming natural scale).\r\n * @param {number} height \r\n */\r\nexport let setEditorHeightAction = height => (dispatch, getState) => {\r\n    dispatch({\r\n        type: SET_EDITOR_HEIGHT,\r\n        payload: height,\r\n    });\r\n}","/**\r\n * @author Damián Alanís Ramírez\r\n * @version 1.1.1\r\n */\r\n\r\nexport default class Requests {\r\n    static makeRequest = (endpoint, headers = { }, onSuccess = null, onError = null, ...callbackArguments) => {\r\n        fetch(endpoint, headers)\r\n        .then(response => {\r\n            if(response.status === 200){\r\n                response.json()\r\n                .then(data => {\r\n                    if(onSuccess && typeof(onSuccess) === 'function')\r\n                        onSuccess(data, ...callbackArguments);\r\n                });\r\n            }\r\n            throw new Error(`${response.status}|${response.statusText}`);\r\n        })\r\n        .catch(error => {\r\n            let { message } = error;\r\n            let [errorCode, errorMessage] = message.split('|');\r\n            if(onError && typeof(onError) === 'function')\r\n                onError(errorCode, errorMessage, ...callbackArguments);\r\n        })\r\n    }\r\n}","/**\r\n * @author Damián Alanís Ramírez\r\n * @version 1.2.1\r\n */\r\n\r\nimport Requests from \"../../classes/Helpers/Requests\";\r\n\r\n//CONSTANTS\r\n//Action types\r\nconst SET_PROJECT_NAME          = 'SET_PROJECT_NAME';\r\nconst SET_PROJECT_SCENE         = 'SET_PROJECT_SCENE';\r\nconst SET_PROJECT_VERSION       = 'SET_PROJECT_VERSION';\r\nconst SET_PROJECT_OBJECTS       = 'SET_PROJECT_OBJECTS';\r\nconst SET_PROJECT_DESCRIPTION   = 'SET_PROJECT_DESCRIPTION';\r\n//Initial state\r\nconst initialState = {\r\n    name: '',\r\n    scene: {},\r\n    version: '',\r\n    objects: [],\r\n    description: '',\r\n}\r\n//Others\r\nconst BASE_ENDPOINT         = '/save_project_progress';\r\n\r\n//REDUCER\r\nconst reducer = (state = initialState, action) => {\r\n    let { type, payload } = action;\r\n    switch(type){\r\n        case SET_PROJECT_NAME:\r\n            return {\r\n                ...state,\r\n                name: payload,\r\n            };\r\n        case SET_PROJECT_SCENE:\r\n            return {\r\n                ...state,\r\n                scene: payload,\r\n            };\r\n        case SET_PROJECT_VERSION:\r\n            return {\r\n                ...state,\r\n                version: payload,\r\n            };\r\n        case SET_PROJECT_OBJECTS:\r\n            return {\r\n                ...state,\r\n                objects: payload,\r\n            };\r\n        case SET_PROJECT_DESCRIPTION:\r\n            return {\r\n                ...state,\r\n                description: payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;\r\n\r\n//Helpers\r\nconst saveProgressSuccess = successMessage => {\r\n    //Create notification with successMessage\r\n    console.log(successMessage)\r\n    \r\n}\r\n\r\nconst saveProgressError = (errorCode, errorMessage) => {\r\n    //Create notification with errorMessage\r\n    console.log(`[${errorCode}]: ${errorMessage}`)\r\n}\r\n\r\n//ACTIONS\r\n/**\r\n * This action sets the name of the project\r\n */\r\nexport let setProjectNameAction = projectName => (dispatch, getState) => {\r\n    dispatch({\r\n        type: SET_PROJECT_NAME,\r\n        payload: projectName,\r\n    });\r\n}\r\n\r\n/**\r\n * This action sets the scene of the project\r\n */\r\nexport let setProjectSceneAction = projectScene => (dispatch, getState) => {\r\n    dispatch({\r\n        type: SET_PROJECT_SCENE,\r\n        payload: projectScene,\r\n    });\r\n}\r\n\r\n/**\r\n * This action sets the dimensions of the 3d scene of the project\r\n */\r\nexport let set3DSceneDimensionsAction = (sceneWidth, sceneHeight) => (dispatch, getState) => {\r\n    let { scene } = { ...getState().project };\r\n    let tridimensionalSceneParameters = scene['3d'];\r\n    let newTridimensionalSceneParameters = {\r\n        ...tridimensionalSceneParameters,\r\n        sceneWidth,\r\n        sceneHeight\r\n    };\r\n    let projectSceneParameters = {\r\n        ...scene,\r\n        '3d': newTridimensionalSceneParameters\r\n    };\r\n    dispatch({\r\n        type: SET_PROJECT_SCENE,\r\n        payload: projectSceneParameters,\r\n    });\r\n}\r\n\r\n/**\r\n * This action sets the dimensions of the 2d scene of the project\r\n */\r\nexport let set2DSceneDimensionsAction = (sceneWidth, sceneHeight) => (dispatch, getState) => {\r\n    let { scene } = { ...getState().project };\r\n    let bidimensionalSceneParameters = scene['2d'];\r\n    let newBidimensionalSceneParameters = {\r\n        ...bidimensionalSceneParameters,\r\n        sceneWidth,\r\n        sceneHeight\r\n    }\r\n    let projectSceneParameters = {\r\n        ...scene,\r\n        '2d': newBidimensionalSceneParameters\r\n    };\r\n    dispatch({\r\n        type: SET_PROJECT_SCENE,\r\n        payload: projectSceneParameters,\r\n    });\r\n}\r\n\r\n/**\r\n * This action sets the version of the project\r\n */\r\nexport let setProjectVersionAction = projectVersion => (dispatch, getState) => {\r\n    dispatch({ \r\n        type: SET_PROJECT_VERSION,\r\n        payload: projectVersion,\r\n    })\r\n}\r\n\r\n/**\r\n * This action sets project´s objects\r\n */\r\nexport let setProjectObjectsAction = projectObjects => (dispatch, getState) => {\r\n    dispatch({\r\n        type: SET_PROJECT_OBJECTS,\r\n        payload: projectObjects,\r\n    });\r\n}\r\n\r\n/**\r\n * This action sets project´s description\r\n */\r\nexport let setProjectDescriptionAction = projectDescription => (dispatch, getState) => {\r\n    dispatch({\r\n        type: SET_PROJECT_DESCRIPTION,\r\n        payload: projectDescription,\r\n    });\r\n}\r\n\r\n/**\r\n * This action adds a new object to the objects array\r\n */\r\nexport let addObjectToProjectAction = objectToAdd => (dispatch, getState) => {\r\n    let { objects } = { ...getState().project };\r\n    let newProjectObjects = objects.concat(objectToAdd);\r\n    setProjectObjectsAction(newProjectObjects)(dispatch, getState);\r\n}\r\n\r\n/**\r\n * This action updates the project objects by replacing the given updated object in the existing objects array\r\n * @param {object} updatedObject \r\n */\r\nexport let updateProjectObjectAction = updatedObject => (dispatch, getState) => {\r\n    let { objects } = { ...getState().project };\r\n    //We update the objects by replacing the updatedObject in the existing objects array\r\n    let updatedObjects = objects.map(object => {\r\n        if(object.id === updatedObject.id)\r\n            return updatedObject;\r\n        return object;\r\n    });\r\n    setProjectObjectsAction(updatedObjects)(dispatch, getState);\r\n}\r\n\r\n/**\r\n * This action removes a new object from the objects array\r\n */\r\nexport let removeObjectFromProjectAction = objectToRemove => (dispatch, getState) => {\r\n    let { objects } = { ...getState().project };\r\n    let newProjectObjects = objects.filter(object => object.id != objectToRemove.id);\r\n    setProjectObjectsAction(newProjectObjects)(dispatch, getState);\r\n}\r\n\r\n/**\r\n * This action restores the project state based on the received project store (which may come serialized in JSON string)\r\n * @param {string|object} existingProject \r\n */\r\nexport let restoreProjectAction = existingProject => (dispatch, getState) => {\r\n    //We transform the project data to an object if it comes serialized\r\n    if(typeof(existingProject) === 'string')\r\n        existingProject = JSON.parse(existingProject);\r\n    //We get the data from the object\r\n    let { projectData } = existingProject;\r\n    //We get the project properties\r\n    let { name, version, objects } = projectData;\r\n    setProjectNameAction(name)(dispatch, getState);\r\n    setProjectVersionAction(version)(dispatch, getState);\r\n    setProjectObjectsAction(objects)(dispatch, getState);\r\n}\r\n\r\nexport let saveProjectAction = () => (dispatch, getState) => {\r\n    let { project } = { ...getState() };\r\n    let headers = {\r\n        method: 'POST',\r\n        body: project\r\n    }\r\n    Requests.makeRequest(\r\n        BASE_ENDPOINT, \r\n        headers, \r\n        saveProgressSuccess, \r\n        saveProgressError\r\n    );\r\n}","/**\r\n * @author Damián Alanís Ramírez\r\n * @version 1.0.0\r\n */\r\n\r\nimport Requests from \"../../classes/Helpers/Requests\";\r\n\r\n//CONSTANTS\r\n//Action types\r\nconst GET_OBJECTS           = 'GET_OBJECTS';\r\nconst GET_OBJECTS_ERROR     = 'GET_OBJECTS_ERROR';\r\nconst GET_OBJECTS_SUCCESS   = 'GET_OBJECTS_SUCCESS';\r\nconst ADD_OBJECT_TO_SCENE   = 'ADD_OBJECT_TO_SCENE';\r\n//Others\r\nconst BASE_ENDPOINT         = '/models';\r\n//Initial state\r\nconst initialState = {\r\n    objects: [],\r\n    fetching: false,\r\n}\r\n\r\n//REDUCER\r\nconst reducer = (state = initialState, action) => {\r\n    let { type, payload } = action;\r\n    switch(type){\r\n        case GET_OBJECTS:\r\n            return {\r\n                ...state,\r\n                fetching: true,\r\n            };\r\n        case GET_OBJECTS_ERROR:\r\n            return {\r\n                ...state,\r\n                error: payload,\r\n                fetching: false,\r\n            };\r\n        case GET_OBJECTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                objects: payload,\r\n                fetching: false,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;\r\n\r\n//Helpers\r\n/**\r\n * Success callback for getObjectsAction\r\n * @param {array} data \r\n * @param {function} dispatch \r\n */\r\nconst getObjectsSuccess = (data, dispatch) => {\r\n    dispatch({\r\n        type: GET_OBJECTS_SUCCESS,\r\n        payload: data,\r\n    });\r\n}\r\n\r\n/**\r\n * Error callback for getObjectsAction\r\n * @param {number} errorCode \r\n * @param {string} errorMessage \r\n * @param {function} dispatch \r\n */\r\nconst getObjectsError = (errorCode, errorMessage, dispatch) => {\r\n    dispatch({ \r\n        type: GET_OBJECTS_ERROR,\r\n        payload: errorMessage,\r\n    });\r\n}\r\n\r\n\r\n\r\n//ACTIONS\r\n\r\n/**\r\n * This action gets objects from the designed endpoint using the requests facade\r\n */\r\nexport let getObjectsAction = () => (dispatch, getState) => {\r\n    //We pass dispatch as callback argument to be able to use this method in the callbacks\r\n    let callbackArguments = [dispatch];\r\n    //We dispatch the action to enable the fetching state\r\n    dispatch({\r\n        type: GET_OBJECTS,\r\n    });\r\n    //We make the request using the requests facade\r\n    Requests.makeRequest(BASE_ENDPOINT, {},  getObjectsSuccess, getObjectsError, ...callbackArguments);\r\n}","import { compose, createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n//Reducers\r\nimport editorReducer from './reducers/editorDuck';\r\nimport projectReducer from './reducers/projectDuck';\r\nimport objectsReducer from './reducers/objectsDuck';\r\n\r\nlet rootReducer = combineReducers({\r\n    editor: editorReducer,\r\n    project: projectReducer,\r\n    objects: objectsReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n\r\nconst generateStore = () => {\r\n    let store = createStore(\r\n        rootReducer, \r\n        composeEnhancers(applyMiddleware(thunk))\r\n    );\r\n    //Restore project action\r\n    return store;\r\n}\r\n\r\nexport default generateStore;","import React from 'react';\r\n//Styles\r\nimport './Heights.css';\r\n\r\nconst FixedHeightContainer = ({ height, children, className, ...extraProps }) => (\r\n    <div\r\n        className = {`h-${height} ${className || ''}`}\r\n        { ...extraProps }\r\n    >\r\n        { children }\r\n    </div>\r\n);\r\n\r\nexport default FixedHeightContainer;","//Model names\r\nexport const WALL           = 'WALL';\r\nexport const KIOSK          = 'KIOSK';\r\nexport const TABLE          = 'TABLE';\r\nexport const BOARD          = 'BOARD';\r\nexport const FURNITURE      = 'FURNITURE';\r\n//2D views\r\nexport const TOP            = 'TOP';\r\nexport const FRONT          = 'FRONT';\r\nexport const FRONT_LEFT     = 'FRONT_LEFT';\r\nexport const FRONT_RIGHT    = 'FRONT_RIGHT';\r\n\r\nexport let models = {\r\n    [KIOSK]: {\r\n        uri: 'assets/models/3D/kiosk/kiosk.glb',\r\n        thumbnail: 'assets/models/3D/kiosk/thumbnail.png',\r\n    },\r\n    [TABLE]: {\r\n        uri: 'assets/models/3D/table/table.glb',\r\n        thumbnail: 'assets/models/3D/table/thumbnail.png',\r\n    },\r\n    [BOARD]: {\r\n        uri: 'assets/models/3D/board/board.glb',\r\n        thumbnail: 'assets/models/3D/board/thumbnail.png',\r\n    },\r\n    [FURNITURE]: {\r\n        uri: 'assets/models/3D/furniture/furniture.glb',\r\n        thumbnail: 'assets/models/3D/furniture/thumbnail.png',\r\n    }\r\n}\r\n\r\nexport let models2D = {\r\n    [FURNITURE]: {\r\n        //Views\r\n        [TOP]: {\r\n            uri: 'assets/models/2D/furniture/furniture_top.svg',\r\n            thumbnail: 'assets/models/3D/furniture/thumbnail.png',\r\n        },\r\n        [FRONT]: {\r\n            uri: 'assets/models/2D/furniture/furniture_front.svg',\r\n            thumbnail: 'assets/models/3D/furniture/thumbnail.png',\r\n        },\r\n        [FRONT_LEFT]: {\r\n            uri: 'assets/models/2D/furniture/furniture_front.svg',\r\n            thumbnail: 'assets/models/3D/furniture/thumbnail.png',\r\n        },\r\n        [FRONT_RIGHT]: {\r\n            uri: 'assets/models/2D/furniture/furniture_front.svg',\r\n            thumbnail: 'assets/models/3D/furniture/thumbnail.png',\r\n        }\r\n    }\r\n}\r\n\r\nexport let getDimensions = type => {\r\n    switch(type){\r\n        case TABLE:\r\n            return {\r\n                width: 50,\r\n                depth: 50,\r\n                height: 75,\r\n            }\r\n        case FURNITURE:\r\n            return {\r\n                width: 100,\r\n                depth: 50,\r\n                height: 200,\r\n            }\r\n        default:\r\n            return {\r\n                width: 100,\r\n                depth: 100,\r\n                height: 100\r\n            }\r\n    }\r\n}\r\n\r\nexport let getModelUri = type => {\r\n    switch(type){\r\n        case WALL:\r\n            return 'assets/models/3D/wall.glb'\r\n        case KIOSK:\r\n            return models[KIOSK].uri;\r\n        case TABLE:\r\n            return models[TABLE].uri;\r\n        case BOARD:\r\n            return models[BOARD].uri;\r\n        case FURNITURE:\r\n            return models[FURNITURE].uri;\r\n        default:\r\n            return models[KIOSK].uri;\r\n    }\r\n}\r\n\r\n\r\nexport let getModel2DUri = (type, view) => {\r\n    switch(type){\r\n        case FURNITURE:\r\n            return models2D[FURNITURE][view].uri;\r\n        default:\r\n            return models2D[FURNITURE][view].uri;\r\n    }\r\n}\r\n\r\nexport let getModelThumbnail = type => {\r\n    switch(type){\r\n        case KIOSK:\r\n            return models[KIOSK].thumbnail;\r\n        case TABLE:\r\n            return models[TABLE].thumbnail;\r\n        case BOARD:\r\n            return models[BOARD].thumbnail;\r\n        case FURNITURE:\r\n            return models[FURNITURE].thumbnail;\r\n        default:\r\n            return models[TABLE].thumbnail;\r\n    }\r\n}","import Konva from 'konva';\r\n//Constants\r\nimport { getModel2DUri, getDimensions, TOP } from '../../constants/models/models';\r\n\r\nexport default class BidimensionalRenderer {\r\n    //CONSTANTS\r\n    //DOM container\r\n    static DOM_CONTAINER_ID = 'bidimensional_renderer';\r\n\r\n    //CONSTRUCTOR\r\n    constructor(sceneWidth = 100, sceneHeight = 100, enablePlaneControls = false) {\r\n        this.objects = [];\r\n        //Scene dimensions\r\n        this.sceneWidth = sceneWidth;\r\n        this.sceneHeight = sceneHeight;\r\n        //Plane controls\r\n        this.enablePlaneControls = enablePlaneControls;\r\n        //Container dimensions\r\n        this.domContainer = document.getElementById(BidimensionalRenderer.DOM_CONTAINER_ID);\r\n        this.containerWidth = this.domContainer.clientWidth;\r\n        this.containerHeight = this.domContainer.clientHeight;\r\n        this.containerAspectRatio = this.containerWidth / this.containerHeight;\r\n        //Methods linkage\r\n        this.render = this.render.bind(this);\r\n    }\r\n\r\n    //PRIMARY METHODS\r\n    init(){\r\n        this.setInitialStage();\r\n        this.setInitialLayer();\r\n        this.setPlane();\r\n        this.addZoomEventToStage();\r\n        this.render();\r\n    }\r\n\r\n\r\n    setInitialStage(){\r\n        this.stage = new Konva.Stage({\r\n            container: BidimensionalRenderer.DOM_CONTAINER_ID,\r\n            width: this.containerWidth,\r\n            height: this.containerHeight,\r\n            draggable:  this.enablePlaneControls ? 'true' : null,\r\n        });\r\n    }\r\n\r\n    setInitialLayer(){\r\n        this.layer = new Konva.Layer();\r\n        this.addLayerToStage(this.layer);\r\n        this.layer.draw();\r\n    }\r\n\r\n    addLayerToStage(layer){\r\n        this.stage.add(layer);\r\n    }\r\n\r\n    addZoomEventToStage(){\r\n        let scaleBy = 1.1;\r\n        if(!this.enablePlaneControls)\r\n            return;\r\n        this.stage.on('wheel', event => {\r\n            event.evt.preventDefault();\r\n            let oldScale = this.stage.scaleX();\r\n            let pointer = this.stage.getPointerPosition();\r\n    \r\n            let mousePointTo = {\r\n              x: (pointer.x - this.stage.x()) / oldScale,\r\n              y: (pointer.y - this.stage.y()) / oldScale,\r\n            };\r\n    \r\n            let newScale = event.evt.deltaY > 0 ? oldScale * scaleBy : oldScale / scaleBy;\r\n            this.stage.scale({ x: newScale, y: newScale });\r\n    \r\n            let newPosition = {\r\n              x: pointer.x - mousePointTo.x * newScale,\r\n              y: pointer.y - mousePointTo.y * newScale,\r\n            };\r\n            this.stage.position(newPosition);\r\n            this.stage.batchDraw();\r\n          });\r\n    }\r\n\r\n    setPlaneCenter(){\r\n        this.planeCenterCoordinates = {\r\n            x: this.containerWidth / 2,\r\n            y: this.containerHeight / 2,\r\n        }\r\n    }\r\n\r\n    setPlane(){\r\n        this.plane = new Konva.Rect({\r\n            x: 0,\r\n            y: 0,\r\n            width: this.containerWidth,\r\n            height: this.containerHeight,\r\n            fill: 'lightgray',\r\n            stroke: 'black',\r\n            opacity: 0.25,\r\n            strokeWidth: 1,\r\n        });\r\n        this.setPlaneCenter();\r\n        this.layer.add(this.plane)\r\n        this.drawGrid();\r\n    }\r\n\r\n    \r\n\r\n    drawGrid(){\r\n        //Internal constants\r\n        const ROW = 'ROW';\r\n        const COLUMN = 'COLUMN';\r\n        //Internal variables\r\n        let gridSize = 50;\r\n        let numberOfRows = this.containerHeight / gridSize;\r\n        let numberOfCols = this.containerWidth / gridSize;\r\n        //Function that draws the requested number of lines, of the requested type ('row' || 'col') with the desired size\r\n        const drawLinesInAxis = (numberOfLines, type, size, gridSize) => {\r\n            Array.from(new Array(Math.round(numberOfLines))).forEach((row, index) => {\r\n                this.layer.add(\r\n                    new Konva.Rect({\r\n                        x: type === ROW ? 0 : index * gridSize,\r\n                        y: type === ROW ? index * gridSize : 0,\r\n                        width: type === ROW ? size : 0,\r\n                        height: type === ROW ? 0 : size,\r\n                        stroke: 'black',\r\n                        opacity: 0.25,\r\n                        strokeWidth: 1,\r\n                    })\r\n                );\r\n            })\r\n        }\r\n        //We generate the grid by drawing the rows and the columns based on the grid size (each square side)\r\n        drawLinesInAxis(numberOfRows, ROW, this.containerWidth, gridSize);\r\n        drawLinesInAxis(numberOfCols, COLUMN, this.containerHeight, gridSize);\r\n    }\r\n\r\n    render(){\r\n        requestAnimationFrame(this.render);\r\n        this.stage.batchDraw();\r\n    }\r\n    \r\n    loadSVGModel(type, { x, y }, onSuccess, updateCallback){\r\n        //We load items from catalog\r\n        let path = getModel2DUri(type, TOP);\r\n        //We get the dimensions of the object (assuming in a 2D top view the \"height\" is the depth)\r\n        const { width, depth: height } = getDimensions(type);\r\n        //We bind the instance to a variable\r\n        let self = this;\r\n        Konva.Image.fromURL(path, imageNode => {\r\n            imageNode.setAttrs({\r\n                //If no coordinates were given we place the objects in the middle of the plane\r\n                x: x || self.containerWidth / 2,\r\n                y: y || self.containerHeight / 2,\r\n                type,\r\n                width,\r\n                height,\r\n                //We set the center of the element\r\n                offsetX: width / 2,\r\n                offsetY: height / 2,\r\n                //We enable the drag and drop interaction for this element\r\n                draggable: 'true',\r\n                //The function that defines the bound for dragging\r\n                dragBoundFunc: pos => boundFunction(self, { width, height }, pos)\r\n            });\r\n            //We add the drag end event listener, to be able to update item position at project´s level\r\n            imageNode.on('dragend', updateCallback );\r\n            //We add the object to the layer\r\n            this.layer.add(imageNode);\r\n            //If given, we execute the success callback passing the created object as argument\r\n            if(onSuccess && typeof(onSuccess) === 'function')\r\n                onSuccess(imageNode);\r\n            //We update the layer\r\n            this.layer.batchDraw();\r\n        });\r\n\r\n        const boundFunction = (self, attrs, pos) => {\r\n            let { width, height } = attrs;\r\n            let widthPadding = width / 2;\r\n            let heightPadding = height / 2;\r\n            //X axis constraints\r\n            let x = pos.x - widthPadding <= 0 ? 0 + widthPadding : pos.x + widthPadding >= self.containerWidth ? self.containerWidth - widthPadding : pos.x;\r\n            //Y axis constraints\r\n            let y = pos.y - heightPadding <= 0 ? 0 + heightPadding : pos.y + heightPadding >= self.containerHeight ? self.containerHeight - heightPadding : pos.y;\r\n            return { x, y }\r\n        }\r\n    }\r\n}","import React from 'react';\r\n//Components\r\nimport FixedHeightContainer from '../../Layout/Containers/FixedHeightContainer';\r\n//Classes\r\nimport BidimensionalRenderer from '../../../classes/Renderers/BidimensionalRenderer';\r\n\r\nconst RendererContainer = () => (\r\n    <FixedHeightContainer\r\n        id = { BidimensionalRenderer.DOM_CONTAINER_ID }\r\n        height = { 100 }\r\n    />\r\n);\r\n\r\nexport default RendererContainer;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n//Redux\r\nimport { \r\n    saveProjectAction, \r\n    setProjectNameAction, \r\n    setProjectObjectsAction, \r\n    setProjectVersionAction, \r\n    addObjectToProjectAction, \r\n    updateProjectObjectAction,\r\n    set3DSceneDimensionsAction,\r\n    set2DSceneDimensionsAction,\r\n    setProjectDescriptionAction,\r\n    removeObjectFromProjectAction, \r\n} from '../reducers/projectDuck';\r\n\r\nconst withProjectState = WrappedComponent => {\r\n    const WithProjectState = props => {\r\n        let { \r\n            project,\r\n            saveProjectAction,\r\n            setProjectNameAction, \r\n            setProjectObjectsAction, \r\n            setProjectVersionAction,\r\n            addObjectToProjectAction,\r\n            updateProjectObjectAction,\r\n            set3DSceneDimensionsAction,\r\n            set2DSceneDimensionsAction,\r\n            setProjectDescriptionAction,\r\n            removeObjectFromProjectAction,\r\n            ...ownProps\r\n        } = props;\r\n\r\n        return <WrappedComponent \r\n            project = { project }\r\n            addObject = { addObjectToProjectAction }\r\n            updateObject = { updateProjectObjectAction }\r\n            removeObject = { removeObjectFromProjectAction }\r\n            setProjectName = { setProjectNameAction }\r\n            setProjectObjects = { setProjectNameAction }\r\n            setProjectVersion = { setProjectVersionAction }\r\n            set2DSceneDimensions = { set2DSceneDimensionsAction }\r\n            set3DSceneDimensions = { set3DSceneDimensionsAction }\r\n            setProjectDescription = { setProjectDescriptionAction }\r\n            { ...ownProps }\r\n        />\r\n    }\r\n\r\n    const mapStateToProps = (state, ownProps) => {\r\n        return {\r\n            project: state.project,\r\n            ...ownProps\r\n        }\r\n    }\r\n\r\n    let WithState = connect(\r\n        mapStateToProps, \r\n        { \r\n            saveProjectAction,\r\n            setProjectNameAction, \r\n            setProjectObjectsAction, \r\n            setProjectVersionAction,\r\n            addObjectToProjectAction,\r\n            updateProjectObjectAction,\r\n            set3DSceneDimensionsAction,\r\n            set2DSceneDimensionsAction,\r\n            setProjectDescriptionAction,\r\n            removeObjectFromProjectAction,\r\n        }\r\n    )(WithProjectState);\r\n    return WithState;\r\n}\r\n\r\nexport default withProjectState;\r\n","import React, { useState, useEffect } from 'react';\r\n//Classes\r\nimport BidimensionalRenderer from '../../../../classes/Renderers/BidimensionalRenderer';\r\nimport withProjectState from '../../../../redux/HOC/withProjectState';\r\n\r\nconst with2DRenderer = WrappedComponent => {\r\n    const With2DRenderer = ({ project, addObject, updateObject, removeObject, set2DSceneDimensions, ...ownProps }) => {\r\n        //PROPS\r\n        //Destructuring\r\n        const { objects: projectObjects } = project;\r\n        //HOOKS\r\n        //State\r\n        const [models, setModels] = useState({});\r\n        const [sceneInstance, setSceneInstance] = useState();\r\n        const [draggedObject, setDraggedObject] = useState();\r\n        \r\n\r\n        //Effects\r\n        useEffect(() => {\r\n            //We set the scene instance\r\n            let sceneInstance = new BidimensionalRenderer();\r\n            sceneInstance.init();\r\n            setSceneInstance(sceneInstance);\r\n            //We set the container dimensions\r\n            const { containerWidth, containerHeight } = sceneInstance;\r\n            set2DSceneDimensions(containerWidth, containerHeight);\r\n            /**\r\n             * This method restores the existing objects in the plane\r\n             */\r\n            const restoreModels = () => {\r\n                //We retrieve the existing models in state\r\n                let modelsCopy = { ...models };\r\n                //We iterate over the existing models and create the 2d model\r\n                projectObjects.forEach(model => {\r\n                    //We get the type and the coordinates (of the 2d key)\r\n                    const { type } = model;\r\n                    const { coordinates } = model['2d'];\r\n                    //We update the model quantity\r\n                    modelsCopy[type] ? modelsCopy[type].quantity++ : modelsCopy[type] = { quantity: 1 };\r\n                    //We create the SVG model\r\n                    sceneInstance.loadSVGModel(\r\n                        type,\r\n                        coordinates,\r\n                        createdModel => { //onSuccess callback\r\n                            let { _id, attrs: { x, y } } = createdModel;\r\n                            let modelWithUpdatedId = {\r\n                                ...model,\r\n                                '2d': {\r\n                                    uuid: _id,\r\n                                    coordinates: { x, y }\r\n                                }\r\n                            };\r\n                            updateObject(modelWithUpdatedId) //updateCallback\r\n                        },\r\n                        updateModel\r\n                    );\r\n                });\r\n                setModels(modelsCopy);\r\n            }\r\n            restoreModels();\r\n            \r\n        }, []);\r\n\r\n\r\n        /**\r\n         * Effect used to update the dragged object\r\n         */\r\n        useEffect(() => {\r\n            if(!draggedObject)\r\n                return;\r\n            //We get the id and the coordinates from the dragged object\r\n            const { _id, x, y } = draggedObject\r\n            \r\n            let existingObject = findObjectBy2DModelId(_id);\r\n            if(!existingObject)\r\n                return;\r\n            let tridimensionalEditorState = { ...existingObject['3d'] };\r\n            let updatedObject = { \r\n                ...existingObject,\r\n                '2d': {\r\n                    uuid: _id,\r\n                    coordinates: { x, y }\r\n                },\r\n                '3d': {\r\n                    ...tridimensionalEditorState,\r\n                    coordinates: get3DCoordinates(x, y), //We get the 3D coordinates, because movements in 2D editor take effect on 3D editor too\r\n                }\r\n            };\r\n            updateObject(updatedObject);\r\n        }, [draggedObject]);\r\n        /**\r\n         * Success callback for the loadSVGModel method, in this callback we add the created object at project´s level, \r\n         * generating the id and the 2d and 3d keys, which will contain the id´s and coordinates of the object in the current\r\n         * project.\r\n         * @param {object} createdModel \r\n         */\r\n        const onCreationSuccess = createdModel => {\r\n            //We get the id, type and the coordinates of the created model\r\n            let { _id, attrs: { x, y, type } } = createdModel;\r\n            //We generate an object with all the properties needed to keep it in the state\r\n            let objectToAdd = {\r\n                id: projectObjects.length,\r\n                type,\r\n                '2d': {\r\n                    uuid: _id, //Konva generated ID\r\n                    coordinates: { x, y }\r\n                },\r\n                '3d': {\r\n                    uuid: '', //We don´t know the id for the 3D model, it will be generated and updated on render time\r\n                    coordinates: { x: 0, y: 0, z: 0 }\r\n                }\r\n            }\r\n            //We add the object at project´s level\r\n            addObject(objectToAdd);\r\n        }\r\n\r\n        /**\r\n         * This method return the complete object based on it´s 2d model id\r\n         * @param {string} id2DModel \r\n         */\r\n        const findObjectBy2DModelId = id2DModel => projectObjects.find(object => object['2d'].uuid === id2DModel);\r\n\r\n        const updateModel = event => {\r\n            if(!event.target)\r\n                return;\r\n            //We get the 2d model id and the new coordinates\r\n            const { target: { _id, attrs: { x, y } } } = event;\r\n            setDraggedObject({ x, y, _id });       \r\n        }\r\n\r\n        /**\r\n         * This method adds a new model of the specified type to the scene\r\n         * @param {string} type \r\n         */\r\n        const addModel = (type, coordinates = { }) => {\r\n            increaseModelQuantity(type);\r\n            //We provide the success callback to add the object at project´s level\r\n            sceneInstance.loadSVGModel(type, coordinates, onCreationSuccess, updateModel);\r\n        }\r\n\r\n        /**\r\n         * This method increases the quantity of the specified model\r\n         * @param {string} type \r\n         */\r\n        const increaseModelQuantity = type => {\r\n            let modelsCopy = { ...models };\r\n            modelsCopy[type] ? modelsCopy[type].quantity++ : modelsCopy[type] = { quantity: 1 };\r\n            setModels(modelsCopy);\r\n        }\r\n\r\n        const calculateOriginCoordinates = (x, y) => {\r\n            let { x: planeCenterX, y: planeCenterY } = sceneInstance.planeCenterCoordinates;\r\n            return {\r\n                x: planeCenterX - x,\r\n                y: planeCenterY - y\r\n            }\r\n        }\r\n\r\n        const get3DCoordinates = (x, y) => {\r\n            let originCoordinates = calculateOriginCoordinates(x, y);\r\n            let { x: originX, y: originY } = originCoordinates;\r\n            let xRatio = 5 / sceneInstance.containerWidth; //Posteriormente se obtiene del estado\r\n            let yRatio = 5 / sceneInstance.containerHeight;\r\n            return {\r\n                x:  -1 * originX * xRatio,\r\n                y: 0,\r\n                z: -1 * originY * yRatio\r\n            }\r\n\r\n        }\r\n\r\n        return <WrappedComponent \r\n            models = { models }\r\n            addModel = { addModel }\r\n            { ...ownProps }\r\n        />\r\n    }\r\n\r\n    //We apply the project state HOC\r\n    let WithProjectState = withProjectState(With2DRenderer);\r\n    //We return the decorated component\r\n    return WithProjectState;\r\n}\r\n\r\n\r\nexport default with2DRenderer;","import React from 'react';\r\n\r\nconst Flex = ({ children, className, ...extraProps }) => (\r\n    <div\r\n        className = { `d-flex ${className || ''}`}\r\n        { ...extraProps }\r\n    >\r\n    { children }\r\n    </div>\r\n);\r\n\r\nexport default Flex;","import React from 'react';\r\n//Components\r\nimport Flex from './Flex';\r\n\r\nconst FlexRow = ({ children, className, }) => (\r\n    <Flex\r\n        className = {`flex-row ${className || ''}`}\r\n    >\r\n        { children }\r\n    </Flex>\r\n);\r\n\r\nexport default FlexRow;","import React from 'react';\r\n//Styles\r\nimport './Widths.css';\r\n\r\nconst FixedWidthContainer = ({ width, children, className, ...extraProps }) => (\r\n    <div\r\n        className = {`w-${width} ${className || ''}`}\r\n        { ...extraProps }\r\n    >\r\n        { children }\r\n    </div>\r\n);\r\n\r\nexport default FixedWidthContainer;","import React from 'react';\r\n//Functions\r\nimport { getModelThumbnail } from '../../../../../../constants/models/models';\r\n//Styles\r\nimport './ModelThumbnail.css';\r\n\r\n\r\nconst ModelThumbnail = ({ title, model, onClick, className, modelQuantity, imageClassName }) => {\r\n    return(\r\n        <div \r\n            title = { title }\r\n            onClick = { onClick }\r\n            className = { `model-thumbnail-container cursor-click ${className || ''}` }\r\n            data-toggle = 'tooltip' \r\n            data-placement = 'right' \r\n        >\r\n            <img \r\n                src = { getModelThumbnail(model) } \r\n                alt = { model }\r\n                className =  { imageClassName || 'model-thumbnail' }\r\n                \r\n            />\r\n            {\r\n                modelQuantity > 0 && \r\n                <div className='quantity-tile'>\r\n                    <span className='rounded-circle bg-primary circle-tile text-light'>{ modelQuantity }</span>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModelThumbnail;","import React from 'react';\r\nimport FlexRow from '../../../../../../Layout/Flex/FlexRow';\r\nimport ModelThumbnail from '../ModelThumbnail';\r\n\r\nconst ModelsLibrary = ({ models, addModel, className }) => (\r\n    <FlexRow\r\n        className = { `justify-content-start pt-2 ${className || ''}` }\r\n    >\r\n        <ModelThumbnail\r\n            model = 'TABLE'\r\n            title = 'Mesa'\r\n            onClick = { (e) => addModel('TABLE') }\r\n            className = 'mr-3'\r\n            modelQuantity = { models['TABLE'] ? models['TABLE'].quantity : 0 }\r\n        />\r\n        <ModelThumbnail \r\n            model = 'FURNITURE'\r\n            title = 'Entrepaños'\r\n            onClick = { (e) => addModel('FURNITURE') }\r\n            className = 'mr-3'\r\n            modelQuantity = { models['FURNITURE'] ? models['FURNITURE'].quantity : 0 }\r\n        />\r\n    </FlexRow>\r\n);\r\n\r\nexport default ModelsLibrary;","import React from 'react';\r\nimport FlexRow from '../../../../Layout/Flex/FlexRow';\r\nimport FixedWidthContainer from '../../../../Layout/Containers/FixedWidthContainer';\r\nimport ModelsLibrary from '../../../3D/Layout/Editor/EditorActions/ModelsLibrary/ModelsLibrary';\r\n\r\nconst EditorActions = ({ models, addModel }) => (\r\n    <FlexRow>\r\n        <FixedWidthContainer\r\n            width = { 75 }\r\n            className = 'overflow-auto h-100'\r\n        >\r\n            \r\n            <ModelsLibrary \r\n                models = { models }\r\n                addModel = { addModel }\r\n            />\r\n        </FixedWidthContainer>\r\n\r\n    </FlexRow>\r\n);\r\n\r\nexport default EditorActions;","import React from 'react';\r\n//Components\r\nimport RendererContainer from '../RendererContainer';\r\nimport FixedHeightContainer from '../../../Layout/Containers/FixedHeightContainer';\r\nimport with2DRenderer from '../../../Renderer/2D/HOC/with2DRenderer';\r\nimport EditorActions from '../../2D/Editor/EditorActions/EditorActions';\r\n\r\n\r\nconst Editor = ({ models, addModel }) => {\r\n    return (\r\n        <FixedHeightContainer\r\n            height = { 100 }\r\n        >\r\n            <FixedHeightContainer\r\n                height = { 90 }\r\n            >\r\n                <RendererContainer />\r\n            </FixedHeightContainer>\r\n            <FixedHeightContainer\r\n                height = { 10 }\r\n                className = 'bg-none'\r\n            >\r\n                <EditorActions \r\n                    models = { models }\r\n                    addModel = { addModel }\r\n                />\r\n            </FixedHeightContainer>\r\n        </FixedHeightContainer>\r\n    )\r\n}\r\n\r\nexport default with2DRenderer(Editor);","import React from 'react';\r\nimport Flex from './Flex';\r\n\r\nconst FlexColumn = ({ children, className, ...extraProps }) => (\r\n    <Flex\r\n        className = {`flex-column ${className || ''}`}\r\n        { ...extraProps }\r\n    >\r\n        { children }\r\n    </Flex>\r\n);\r\n\r\nexport default FlexColumn;","import React from 'react';\r\nimport FlexRow from '../Flex/FlexRow';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst LabelWithIcon = ({ id, icon, onClick, className, labelText, ...extraProps }) => (\r\n    <label\r\n        id = { id }\r\n        onClick = { onClick }\r\n        className = { className }\r\n        { ...extraProps }\r\n    >\r\n        <FlexRow\r\n            className = 'align-items-center'\r\n        >\r\n            <FontAwesomeIcon \r\n                icon = { icon }\r\n                className = 'mr-2'\r\n            />\r\n            { labelText }\r\n        </FlexRow>\r\n    </label>\r\n);\r\n\r\nexport default LabelWithIcon;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n//Redux\r\nimport { setEditorTypeAction, setEditorWidthAction, setEditorHeightAction } from '../reducers/editorDuck';\r\n\r\nconst withEditorState = WrappedComponent => {\r\n    const WithEditorState = props => {\r\n        let {\r\n            editor,\r\n            setEditorTypeAction, \r\n            setEditorWidthAction, \r\n            setEditorHeightAction,\r\n            ...ownProps\r\n        } = props;\r\n\r\n        return <WrappedComponent \r\n            editorState = { editor }\r\n            setEditorType = { setEditorTypeAction }\r\n            setEditorWidth = { setEditorWidthAction }\r\n            setEditorHeight = { setEditorHeightAction }\r\n            { ...ownProps }\r\n        />\r\n    }\r\n\r\n    const mapStateToProps = (state, ownProps) => {\r\n        return {\r\n            editor: state.editor,\r\n            ...ownProps,\r\n        }\r\n    }\r\n\r\n    let WithState = connect(\r\n        mapStateToProps, \r\n        { \r\n            setEditorTypeAction, \r\n            setEditorWidthAction, \r\n            setEditorHeightAction \r\n        }\r\n    )(WithEditorState);\r\n\r\n    return WithState;\r\n}\r\n\r\nexport default withEditorState;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport FlexRow from '../Flex/FlexRow';\r\n\r\nconst ButtonWithIcon = ({ icon, type, onClick, className, buttonText, ...extraProps }) => (\r\n    <button\r\n        onClick = { onClick }\r\n        className = {`btn btn-${type} ${className || ''}`}\r\n        { ...extraProps }\r\n    >\r\n        <FlexRow\r\n            className = 'align-items-center'\r\n        >\r\n            <FontAwesomeIcon \r\n                icon = { icon }\r\n                className = 'mr-2'\r\n            />\r\n            { buttonText }\r\n        </FlexRow>\r\n\r\n    </button>\r\n);\r\n\r\nexport default ButtonWithIcon;","import React, { useState } from 'react';\r\n//Components\r\nimport FlexRow from '../Layout/Flex/FlexRow';\r\nimport LabelWithIcon from '../Layout/Labels/LabelWithIcon';\r\nimport ButtonWithIcon from '../Layout/Buttons/ButtonWithIcon';\r\n//HOC\r\nimport withProjectState from '../../redux/HOC/withProjectState';\r\n//Icons\r\nimport { faCogs, faCheckCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nconst ProjectSettings = ({ project, setProjectName, setProjectDescription }) => {\r\n    //Props destructuring\r\n    let { name, description } = project;\r\n    \r\n    //HOOKS\r\n    //State\r\n    const [changesSaved, setChangesSaved] = useState(true);\r\n    const [newProjectName, setNewProjectName] = useState(name);\r\n    const [newProjectDescription, setNewProjectDescription] = useState(description);\r\n\r\n    const saveProjectChanges = event => {\r\n        event.preventDefault();\r\n        setChangesSaved(true);\r\n        setProjectName(newProjectName);\r\n        setProjectDescription(newProjectDescription);\r\n    }\r\n\r\n    const handleProjectNameChange = event => {\r\n        setChangesSaved(false);\r\n        setNewProjectName(event.target.value);\r\n    }\r\n\r\n    const handleProjectDescripctionChange = event => {\r\n        setChangesSaved(false);\r\n        setNewProjectDescription(event.target.value);\r\n    }\r\n\r\n    return(\r\n        <div className='container mt-3 py-3'>\r\n            <LabelWithIcon \r\n                icon = { faCogs }\r\n                labelText = 'Ajustes del proyecto'\r\n                className = 'h4 text-muted'\r\n            />\r\n            <hr />\r\n            <div className='form-group'>\r\n                <label>Nombre del proyecto: </label>\r\n                <input \r\n                    type = 'text'\r\n                    value = { newProjectName }\r\n                    onChange = { handleProjectNameChange }\r\n                    className = 'form-control rounded-lg'\r\n                    placeholder = 'Nombre del proyecto'\r\n                />\r\n            </div>\r\n            <div className='form-group'>\r\n                <label>Descripción del proyecto: </label>\r\n                <textarea \r\n                    rows = '5'\r\n                    value = { newProjectDescription }\r\n                    onChange = { handleProjectDescripctionChange }\r\n                    className='form-control'\r\n                />\r\n            </div>\r\n            <FlexRow\r\n                className = 'justify-content-center'\r\n            >\r\n                <ButtonWithIcon \r\n                    icon = { changesSaved ? faCheckCircle : null }\r\n                    onClick = { !changesSaved && saveProjectChanges }\r\n                    className = 'btn btn-success'\r\n                    buttonText = { changesSaved ? 'Cambios guardados' : 'Guardar cambios' }\r\n                    disabled = { changesSaved }\r\n                />\r\n            </FlexRow>\r\n        </div>\r\n    );\r\n}\r\n\r\n//We apply the project state HOC\r\nlet WithProjectState = withProjectState(ProjectSettings);\r\n//We export the decorated component\r\nexport default WithProjectState;","/**\r\n * @todo Posteriormente esto vendrá de BD\r\n */\r\nconst WOOD_TEXTURE_URI = '/assets/textures/wood.png';\r\nconst FLOOR_TEXTURE_URI = '/assets/textures/floor.png';\r\n\r\nexport default class TextureFactory {\r\n    static WOOD_TEXTURE = 'WOOD_TEXTURE';\r\n    static FLOOR_TEXTURE = 'FLOOR_TEXTURE';\r\n\r\n    static getTextureUri = textureType => {\r\n        let { WOOD_TEXTURE, FLOOR_TEXTURE } = TextureFactory;\r\n        switch(textureType){\r\n            case WOOD_TEXTURE:\r\n                return WOOD_TEXTURE_URI;\r\n            case FLOOR_TEXTURE:\r\n                return FLOOR_TEXTURE_URI;\r\n            default:\r\n                return FLOOR_TEXTURE_URI;\r\n        }\r\n    }\r\n}","import React from 'react';\r\n//Components\r\nimport ButtonWithIcon from '../../../../../../../Layout/Buttons/ButtonWithIcon';\r\n//Factories\r\nimport TextureFactory from '../../../../../../../../classes/3D/Models/TextureFactory';\r\n//Icons\r\nimport { faCog } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst PlaneSettings = ({ editorWidth, editorHeight, setEditorHeight, setEditorWidth, handleTextureChange }) => (\r\n    <div className='dropup'\r\n        title = 'Ajustes de escena 3D'\r\n        data-toggle = 'tooltip' \r\n        data-placement = 'top' \r\n    >\r\n        <div className='dropdown'>\r\n            <ButtonWithIcon \r\n                id = '3d_scene_settings'\r\n                icon = { faCog }\r\n                type = 'outline-secondary'\r\n                className = 'rounded-pill pr-1 py-2 mr-2'\r\n                data-toggle='dropdown' \r\n                aria-haspopup='true' \r\n                aria-expanded='false'\r\n            />\r\n            <div className='dropdown-menu mb-5 px-3 oveflow-auto' aria-labelledby='3d_scene_settings'>\r\n                <h5>Plane</h5>\r\n                \r\n                <div className='form-group'>\r\n                    <h6>Dimensiones: </h6>\r\n                    <label>Alto: </label>\r\n                    <input \r\n                        type = 'text' \r\n                        value = { editorHeight }\r\n                        onChange = { event => setEditorHeight(event.target.value) }\r\n                        className = 'form-control' \r\n                    />\r\n                    <label>Ancho: </label>\r\n                    <input \r\n                        type='text' \r\n                        value = { editorWidth }\r\n                        onChange = { event => setEditorWidth(event.target.value) }\r\n                        className='form-control' \r\n                    />\r\n                </div>\r\n                \r\n                \r\n                <div className='form-group'>\r\n                    <h6>Textura:</h6>\r\n                    <div>\r\n                        <label>\r\n                            <input \r\n                                type = 'checkbox'\r\n                                value = { TextureFactory.FLOOR_TEXTURE } \r\n                                onChange = { handleTextureChange }\r\n                                className = 'mr-2'\r\n                            />\r\n                            <img \r\n                                src = { TextureFactory.getTextureUri(TextureFactory.FLOOR_TEXTURE) } \r\n                                width = '30px' \r\n                                height = '30px' \r\n                                className = 'mr-2'\r\n                            />\r\n                            Piso\r\n                        </label>\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>\r\n                            <input \r\n                                type = 'checkbox'\r\n                                value = { TextureFactory.WOOD_TEXTURE } \r\n                                onChange = { handleTextureChange }\r\n                                className = 'mr-2'\r\n                            />\r\n                            <img \r\n                                src = { TextureFactory.getTextureUri(TextureFactory.WOOD_TEXTURE) } \r\n                                width = '30px' \r\n                                height = '30px' \r\n                                className = 'mr-2'\r\n                            />\r\n                            Duela\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default PlaneSettings;","import * as THREE from 'three';\r\n\r\nexport default class PlaneFactory {\r\n    static GRID         = 'GRID';\r\n    static MESH_PLANE   = 'MESH_PLANE';\r\n    static DEFAULT_SIZE = 5;\r\n    static DEFAULT_GRID = 100;\r\n    /**\r\n     * Returns an instance of the desired plane class\r\n     * @param {string} type \r\n     */\r\n    static create(type, width = PlaneFactory.DEFAULT_SIZE, height = PlaneFactory.DEFAULT_SIZE){\r\n        let plane;\r\n        switch(type){\r\n            case PlaneFactory.GRID:\r\n                plane = new THREE.GridHelper(width, PlaneFactory.DEFAULT_GRID);\r\n                break;\r\n            case PlaneFactory.MESH_PLANE:\r\n                const loader = new THREE.TextureLoader();\r\n                plane = new THREE.Mesh(\r\n                    new THREE.PlaneGeometry(\r\n                        width, \r\n                        height, \r\n                        PlaneFactory.DEFAULT_GRID, \r\n                        PlaneFactory.DEFAULT_GRID\r\n                    ),\r\n                    new THREE.MeshBasicMaterial({ //We load the default texture\r\n                        color: 0xD3D3D3\r\n                    })\r\n                );\r\n                //We rotate -90° the plane in order to be aligned with the 3D objects origin\r\n                plane.rotateX(-Math.PI / 2); \r\n                //Double sided material in order to prevent it to disappear when it is rotated\r\n                plane.material.side = THREE.DoubleSide;\r\n                break;\r\n            default:\r\n                plane = new THREE.GridHelper(PlaneFactory.DEFAULT_SIZE, PlaneFactory.DEFAULT_GRID);\r\n        }\r\n        return plane;\r\n    }\r\n}","import * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\nimport { DragControls } from 'three/examples/jsm/controls/DragControls';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\n//Factories\r\nimport PlaneFactory from '../3D/Plane/PlaneFactory';\r\n//Functions\r\nimport { getModelUri } from '../../constants/models/models';\r\n\r\nexport default class TridimensionalRenderer{\r\n    //CONSTANTS\r\n    //DOM container\r\n    static DOM_CONTAINER_ID = 'tridimensional_renderer';\r\n    //Light parameters\r\n    static DEFAULT_LIGHT_COLOR = 0xFFFFFF;\r\n    static DEFAULT_LIGHT_INTENSITY = 1;\r\n    //Default texture\r\n    static DEFAULT_TEXTURE_URI = '/assets/textures/wood.png'\r\n\r\n    //CONSTRUCTOR\r\n    constructor(sceneWidth = PlaneFactory.DEFAULT_SIZE, sceneHeight = PlaneFactory.DEFAULT_SIZE){\r\n        this.objects = [];\r\n        //Scene dimensions\r\n        this.sceneWidth = sceneWidth;\r\n        this.sceneHeight = sceneHeight;\r\n        //Container dimensions\r\n        this.domContainer = document.getElementById(TridimensionalRenderer.DOM_CONTAINER_ID);\r\n        this.containerWidth = this.domContainer.clientWidth;\r\n        this.containerHeight = this.domContainer.clientHeight;\r\n        this.containerAspectRatio = this.containerWidth / this.containerHeight;\r\n        //Plane\r\n        this.plane = null;\r\n        //Controls\r\n        this.orbitControls = null;\r\n        this.dragControls = null;\r\n        this.enableOrbitControls = true;\r\n        //Methods linkage\r\n        this.render = this.render.bind(this);\r\n\r\n    }\r\n\r\n    //PRIMARY METHODS\r\n\r\n    /**\r\n     * Main method, creates a scene and adds the necessary items. It also invokes the render method that will run\r\n     * as the mainloop.\r\n     */\r\n    init(){\r\n        this.setInitialScene();\r\n        this.setInitialCameraState();\r\n        this.setInitialRenderer();\r\n        this.addControls();\r\n        this.addPlane();\r\n        this.addResizeListener();\r\n        this.render()\r\n    }\r\n\r\n    /**\r\n     * This method creates a scene and adds the light to it\r\n     */\r\n    setInitialScene(){\r\n        this.scene = new THREE.Scene();\r\n        this.addLight();\r\n    }\r\n\r\n    /**\r\n     * This method creates a perspective camera, providing the aspect ratio and other parameters (most of them equal\r\n     * to the default ones) and setting it far enough to cover the whole scene\r\n     */\r\n    setInitialCameraState(){\r\n        //We get optimal camera distance\r\n        let cameraDistance = this.getOptimalCameraDistance();\r\n        //Then we instantiate a perspective camera and set it´s parameters (position and look point)\r\n        this.camera = new THREE.PerspectiveCamera(50, this.containerAspectRatio, 0.01, 3000);\r\n        this.camera.position.set(0, cameraDistance, 0);\r\n        this.camera.lookAt(0, cameraDistance, 0)\r\n    }\r\n\r\n    /**\r\n     * This method creates the WebGLRenderer and set its size. Also, it appends the canvas where the scene is generated\r\n     * to the dom container.\r\n     */\r\n    setInitialRenderer(){\r\n        this.renderer = new THREE.WebGLRenderer({ antialias: true });\r\n        //Renderer settings\r\n        this.renderer.setClearColor(\"#e5e5e5\");\r\n        this.renderer.setSize(this.containerWidth, this.containerHeight);\r\n        //Append renderer in DOM\r\n        this.domContainer.appendChild(this.renderer.domElement);\r\n    }\r\n\r\n    /**\r\n     * This method creates the necessary controls to the scene (orbit controls and drag controls)\r\n     */\r\n    addControls(){\r\n        this.orbitControls = new OrbitControls( this.camera, this.renderer.domElement );\r\n        this.dragControls = new DragControls(this.objects, this.camera, this.renderer.domElement);\r\n    }\r\n\r\n    /**\r\n     * This method creates a plane and adds it to the scene\r\n     */\r\n    addPlane(){\r\n        //Grid plane\r\n        let gridPlane = PlaneFactory.create(PlaneFactory.GRID, 50)\r\n        this.addToScene(gridPlane)\r\n        //Main plane (which can be personalized with different textures)\r\n        this.plane = PlaneFactory.create(PlaneFactory.MESH_PLANE, this.sceneWidth, this.sceneHeight);\r\n        this.addToScene(this.plane);  \r\n    }\r\n\r\n    /**\r\n     * This method adds a listener to the window resize event, in order to change the renderer dimensions to make it\r\n     * responsive, likewise, with the camera aspect ratio based on the new container dimensions\r\n     */\r\n    addResizeListener(){\r\n        window.addEventListener('resize', () => {\r\n            this.setContainerDimensions();\r\n            this.renderer && this.renderer.setSize(this.containerWidth, this.containerHeight);\r\n            if(this.camera){\r\n                this.camera.aspect = this.containerAspectRatio;\r\n                this.camera.updateProjectionMatrix()\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * This method conforms the mainloop of the 3d scene, by requesting the animation frame on a recursive way it'll always\r\n     * be executing the render method of the WebGLRenderer. Also, the orbit controls are updated in order to reflect the \r\n     * camera´s perspective changes made by the user interaction with mouse/keyboard events\r\n     */\r\n    render(){\r\n        requestAnimationFrame(this.render);\r\n        if(this.renderer && this.scene && this.camera){\r\n            this.renderer.render(this.scene, this.camera);\r\n        }\r\n        if(this.orbitControls){\r\n            this.orbitControls.update();\r\n        }\r\n    }\r\n\r\n    //SECONDARY METHODS\r\n\r\n    /**\r\n     * This methos sets the global callback for the drag end event\r\n     * @param {function} callback \r\n     */\r\n    setDragEndCallback(callback){\r\n        if(callback && typeof(callback) === 'function')\r\n            this.onDragEnd = callback;\r\n        //We bind the this context (instance)\r\n        this.onDragEnd = this.onDragEnd.bind(this);\r\n    }\r\n\r\n    /**\r\n     * This method adds an item to the current scene\r\n     * @param {any} element \r\n     */\r\n    addToScene(element){\r\n        this.scene.add(element);\r\n    }\r\n\r\n    /**\r\n     * Light creation and incorporation to the scene\r\n     */\r\n    addLight(){\r\n        let light = new THREE.AmbientLight(TridimensionalRenderer.DEFAULT_LIGHT_COLOR, TridimensionalRenderer.DEFAULT_LIGHT_INTENSITY)\r\n        light.position.set(0, 0, 0);\r\n        this.addToScene(light);\r\n       \r\n    }\r\n\r\n    /**\r\n     * This method sets the current dimensions of the DOM container\r\n     */\r\n    setContainerDimensions(){\r\n        this.containerWidth = this.domContainer.clientWidth;\r\n        this.containerHeight = this.domContainer.clientHeight;\r\n        this.containerAspectRatio = this.containerWidth / this.containerHeight;\r\n    }\r\n\r\n    /**\r\n     * This method adds a single object to the existing array of objects and updates the drag controls in order to be \r\n     * able to manipulate the object.\r\n     * @param {any} object \r\n     */\r\n    addObject(object){\r\n        this.objects.push(object);\r\n        this.updateDragControls();\r\n    }\r\n\r\n    /**\r\n     * This method sets the object's array with the provided one. Also, as in the addObject method, it updates the drag controls.\r\n     * @param {array} objects \r\n     */\r\n    setObjects(objects){\r\n        if(Array.isArray(objects))\r\n            this.objects = objects;\r\n        this.updateDragControls();\r\n    }\r\n\r\n    load3DModel(type, { x = 0, y = 0, z = 0 }, onSuccess){\r\n        let uri = getModelUri(type);\r\n        let loader = new GLTFLoader();\r\n        loader.load(\r\n            uri,\r\n            gltf => {\r\n                //Scaled to real dimensions\r\n                gltf.scene.scale.set(1, 1, 1);\r\n                //New objects starts at origin\r\n                gltf.scene.position.set(x, y, z);\r\n                //We add the object to the scene\r\n                this.addToScene(gltf.scene)\r\n                //We get the object of the scene and apply additional settings, finally we add it to the objects array (needed for drag controls)\r\n                gltf.scene.traverse( object => {\r\n                    if(object.isMesh) {\r\n                        //We load the default texture to the object if this does not have one already\r\n                        if(!object.material.map)\r\n                            this.addTextureToObject(object, TridimensionalRenderer.DEFAULT_TEXTURE_URI);\r\n                        if(onSuccess && typeof(onSuccess) === 'function')\r\n                            onSuccess(object);\r\n                        \r\n                        //We add the object to the array\r\n                        this.addObject(object);\r\n\r\n                    }\r\n                }) \r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * This method adds a texture to the object´s material, it can be modified at runtime\r\n     * @param {mesh} object \r\n     * @param {string} textureUri\r\n     */\r\n    addTextureToObject = (object, textureUri = null) => {\r\n        if(!object.isMesh)\r\n            return;\r\n        /**\r\n         * @todo Texture factory\r\n         */\r\n        //We load the texture \r\n        let texture = new THREE.TextureLoader().load(textureUri || TridimensionalRenderer.DEFAULT_TEXTURE_URI);\r\n        //Required parameters, specially encoding, which is set to LuminanceFormat\r\n        texture.encoding = THREE.LuminanceFormat;\r\n        texture.flipY = false;\r\n        //We add the texture in the material property of the object\r\n        object.material = new THREE.MeshPhongMaterial({\r\n            map: texture,\r\n        });\r\n        object.material.side = THREE.DoubleSide;\r\n    }\r\n\r\n    /**\r\n     * This method sets the status of the orbit controls (true means enabled, false is blocked)\r\n     * @param {boolean} value \r\n     */\r\n    setOrbitControlsEnabled(value){\r\n        this.enableOrbitControls = value;\r\n        this.orbitControls.enabled = value;\r\n    }\r\n\r\n    /**\r\n     * This method creates a new instance of DragControls with the new objects, also, it adds the respective listeners for\r\n     * the drag-start, drag and drag-end events.\r\n     * When the drag event is fired (drag-start) the orbit control is disabled to avoid events interference.\r\n     * During the object drag, the position where the user is placing the object is validated (border conditions), also, \r\n     * the Y axis is locked in the origin.\r\n     * When the drag event ends (drag-end) the orbit control is enabled.\r\n     */\r\n    updateDragControls(){\r\n        this.dragControls = new DragControls(this.objects, this.camera, this.renderer.domElement)\r\n        let { orbitControls, onDragEnd } = this;\r\n        let initialYPosition = 0;\r\n        //On drag event start we disable orbit controls to avoid events interference (we don´t want to trigger orbit controls while dragging an object)\r\n        this.dragControls.addEventListener('dragstart', event => {\r\n            initialYPosition = event.object.position.y;\r\n            if(orbitControls)\r\n                orbitControls.enabled = false\r\n        })\r\n        //During the drag event we apply validations in the position where the object is trying to be placed\r\n        this.dragControls.addEventListener ( 'drag', event => {\r\n            //Position in Y axis fixed to object´s initial Y axis position.\r\n            event.object.position.y = initialYPosition; \r\n            //Border conditions (X & Z)\r\n            /*\r\n            event.object.position.x = Math.abs(event.object.position.x) >= 2 ? 2 * (event.object.position.x > 0 ? 1 : -1) : event.object.position.x\r\n            event.object.position.z = Math.abs(event.object.position.z) >= 2 ? 2 * (event.object.position.z > 0 ? 1 : -1) : event.object.position.z\r\n            */\r\n        })\r\n        //On drag event end we enable the orbit controls again\r\n        this.dragControls.addEventListener('dragend', event => {\r\n            event.object.material.opacity = 1;\r\n            if(onDragEnd && typeof(onDragEnd) === 'function')\r\n                onDragEnd(event);\r\n            if(orbitControls)\r\n                orbitControls.enabled = this.enableOrbitControls;\r\n        })\r\n\r\n    }\r\n    /**\r\n     * Method to get camera´s optimal distance, we need to get far enough to get the whole scene, therefore we \r\n     * take the maximum value between height and width\r\n     */\r\n    getOptimalCameraDistance = () => Math.max(this.sceneHeight, this.sceneWidth)  * 1.15;\r\n}","import * as THREE from 'three';\r\nimport TridimensionalRenderer from \"../../Renderers/TridimensionalRenderer\";\r\n\r\nexport default class CameraRotationFactory {\r\n    /**\r\n     * Predefined views (top, front - with 4 modes - and isometric);\r\n     */\r\n    //TOP VIEW\r\n    static TOP_VIEW = 'TOP_VIEW';\r\n    //FRONT VIEW\r\n    static BACK_VIEW    = 'BACK_VIEW';\r\n    static FRONT_VIEW   = 'FRONT_VIEW';\r\n    static FRONT_LEFT   = 'FRONT_LEFT';\r\n    static FRONT_RIGHT  = 'FRONT_RIGHT';\r\n    //ISOMETRIC\r\n    static ISOMETRIC_VIEW = 'ISOMETRIC_VIEW';\r\n\r\n    /**\r\n     * Creates an instance of a tridimensional vector, which represents the position of the camera in the desired point of view.\r\n     * It also accepts a number representing the distance (how far is the camera). If not defined, the default value in TridimendionalRenderer\r\n     * will be used instead.\r\n     * @param {string} type \r\n     * @param {number} distance \r\n     */\r\n    static createCameraRotationVector = (type, distance = null) => {\r\n        let cameraDistance = distance || TridimensionalRenderer.DEFAULT_CAMERA_DISTANCE;\r\n        //The 3d vector to be returned is initialized with 0´s\r\n        let cameraPosition = new THREE.Vector3(0, 0, 0);\r\n        //We get the type of views (just to avoid writing the name of the class before all of them in the switch)\r\n        let { TOP_VIEW, BACK_VIEW, FRONT_VIEW, FRONT_LEFT, FRONT_RIGHT, ISOMETRIC_VIEW } = CameraRotationFactory;\r\n\r\n        switch(type){\r\n            case TOP_VIEW:\r\n                //In top view we only make non-zero the Y axis\r\n                cameraPosition.setY(cameraDistance);\r\n                break;\r\n            case BACK_VIEW:\r\n                //In back view we only make non-zero the Z axis (but in negative way)\r\n                cameraPosition.setZ(-cameraDistance);\r\n                break;\r\n            case FRONT_VIEW:\r\n                //In front view we make non-zero the Z axis\r\n                cameraPosition.setZ(cameraDistance);\r\n                break;\r\n            case FRONT_LEFT:\r\n                //In front left view we only make non-zero the X axis (but in negative way)\r\n                cameraPosition.setX(-cameraDistance);\r\n                break;\r\n            case FRONT_RIGHT:\r\n                //In front right view we only make non-zero the X axis\r\n                cameraPosition.setX(cameraDistance);\r\n                break;\r\n            case ISOMETRIC_VIEW:\r\n                //We get a little closer\r\n                cameraDistance -= 2;\r\n                //In isometric view we set the X axis and the Z axis equal, and we make the Y axis half the distance value\r\n                cameraPosition.setX(cameraDistance);\r\n                cameraPosition.setY(cameraDistance / 2);\r\n                cameraPosition.setZ(cameraDistance);\r\n                break;\r\n            default:\r\n                //By default we get the top view\r\n                cameraPosition.setY(cameraDistance);\r\n        }\r\n        //We return the 3d vector which represents the position that the camera needs to acquire in order to get the desired view\r\n        return cameraPosition;\r\n    }\r\n}","import React from 'react';\r\n//Components\r\nimport FlexColumn from '../../../../../../Layout/Flex/FlexColumn';\r\nimport LabelWithIcon from '../../../../../../Layout/Labels/LabelWithIcon';\r\n//Icons\r\nimport { faCrosshairs, faCaretSquareUp, faWindowMaximize, faWindowRestore, faCaretSquareLeft, faCaretSquareRight, faCube } from '@fortawesome/free-solid-svg-icons';\r\n//Classes\r\nimport CameraRotationFactory from '../../../../../../../classes/3D/Camera/CameraRotationFactory';\r\n\r\n\r\n\r\nconst CameraPositionMenu = ({ rotateCamera }) => {\r\n    //Available views\r\n    let { TOP_VIEW, BACK_VIEW, FRONT_VIEW, FRONT_LEFT, FRONT_RIGHT, ISOMETRIC_VIEW } = CameraRotationFactory;\r\n    return(\r\n        <div \r\n            title = 'Vistas'\r\n            className = 'dropup'\r\n            data-toggle = 'tooltip' \r\n            data-placement = 'top' \r\n        >\r\n            <LabelWithIcon \r\n                icon = { faCrosshairs }\r\n                title = 'Vistas'\r\n                className = 'cursor-click mb-0 btn btn-outline-secondary rounded-pill pr-1 mr-2 py-2'\r\n                data-toggle = 'dropdown' \r\n                aria-haspopup = 'true' \r\n                aria-expanded = 'false'\r\n            />\r\n            <div className='dropdown-menu mb-3 px-2 py-2'>\r\n                <FlexColumn>\r\n                    <LabelWithIcon \r\n                        icon = { faCaretSquareUp }\r\n                        labelText = 'Superior'\r\n                        onClick = { e => rotateCamera(TOP_VIEW) }\r\n                        className = 'cursor-click dropdown-item'\r\n                    />\r\n                    <LabelWithIcon \r\n                        icon = { faWindowMaximize }\r\n                        labelText = 'Frente'\r\n                        onClick = { e => rotateCamera(FRONT_VIEW) }\r\n                        className = 'cursor-click dropdown-item'\r\n                    />\r\n                    <LabelWithIcon \r\n                        icon = { faWindowRestore }\r\n                        labelText = 'Atras'\r\n                        onClick = { e => rotateCamera(BACK_VIEW) }\r\n                        className = 'cursor-click dropdown-item'\r\n                    />\r\n                    <LabelWithIcon \r\n                        icon = { faCaretSquareRight }\r\n                        labelText = 'Derecha'\r\n                        onClick = { e => rotateCamera(FRONT_RIGHT) }\r\n                        className = 'cursor-click dropdown-item'\r\n                    />\r\n                    <LabelWithIcon \r\n                        icon = { faCaretSquareLeft }\r\n                        labelText = 'Izquierda'\r\n                        onClick = { e => rotateCamera(FRONT_LEFT) }\r\n                        className = 'cursor-click dropdown-item'\r\n                    />\r\n                    <LabelWithIcon \r\n                        icon = { faCube }\r\n                        labelText = 'Isométrico'\r\n                        onClick = { e => rotateCamera(ISOMETRIC_VIEW) }\r\n                        className = 'cursor-click dropdown-item'\r\n                    />\r\n\r\n                </FlexColumn>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CameraPositionMenu;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n//Components\r\nimport FlexRow from '../../../../../../Layout/Flex/FlexRow';\r\nimport PlaneSettings from './PlaneSettings/PlaneSettings';\r\nimport ButtonWithIcon from '../../../../../../Layout/Buttons/ButtonWithIcon';\r\nimport CameraPositionMenu from './CameraPositionMenu';\r\n//HOC\r\nimport withProjectState from '../../../../../../../redux/HOC/withProjectState';\r\nimport withEditorState from '../../../../../../../redux/HOC/withEditorState';\r\n//Icons\r\nimport { faArrowsAlt, faLock, faLockOpen } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n\r\n\r\nconst PlaneActions = props => {\r\n    //PROPS\r\n    let {\r\n        //From editor state HOC\r\n        editorState, \r\n        setEditorWidth, \r\n        setEditorHeight, \r\n        //From parent component\r\n        rotateCamera, \r\n        addTextureToPlane, \r\n        toggleOrbitControls, \r\n        orbitControlsEnabled, \r\n    } = props;\r\n\r\n    //Object destructuring\r\n    const { editorHeight, editorWidth } = editorState;\r\n    \r\n    /**\r\n     * Method that changes the plane texture based on the desired one\r\n     * @param {object} event \r\n     */\r\n    const handleTextureChange = event => {\r\n        let { checked, value } = event.target;\r\n        if(checked)\r\n            addTextureToPlane(value);\r\n    }\r\n    \r\n    return(\r\n        <FlexRow\r\n            className = 'justify-content-start align-items-center'\r\n        >  \r\n            <CameraPositionMenu \r\n                rotateCamera = { rotateCamera }\r\n            />\r\n            <PlaneSettings \r\n                editorWidth = { editorWidth }\r\n                editorHeight = { editorHeight }\r\n                setEditorWidth = { setEditorWidth }\r\n                setEditorHeight = { setEditorHeight }\r\n                handleTextureChange = { handleTextureChange }\r\n            />\r\n            <ButtonWithIcon \r\n                icon = { orbitControlsEnabled ? faLock : faLockOpen }\r\n                title = 'Bloquear/desbloquear plano'\r\n                type = { orbitControlsEnabled ?  'outline-secondary' : 'secondary' }\r\n                onClick = { toggleOrbitControls }\r\n                className = 'btn-sm rounded-pill px-3 py-2 mr-2'\r\n                buttonText = {\r\n                    <FontAwesomeIcon \r\n                        icon = { faArrowsAlt }\r\n                    />\r\n                }\r\n                data-toggle = 'tooltip' \r\n                data-placement = 'top' \r\n            />    \r\n        </FlexRow>\r\n    );\r\n}\r\n\r\n//We apply the project state HOC\r\nlet WithProjectState = withProjectState(PlaneActions);\r\n//We apply the editor state decorator \r\nlet WithEditorState = withEditorState(WithProjectState);\r\n//We return the decorated component\r\nexport default WithEditorState;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n//Components\r\nimport FlexRow from '../../../../../Layout/Flex/FlexRow';\r\nimport ModelsLibrary from './ModelsLibrary/ModelsLibrary';\r\nimport FixedWidthContainer from '../../../../../Layout/Containers/FixedWidthContainer';\r\nimport PlaneActions from './PlaneActions/PlaneActions';\r\n\r\nconst EditorActions = ({ models, addModel, rotateCamera, addTextureToPlane, toggleOrbitControls, orbitControlsEnabled }) => (\r\n    <FlexRow\r\n        className = 'justify-content-around align-items-center'\r\n    >\r\n        <FixedWidthContainer\r\n            width = { 75 }\r\n            className = 'overflow-auto h-100'\r\n        >\r\n            <ModelsLibrary \r\n                models = { models }\r\n                addModel = { addModel }\r\n            />\r\n        </FixedWidthContainer>\r\n        <FixedWidthContainer\r\n            width = { 25 }\r\n        >\r\n            <PlaneActions \r\n                rotateCamera = { rotateCamera }\r\n                addTextureToPlane = { addTextureToPlane }\r\n                toggleOrbitControls = { toggleOrbitControls }\r\n                orbitControlsEnabled = { orbitControlsEnabled }\r\n            />\r\n        </FixedWidthContainer>\r\n\r\n    </FlexRow>\r\n);\r\n\r\nexport default EditorActions;","import React from 'react';\r\n//Components\r\nimport FixedHeightContainer from '../../../Layout/Containers/FixedHeightContainer';\r\n\r\nconst RendererContainer = () => (\r\n    <FixedHeightContainer\r\n        id = 'tridimensional_renderer'\r\n        height = { 100 }\r\n    />\r\n);\r\n\r\nexport default RendererContainer;","import React from 'react';\r\n//Components\r\nimport EditorActions from './EditorActions/EditorActions';\r\nimport RendererContainer from '../RendererContainer';\r\nimport FixedHeightContainer from '../../../../Layout/Containers/FixedHeightContainer';\r\n//HOC\r\nimport with3DRenderer from '../../../../Renderer/3D/HOC/with3DRenderer';\r\n\r\n\r\nconst Editor = ({ models, addModel, rotateCamera, addTextureToPlane, toggleOrbitControls, orbitControlsEnabled }) => {\r\n    return(\r\n        <FixedHeightContainer\r\n            height = { 100 }\r\n        >\r\n            \r\n            <FixedHeightContainer\r\n                height = { 90 }\r\n            >\r\n                <RendererContainer />\r\n            </FixedHeightContainer>\r\n            <FixedHeightContainer\r\n                height = { 10 }\r\n            >\r\n                <EditorActions\r\n                    models = { models } \r\n                    addModel = { addModel }\r\n                    rotateCamera = { rotateCamera }\r\n                    addTextureToPlane = { addTextureToPlane }\r\n                    toggleOrbitControls = { toggleOrbitControls }\r\n                    orbitControlsEnabled = { orbitControlsEnabled }\r\n                />\r\n                \r\n            </FixedHeightContainer>\r\n        </FixedHeightContainer>\r\n    );\r\n}\r\n\r\nexport default with3DRenderer(Editor);\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\n//Classes\r\nimport TridimensionalRenderer from '../../../../classes/Renderers/TridimensionalRenderer';\r\n//Factories\r\nimport TextureFactory from '../../../../classes/3D/Models/TextureFactory';\r\nimport CameraRotationFactory from '../../../../classes/3D/Camera/CameraRotationFactory';\r\n//Functions\r\nimport { getModelUri } from '../../../../constants/models/models';\r\nimport withProjectState from '../../../../redux/HOC/withProjectState';\r\n\r\n\r\nconst with3DRenderer = (WrappedComponent) => {\r\n\r\n    const With3DRenderer = ({ project, addObject, updateObject, removeObject, set2DSceneDimensions, set3DSceneDimensions, ...extraProps}) => {\r\n        //PROPS\r\n        //Destructuring\r\n        const { objects: projectObjects } = project;\r\n\r\n        //HOOKS\r\n        //State\r\n        const [models, setModels] = useState({});\r\n        const [sceneInstance, setSceneInstance] = useState();\r\n        const [draggedObject, setDraggedObject] = useState();\r\n        const [orbitControlsEnabled, setOrbitControlsEnabled] = useState(true);\r\n\r\n        //Effects\r\n        useEffect(() => {\r\n            let sceneInstance = new TridimensionalRenderer();\r\n            sceneInstance.init();\r\n            sceneInstance.setDragEndCallback(updateModel);\r\n            setSceneInstance(sceneInstance);\r\n            //We set the container dimensions\r\n            const { sceneWidth, sceneHeight } = sceneInstance;\r\n            set3DSceneDimensions(sceneWidth, sceneHeight);\r\n            //If not set already, we set the 2D editor dimensions (the whole dom container dimensions)\r\n            if(!project.scene || !project.scene['2d']){\r\n                let editorContainer = document.getElementById(TridimensionalRenderer.DOM_CONTAINER_ID);\r\n                set2DSceneDimensions(editorContainer.clientWidth, editorContainer.clientHeight);\r\n            }\r\n            /**\r\n             * This method restores the existing objects in the plane\r\n             */\r\n            const restoreModels = () => {\r\n                //We retrieve the existing models in state\r\n                let modelsCopy = { ...models };\r\n                //We iterate over the existing models and create the 2d model\r\n                projectObjects.forEach(model => {\r\n                    //We get the type and the coordinates (of the 2d key)\r\n                    const { type } = model;\r\n                    const { coordinates } = model['3d'];\r\n                    //We update the model quantity\r\n                    modelsCopy[type] ? modelsCopy[type].quantity++ : modelsCopy[type] = { quantity: 1 };\r\n                    //We create the 3D model\r\n                    sceneInstance.load3DModel(\r\n                        type,\r\n                        coordinates,\r\n                        createdModel => { //onSuccess callback\r\n                            const { uuid } = createdModel;\r\n                            let modelWithUpdatedId = {\r\n                                ...model,\r\n                                '3d': {\r\n                                    uuid: uuid,\r\n                                    coordinates,\r\n                                }\r\n                            };\r\n                            updateObject(modelWithUpdatedId) \r\n                        },\r\n                        updateModel //updateCallback\r\n                    );\r\n                });\r\n                setModels(modelsCopy);\r\n            }\r\n            restoreModels();\r\n        }, []);\r\n\r\n        useEffect(() => {\r\n            if(!draggedObject)\r\n                return;\r\n            const { uuid, x, y, z } = draggedObject;\r\n            let existingObject = findObjectBy3DModelId(uuid);\r\n            if(!existingObject){\r\n                console.log('Objeto no encontrado')\r\n                return;\r\n            }\r\n            let bidimensionalEditorState = { ...existingObject['2d'] };\r\n            let updatedObject = {\r\n                ...existingObject,\r\n                '2d': {\r\n                    ...bidimensionalEditorState,\r\n                    coordinates: get2DCoordinates(x, z)\r\n                },\r\n                '3d': {\r\n                    uuid: uuid,\r\n                    coordinates: { x, y: 0, z }\r\n                }\r\n            }\r\n            updateObject(updatedObject);\r\n            \r\n        }, [draggedObject]);\r\n\r\n        useEffect(() => {\r\n            if(sceneInstance){\r\n                sceneInstance.setOrbitControlsEnabled(orbitControlsEnabled);\r\n            }\r\n        }, [orbitControlsEnabled]);\r\n\r\n        /**\r\n         * Success callback for the load3DModel method, in this callback we add the created object at project´s level, \r\n         * generating the id and 3d keys, which will contain the id´s and coordinates of the object in the current\r\n         * project.\r\n         * @param {object} createdModel \r\n         */\r\n        const onCreationSuccess = (createdModel, type) => {\r\n            //We get the id, type and the coordinates of the created model\r\n            const { uuid, position: { x, y, z } } = createdModel;\r\n            //We generate an object with all the properties needed to keep it in the state\r\n            let objectToAdd = {\r\n                id: projectObjects.length,\r\n                type,\r\n                '2d': {\r\n                    uuid: '', //We don´t know the id for the 3D model, it will be generated and updated on render time\r\n                    coordinates: get2DCoordinates(x, z)\r\n                },\r\n                '3d': {\r\n                    uuid: uuid, //THREE.js generated ID \r\n                    coordinates: { x, y: 0, z }\r\n                }\r\n            }\r\n            //We add the object at project´s level\r\n            addObject(objectToAdd);\r\n        }\r\n        const addModel = type => {\r\n            increaseModelQuantity(type);\r\n            sceneInstance.load3DModel(type, {x: 0, y: 0, z: 0}, model => onCreationSuccess(model, type));\r\n        }\r\n\r\n        const updateModel = event => {\r\n            //We get the position and the id of the object\r\n            const { object: { position: { x, y, z }, uuid } } = event;\r\n            setDraggedObject({ x, y, z, uuid });\r\n        }\r\n\r\n        /**\r\n         * This method return the complete object based on it´s 3d model id\r\n         * @param {string} id2DModel \r\n         */\r\n        const findObjectBy3DModelId = id3DModel => projectObjects.find(object => object['3d'].uuid === id3DModel);\r\n\r\n        const calculateOriginCoordinates = (x, y) => {\r\n            let { sceneWidth, sceneHeight } = { ...project.scene['2d'] };\r\n            let planeCenterX = sceneWidth / 2;\r\n            let planeCenterY = sceneHeight / 2;\r\n            return {\r\n                x: planeCenterX - x,\r\n                y: planeCenterY - y\r\n            }\r\n        }\r\n\r\n        const get2DCoordinates = (x, z) => {\r\n            const { scene } = project;\r\n            //We get the dimensions of each scene\r\n            let { sceneWidth: bidimensionalSceneWidth, sceneHeight: bidimensionalSceneHeight } = { ...scene['2d'] };\r\n            let { sceneWidth: tridimensionalSceneWidth, sceneHeight: tridimensionalSceneHeight } = { ...scene['3d'] };\r\n            //We get the ratio between the two scenes dimensions\r\n            let xRatio = bidimensionalSceneWidth / tridimensionalSceneWidth;\r\n            let yRatio = bidimensionalSceneHeight / tridimensionalSceneHeight;\r\n            //Remembering that z (depth) in 3D editor is y in 2D editor (TOP_VIEW), and that they are inverted\r\n            return calculateOriginCoordinates(-1 * x * xRatio, -1 * z * yRatio);\r\n        }\r\n\r\n        const toggleOrbitControls = () => {\r\n            setOrbitControlsEnabled(!orbitControlsEnabled);\r\n        }\r\n\r\n        const increaseModelQuantity = type => {\r\n            let modelsCopy = { ...models };\r\n            modelsCopy[type] ? modelsCopy[type].quantity++ : modelsCopy[type] = { quantity: 1 };\r\n            setModels(modelsCopy);\r\n        }\r\n\r\n        const addTextureToObject = (object, textureUri) => sceneInstance.addTextureToObject(object, textureUri);\r\n\r\n        const addTextureToPlane = texture => {\r\n            let textureUri = TextureFactory.getTextureUri(texture);\r\n            sceneInstance.addTextureToObject(sceneInstance.plane, textureUri);\r\n        }\r\n\r\n        const rotateCamera = (view = CameraRotationFactory.TOP_VIEW) => {\r\n            let cameraDistance = sceneInstance.getOptimalCameraDistance();\r\n            //We get the available views\r\n            let cameraPositionVector = CameraRotationFactory.createCameraRotationVector(view, cameraDistance);\r\n            sceneInstance.camera.position.copy(cameraPositionVector);\r\n        }\r\n        \r\n\r\n\r\n        return <WrappedComponent\r\n            models = { models }\r\n            addModel = { addModel }\r\n            rotateCamera = { rotateCamera }\r\n            addTextureToPlane = { addTextureToPlane }\r\n            addTextureToObject = { addTextureToObject }\r\n            toggleOrbitControls = { toggleOrbitControls }\r\n            orbitControlsEnabled = { orbitControlsEnabled }\r\n            { ...extraProps }\r\n        />\r\n    }\r\n\r\n    //We apply the project state HOC\r\n    let WithProjectState = withProjectState(With3DRenderer);\r\n    //We return the decorated component\r\n    return WithProjectState;\r\n}\r\n\r\nexport default with3DRenderer;","import { FURNITURE, TABLE } from \"../../../constants/models/models\";\r\n\r\nconst models = [\r\n    {\r\n        model_id: FURNITURE,\r\n        name: 'Entrepaños',\r\n        description: 'Conjunto de entrepaños de distintos tamaños y con múltiples cajones.',\r\n    },\r\n    {\r\n        model_id: TABLE,\r\n        name: 'Mesa',\r\n        description: 'Mesa de madera de 1m x 1m.'\r\n    }\r\n]\r\n\r\nexport default models;","import React, { useState, useEffect } from 'react';\r\n//Components\r\nimport Flex from '../../Layout/Flex/Flex';\r\n//Data\r\nimport data from '../Data/data';\r\nimport ModelThumbnail from '../../Editor/3D/Layout/Editor/EditorActions/ModelThumbnail';\r\nimport ButtonWithIcon from '../../Layout/Buttons/ButtonWithIcon';\r\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\r\n//Styles\r\nimport './ModelsLibrary.css';\r\nimport withProjectState from '../../../redux/HOC/withProjectState';\r\n\r\nconst ModelsLibrary = ({ project, addObject }) => {\r\n    //PROPS\r\n    //Destructuring\r\n    const { objects: projectObjects } = project;\r\n\r\n    //HOOKS\r\n    //State\r\n    const [models, setModels] = useState({});\r\n\r\n    //Effects\r\n    useEffect(() => {\r\n        let modelsCopy = { ...models };\r\n        projectObjects.forEach(model => {\r\n            const { type } = model;\r\n            modelsCopy[type] ? modelsCopy[type].quantity++ : modelsCopy[type] = { quantity: 1 };\r\n        });\r\n        setModels(modelsCopy);\r\n    }, [])\r\n    //Methods\r\n    const addObjectToProject = type => {\r\n        let objectToAdd = {\r\n            id: projectObjects.length,\r\n            type,\r\n            '2d': {\r\n                uuid: '', //We don´t know the id for the 2D model, it will be generated and updated on render time\r\n                coordinates: { x: 0, y: 0 }\r\n            },\r\n            '3d': {\r\n                uuid: '', //We don´t know the id for the 3D model, it will be generated and updated on render time\r\n                coordinates: { x: 0, y: 0, z: 0 }\r\n            }\r\n        }\r\n        addObject(objectToAdd);\r\n        let modelsCopy = { ...models };\r\n        modelsCopy[type] ? modelsCopy[type].quantity++ : modelsCopy[type] = { quantity: 1 };\r\n        setModels(modelsCopy)\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Flex\r\n            className = 'justify-content-around align-items-between flex-wrap'\r\n        >\r\n            {\r\n                data.map(item => (\r\n                    <div\r\n                        className = 'card rounded-lg border-muted catalog-tile mt-3'\r\n                    >\r\n                        <div className='card-body px-2 py-2'>\r\n                            <table className='table table-sm table-borderless'>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th colSpan='2'>\r\n                                            <ModelThumbnail \r\n                                                model = { item.model_id }\r\n                                                title = { item.name }\r\n                                                className = 'mr-3 mt-3'\r\n                                                modelQuantity = { models[item.model_id] ? models[item.model_id].quantity : 0}\r\n                                                imageClassName = 'catalog-thumbnail'\r\n                                            />\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th>Nombre</th>\r\n                                        <td>{ item.name }</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <th>Descripción</th>\r\n                                        <td>{ item.description }</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <th colSpan='2'>\r\n                                            <ButtonWithIcon \r\n                                                id = { item.model_id }\r\n                                                icon = { faPlusCircle }\r\n                                                onClick = { event => addObjectToProject(item.model_id) }\r\n                                                className = 'btn btn-primary rounded-lg shadow'\r\n                                                buttonText = 'Agregar'\r\n                                            />\r\n                                        </th>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                ))\r\n            }\r\n\r\n        </Flex>\r\n    )\r\n}\r\n\r\nlet WithProjectState = withProjectState(ModelsLibrary);\r\n\r\nexport default WithProjectState;","import React, { Fragment } from 'react';\r\nimport LabelWithIcon from '../Layout/Labels/LabelWithIcon';\r\nimport { faBook } from '@fortawesome/free-solid-svg-icons';\r\nimport ModelsLibrary from './ModelsLibrary/ModelsLibrary';\r\n\r\nconst Catalog = () => (\r\n    <div className='container mt-3 text-center'>\r\n        <LabelWithIcon \r\n            icon = { faBook }\r\n            className = 'text-muted h4'\r\n            labelText = 'Catálogo de productos'\r\n        />\r\n        <ModelsLibrary \r\n            models = {{}}\r\n        />\r\n    </div>\r\n);\r\n\r\nexport default Catalog;\r\n\r\n","import React from 'react';\r\n//Components\r\nimport ProjectSettings from '../../components/ProjectSettings/ProjectSettings';\r\nimport BidimensionalEditor from '../../components/Editor/2D/Editor/Editor';\r\nimport TridimensionalEditor from '../../components/Editor/3D/Layout/Editor/Editor';\r\nimport Catalog from '../../components/Catalog/Catalog';\r\n\r\n\r\n//Sections\r\nexport const CATALOG                = 'CATALOG';    \r\nexport const PROJECT_SETTINGS       = 'PROJECT_SETTINGS';\r\nexport const BIDIMENSIONAL_EDITOR   = 'BIDIMENSIONAL EDITOR';\r\nexport const TRIDIMENSIONAL_EDITOR  = 'TRIDIMENSIONAL_EDITOR';\r\n\r\n\r\nexport const SectionComponentToRender = {\r\n    [CATALOG]: <Catalog />,\r\n    [PROJECT_SETTINGS]: <ProjectSettings />,\r\n    [BIDIMENSIONAL_EDITOR]: <BidimensionalEditor />,\r\n    [TRIDIMENSIONAL_EDITOR]: <TridimensionalEditor />,\r\n}","import React from 'react';\r\n//Components\r\nimport FlexColumn from '../../Flex/FlexColumn';\r\nimport LabelWithIcon from '../../Labels/LabelWithIcon';\r\n//HOC\r\nimport withEditorState from '../../../../redux/HOC/withEditorState';\r\n//Icons\r\nimport { faToolbox, faObjectGroup, faCube, faCog } from '@fortawesome/free-solid-svg-icons';\r\n//Constants\r\nimport { CATALOG, TRIDIMENSIONAL_EDITOR, BIDIMENSIONAL_EDITOR, PROJECT_SETTINGS } from '../../../../constants/sections/sections';\r\n\r\n\r\nconst EditorActions = ({ setEditorType }) => {\r\n    return(\r\n        <FlexColumn\r\n            className = 'align-items-center justify-content-around'\r\n        >\r\n            <LabelWithIcon \r\n                icon = { faToolbox }\r\n                title = 'Catálogo'\r\n                onClick = { event => setEditorType(CATALOG) }\r\n                className = 'text-sidebar-icon cursor-click mb-3'\r\n                data-toggle = 'tooltip' \r\n                data-placement = 'right' \r\n                \r\n            />\r\n            <LabelWithIcon \r\n                icon = { faCube }\r\n                title = '3D'\r\n                onClick = { event => setEditorType(TRIDIMENSIONAL_EDITOR) }\r\n                className = 'text-sidebar-icon cursor-click mb-3'\r\n                data-toggle = 'tooltip' \r\n                data-placement = 'right' \r\n            />\r\n            <LabelWithIcon \r\n                icon = { faObjectGroup }\r\n                title = '2D'\r\n                onClick = { event => setEditorType(BIDIMENSIONAL_EDITOR) }\r\n                className = 'text-sidebar-icon cursor-click mb-3'\r\n                data-toggle = 'tooltip' \r\n                data-placement = 'right' \r\n            />\r\n            <LabelWithIcon \r\n                icon = { faCog }\r\n                title = 'Ajustes del proyecto'\r\n                onClick = { event => setEditorType(PROJECT_SETTINGS) }\r\n                className = 'text-sidebar-icon cursor-click'\r\n                data-toggle = 'tooltip' \r\n                data-placement = 'right' \r\n            />\r\n\r\n        </FlexColumn>\r\n    );\r\n}\r\n\r\n//We apply the editor state HOC to get access to the setEditorType method\r\nlet WithEditorState = withEditorState(EditorActions);\r\n//We export the decorated component\r\nexport default WithEditorState;","import React from 'react';\r\n//Components\r\nimport FlexColumn from '../../Flex/FlexColumn';\r\nimport LabelWithIcon from '../../Labels/LabelWithIcon';\r\n//Icons\r\nimport { faSave, faDownload, faFolderOpen,} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst ProjectActions = ({ className }) => {\r\n    return(\r\n        <FlexColumn\r\n            className = {`align-items-center justify-content-around ${className || ''}`}\r\n        >\r\n            <LabelWithIcon \r\n                icon = { faSave }\r\n                title = 'Guardar'\r\n                className = 'text-sidebar-icon cursor-click mb-3'\r\n                data-toggle = 'tooltip' \r\n                data-placement = 'right' \r\n            />\r\n            <LabelWithIcon \r\n                icon = { faFolderOpen }\r\n                title = 'Abrir'\r\n                className = 'text-sidebar-icon cursor-click mb-3'\r\n                data-toggle = 'tooltip' \r\n                data-placement = 'right' \r\n            />\r\n            <LabelWithIcon \r\n                icon = { faDownload }\r\n                title = 'Descargar'\r\n                className = 'text-sidebar-icon cursor-click mb-3'\r\n                data-toggle = 'tooltip' \r\n                data-placement = 'right' \r\n            />\r\n        </FlexColumn>\r\n    );\r\n}\r\n\r\nexport default ProjectActions;","import React from 'react';\r\n//Components\r\nimport FlexColumn from '../Flex/FlexColumn';\r\nimport EditorActions from './Sections/EditorActions';\r\nimport ProjectActions from './Sections/ProjectActions';\r\n//Styles\r\nimport './Sidebar.css';\r\nimport FixedWidthContainer from '../Containers/FixedWidthContainer';\r\nimport FixedHeightContainer from '../Containers/FixedHeightContainer';\r\n\r\nconst Sidebar = () => {\r\n    \r\n    return(\r\n        <FixedWidthContainer\r\n            width = { 5 }\r\n            className = 'position-relative'\r\n        >\r\n            <FixedHeightContainer\r\n                height = { 100 }\r\n                className = 'sidebar-width position-fixed bg-dark pt-4'\r\n            >\r\n                <FlexColumn\r\n                    className = 'align-items-center justify-content-start'\r\n                >\r\n                    <ProjectActions \r\n                        className = 'my-4'\r\n                    />\r\n                    <EditorActions />\r\n                </FlexColumn>\r\n            </FixedHeightContainer>\r\n        </FixedWidthContainer>\r\n    );\r\n}\r\n\r\nexport default Sidebar;","import React, { Fragment, useState, useEffect } from 'react';\r\nimport $ from 'jquery';\r\n//Components\r\n//3D editor\r\n//import Editor from './components/Editor/3D/Layout/Editor/Editor';\r\n//2d editor\r\nimport Editor from './components/Editor/2D/Editor/Editor';\r\nimport FlexRow from './components/Layout/Flex/FlexRow';\r\nimport SideBar from './components/Layout/Sidebar/Sidebar';\r\nimport FixedWidthContainer from './components/Layout/Containers/FixedWidthContainer';\r\nimport withEditorState from './redux/HOC/withEditorState';\r\n//Constants\r\nimport { SectionComponentToRender } from './constants/sections/sections';\r\n\r\n\r\nconst App = ({ editorState }) => {\r\n    const { editorType } = editorState;\r\n    //HOOKS\r\n\r\n    useEffect(() => {\r\n        //We enable tooltips\r\n        $(() => $('[data-toggle=\"tooltip\"]').tooltip());\r\n    }, [])\r\n\r\n    return (\r\n        <Fragment>\r\n            <FlexRow\r\n                className = 'w-100 h-100'\r\n            >\r\n                <SideBar />\r\n                <FixedWidthContainer\r\n                    width = { 95 }\r\n                >\r\n                    { SectionComponentToRender[editorType] }\r\n                </FixedWidthContainer>\r\n            </FlexRow>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\n//We apply the editor state HOC\r\nlet WithEditorState = withEditorState(App);\r\n//We export the decorated component\r\nexport default WithEditorState;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n//Redux store\r\nimport generateStore from './redux/store';\r\n//Components\r\nimport App from './App';\r\n//Styles\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n//Libraries\r\nimport 'bootstrap/dist/js/bootstrap.bundle';\r\n//Service worker\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nlet store = generateStore();\r\n\r\nlet WithStore = <Provider store = { store }><App /></Provider>\r\n\r\nReactDOM.render(WithStore, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}