{"version":3,"sources":["redux/reducers/editorDuck.js","classes/Helpers/Requests.js","classes/ProjectConfiguration.js","redux/reducers/projectDuck.js","redux/reducers/objectsDuck.js","redux/store.js","components/Layout/Flex/Flex.js","components/Layout/Flex/FlexRow.js","components/Layout/Flex/FlexColumn.js","components/Layout/Labels/LabelWithIcon.js","redux/HOC/withEditorState.js","components/ProjectSettings/Details/ProjectName.js","components/Layout/Buttons/ButtonWithIcon.js","components/Layout/Grid/Row.js","components/Layout/Grid/Column.js","components/ProjectSettings/Dimensions/DimensionInput.js","components/ProjectSettings/Dimensions/DimensionsSettings.js","components/ProjectSettings/Details/ProjectDescription.js","redux/HOC/withProjectState.js","components/ProjectSettings/SaveSettingsButton.js","components/Layout/Containers/Container.js","components/ProjectSettings/Details/ProjectType.js","components/ProjectSettings/ProjectSettings.js","components/Layout/Containers/FixedHeightContainer.js","classes/2D/Plane/PlaneEvents.js","classes/2D/Room/RoomCoordinatesCalculator.js","classes/2D/Models/ModelEvents.js","classes/2D/Room/RoomBoundDetector.js","classes/2D/Models/BidimensionalModelDimensions.js","constants/models/models.js","classes/2D/Models/BidimensionalModelFactory.js","classes/Renderers/BidimensionalRenderer.js","components/Editor/2D/RendererContainer.js","classes/3D/BoxPositioning/BoundDetector.js","classes/3D/Models/ModelScaleCalculator.js","classes/3D/Plane/PlaneFactory.js","classes/Renderers/TridimensionalRenderer.js","classes/Coordinates/CoordinatesTransformation.js","components/Renderer/2D/HOC/with2DRenderer.js","components/Layout/Containers/FixedWidthContainer.js","components/Editor/3D/Layout/Editor/EditorActions/ModelThumbnail.js","components/Editor/3D/Layout/Editor/EditorActions/ModelsLibrary/ModelsLibrary.js","components/Editor/2D/Editor/EditorActions/EditorActions.js","components/Editor/2D/Editor/Editor.js","classes/3D/Models/TextureFactory.js","components/Editor/3D/Layout/Editor/EditorActions/PlaneActions/PlaneSettings/PlaneSettings.js","classes/3D/Camera/CameraRotationFactory.js","components/Editor/3D/Layout/Editor/EditorActions/PlaneActions/CameraPositionMenu.js","components/Editor/3D/Layout/Editor/EditorActions/PlaneActions/PlaneActions.js","components/Editor/3D/Layout/Editor/EditorActions/EditorActions.js","components/Editor/3D/Layout/RendererContainer.js","components/Editor/3D/Layout/Editor/Editor.js","components/Renderer/3D/HOC/with3DRenderer.js","components/Catalog/Data/data.js","components/Catalog/ModelsLibrary/ModelsLibrary.js","components/Catalog/Catalog.js","constants/sections/sections.js","components/Layout/Sidebar/Sections/EditorActions.js","components/Layout/Sidebar/Sections/ProjectActions.js","components/Layout/Sidebar/Sidebar.js","components/SectionRenderer/MainSectionRender.js","App.js","serviceWorker.js","index.js"],"names":["initialState","editorType","editorWidth","editorHeight","reducer","state","action","type","payload","setEditorTypeAction","dispatch","getState","setEditorWidthAction","width","setEditorHeightAction","height","Requests","makeRequest","endpoint","headers","onSuccess","onError","callbackArguments","fetch","then","response","status","json","data","Error","statusText","catch","error","message","split","errorCode","errorMessage","ProjectConfiguration","CLOSET_PROJECT","name","KITCHEN_PROJECT","scene","objects","description","saveProgressSuccess","successMessage","console","log","saveProgressError","setProjectNameAction","projectName","set2DRoomDimensionsAction","roomWidth","roomHeight","project","bidimensionalSceneParameters","newBidimensionalSceneParameters","set2DSceneDimensionsAction","sceneWidth","sceneHeight","set3DSceneDimensionsAction","tridimensionalSceneParameters","newTridimensionalSceneParameters","setProjectTypeAction","projectVersion","setProjectObjectsAction","projectObjects","setProjectDescriptionAction","projectDescription","addObjectToProjectAction","objectToAdd","newProjectObjects","concat","updateProjectObjectAction","updatedObject","updatedObjects","map","object","id","removeObjectFromProjectAction","objectToRemove","filter","saveProjectAction","method","body","process","fetching","rootReducer","combineReducers","editor","editorReducer","projectReducer","objectsReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","generateStore","createStore","applyMiddleware","thunk","Flex","children","className","extraProps","FlexRow","FlexColumn","LabelWithIcon","icon","onClick","labelText","withEditorState","WrappedComponent","connect","ownProps","props","editorState","setEditorType","setEditorWidth","setEditorHeight","ProjectName","handleSettingChange","faAsterisk","value","onChange","placeholder","ButtonWithIcon","buttonText","Row","Column","fixedSize","smBreakpoint","mdBreakpoint","lgBreakpoint","xlBreakpoint","breakPointString","getColumnClassName","DimensionInput","handleInputChange","defaultValue","DimensionsSettings","projectEditorWidth","projectEditorHeight","faArrowsAltH","faArrowsAltV","ProjectDescription","faAlignJustify","rows","withProjectState","addObject","updateObject","removeObject","setProjectName","setProjectType","setProjectObjects","set2DRoomDimensions","set2DSceneDimensions","set3DSceneDimensions","setProjectDescription","SaveSettingsButton","unsavedChanges","fieldsValidated","saveProjectChanges","faSave","disabled","Container","ProjectType","projectType","faQuestion","WithProjectState","useState","setUnsavedChanges","setFieldsValidated","projectSettings","setProjectSettings","useEffect","event","target","Number","faCogs","faCrop","preventDefault","WithEditorState","FixedHeightContainer","PlaneEvents","addPlaneZoomEventListener","stage","on","evt","oldScale","scaleX","pointer","getPointerPosition","mousePointTo","x","y","newScale","deltaY","scale","newPosition","position","batchDraw","RoomCoordinatesCalculator","containerWidth","containerHeight","this","initialX","finalX","initialY","finalY","widthInPixels","heightInPixels","PLANE_PADDING","requiredClientHeight","requiredClientWidth","setScale","setRoomDimensionsInPixels","ModelEvents","DRAG_END_EVENT","RIGHT_CLICK_EVENT","addEventListener","model","eventType","eventCallback","addRightClickListener","addDragEndListener","addModelBasicEventListeners","onUpdate","onSelection","RoomBoundDetector","boundDetection","roomDimensionInPixels","widthPadding","heightPadding","objectWidthOffset","objectHeightOffset","BidimensionalModelDimensions","calculate","modelWidth","modelHeight","TABLE","models","uri","thumbnail","models2D","getDimensions","depth","getModelThumbnail","BidimensionalModelFactory","createModel","attributes","path","view","getModel2DUri","Konva","Image","fromURL","imageNode","setAttrs","offsetX","offsetY","draggable","dragBoundFunc","layer","add","BidimensionalRenderer","DEFAULT_WIDTH","DEFAULT_HEIGHT","enablePlaneControls","domContainer","document","getElementById","DOM_CONTAINER_ID","clientWidth","clientHeight","containerAspectRatio","render","bind","setInitialStage","setInitialLayer","setPlane","addZoomEventToStage","Stage","container","Layer","addLayerToStage","draw","planeCenterCoordinates","plane","Rect","fill","stroke","opacity","strokeWidth","setPlaneCenter","drawGrid","drawRoom","numberOfRows","numberOfCols","drawLinesInAxis","numberOfLines","size","gridSize","Array","from","Math","round","forEach","row","index","roomCoordinatesCalculator","roomCoordinates","getRoomDimensionsInPixels","requestAnimationFrame","BIDIMENSIONAL_SCENE","RendererContainer","BoundDetector","initialYPosition","planeWidth","planeHeight","scaleInX","scaleInZ","positionX","positionZ","maxPointInX","maxPointInZ","minPointInX","minPointInZ","z","geometry","boundingBox","max","min","setObjectPositionX","setObjectPositionY","setObjectPositionZ","setParametersFromObject","planeBorderX","planeBorderZ","itemSizeInXAxis","itemSizeInZAxis","borderXLocation","abs","borderZLocation","newPositionInX","sign","newPositionInZ","ModelScaleCalculator","modelDepth","setAttributesFromModel","maximumBoundingBoxPoint","minimumBoundingBoxPoint","maximumPointInX","maximumPointInY","maximumPointInZ","minimumPointInX","minimumPointInY","minimumPointInZ","calculateScale","PlaneFactory","DEFAULT_SIZE","GRID","THREE","DEFAULT_GRID","MESH_PLANE","color","rotateX","PI","material","side","TridimensionalRenderer","addTextureToObject","textureUri","isMesh","texture","load","DEFAULT_TEXTURE_URI","encoding","flipY","getOptimalCameraDistance","orbitControls","dragControls","enableOrbitControls","setInitialScene","setInitialCameraState","setInitialRenderer","addControls","addPlane","addResizeListener","addInteractionEvents","addLight","cameraDistance","camera","set","lookAt","renderer","antialias","setClearColor","setSize","appendChild","domElement","OrbitControls","DragControls","addControlsEventListeners","enabled","applyBoundDetectionAlgorithm","onDragEnd","gridPlane","create","addToScene","setContainerDimensions","aspect","updateProjectionMatrix","interaction","Interaction","update","callback","element","light","DEFAULT_LIGHT_COLOR","DEFAULT_LIGHT_INTENSITY","push","isArray","getModelUri","GLTFLoader","gltf","traverse","originalEvent","detail","scaleInY","yPosition","getObjectYInitialPosition","TRIDIMENSIONAL_SCENE","CoordinatesTransformation","setParametersFromScene","bidimensionalScene","bidimensionalRoomWidth","bidimensionalRoomHeight","bidimensionalSceneWidth","bidimensionalSceneHeight","tridimensionalScene","tridimensionalSceneWidth","tridimensionalSceneHeight","originBidimensionalPlaneCoordinates","bidimensionalToTridimensionalCoordinates","originTridimensionalPlaneCoordinates","tridimensionalToBidimensionalCoordinates","with2DRenderer","BIDIMENSIONAL","TRIDIMENSIONAL","setModels","sceneInstance","setSceneInstance","draggedObject","setDraggedObject","init","getRoomDimensionInPixels","modelsCopy","coordinates","quantity","loadSVGModel","createdModel","_id","attrs","modelWithUpdatedId","uuid","updateModel","restoreModels","existingObject","findObjectBy2DModelId","tridimensionalEditorState","get3DCoordinates","onCreationSuccess","length","id2DModel","find","increaseModelQuantity","addModel","FixedWidthContainer","ModelThumbnail","title","modelQuantity","imageClassName","data-toggle","data-placement","src","alt","ModelsLibrary","e","EditorActions","TextureFactory","WOOD_TEXTURE","FLOOR_TEXTURE","getTextureUri","textureType","PlaneSettings","handleTextureChange","faCog","aria-haspopup","aria-expanded","aria-labelledby","CameraRotationFactory","TOP_VIEW","BACK_VIEW","FRONT_VIEW","FRONT_LEFT","FRONT_RIGHT","ISOMETRIC_VIEW","createCameraRotationVector","distance","DEFAULT_CAMERA_DISTANCE","cameraPosition","setY","setZ","setX","CameraPositionMenu","rotateCamera","faCrosshairs","faCaretSquareUp","faWindowMaximize","faWindowRestore","faCaretSquareRight","faCaretSquareLeft","faCube","addTextureToPlane","toggleOrbitControls","orbitControlsEnabled","checked","faLock","faLockOpen","faArrowsAlt","with3DRenderer","setOrbitControlsEnabled","setDragEndCallback","load3DModel","getBoxBound","findObjectBy3DModelId","bidimensionalEditorState","get2DCoordinates","scaleZ","minimumX","minimumZ","maximumX","itemDepth","itemWidth","id3DModel","cameraPositionVector","copy","model_id","item","colSpan","faPlusCircle","addObjectToProject","Catalog","faBook","SectionComponentToRender","faToolbox","faObjectGroup","ProjectActions","faFolderOpen","faDownload","Sidebar","App","$","tooltip","Boolean","location","hostname","match","store","WithStore","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3d25265.chunk.js","sourcesContent":["/**\r\n * @author Damián Alanís Ramírez\r\n * @version 1.0.0\r\n */\r\n\r\n\r\n//CONSTANTS\r\n//Action types\r\nconst SET_EDITOR_TYPE   = 'SET_EDITOR_TYPE';\r\nconst SET_EDITOR_WIDTH  = 'SET_EDITOR_WIDTH';\r\nconst SET_EDITOR_HEIGHT = 'SET_EDITOR_HEIGHT';\r\n//Others\r\nconst BIDIMENSIONAL_EDITOR = 'BIDIMENSIONAL EDITOR';\r\n//Initial state\r\nconst initialState = {\r\n    editorType: BIDIMENSIONAL_EDITOR,\r\n    editorWidth: 0,\r\n    editorHeight: 0,\r\n}\r\n\r\n//REDUCER\r\nconst reducer = (state = initialState, action) => {\r\n    let { type, payload } = action;\r\n    switch(type){\r\n        case SET_EDITOR_TYPE:\r\n            return {\r\n                ...state,\r\n                editorType: payload,\r\n            };\r\n        case SET_EDITOR_WIDTH:\r\n            return {\r\n                ...state,\r\n                editorWidth: payload,\r\n            };\r\n        case SET_EDITOR_HEIGHT:\r\n            return {\r\n                ...state,\r\n                editorHeight: payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;\r\n\r\n//ACTIONS\r\n/**\r\n * This method sets editor´s type. The available options are 2D or 3D.\r\n * @param {string} editorType \r\n */\r\nexport let setEditorTypeAction = editorType => (dispatch, getState) => {\r\n    dispatch({\r\n        type: SET_EDITOR_TYPE,\r\n        payload: editorType,\r\n    });\r\n}\r\n\r\n/**\r\n * This method sets editor´s width. It must be a number representing the width in meters (assuming natural scale).\r\n * @param {number} width \r\n */\r\nexport let setEditorWidthAction = width => (dispatch, getState) => {\r\n    dispatch({\r\n        type: SET_EDITOR_WIDTH,\r\n        payload: width,\r\n    });\r\n}\r\n\r\n/**\r\n * This method sets editor´s height. It must be a number representing the height in meters (assuming natural scale).\r\n * @param {number} height \r\n */\r\nexport let setEditorHeightAction = height => (dispatch, getState) => {\r\n    dispatch({\r\n        type: SET_EDITOR_HEIGHT,\r\n        payload: height,\r\n    });\r\n}","/**\r\n * @author Damián Alanís Ramírez\r\n * @version 1.1.1\r\n */\r\n\r\nexport default class Requests {\r\n    static makeRequest = (endpoint, headers = { }, onSuccess = null, onError = null, ...callbackArguments) => {\r\n        fetch(endpoint, headers)\r\n        .then(response => {\r\n            if(response.status === 200){\r\n                response.json()\r\n                .then(data => {\r\n                    if(onSuccess && typeof(onSuccess) === 'function')\r\n                        onSuccess(data, ...callbackArguments);\r\n                });\r\n            }\r\n            throw new Error(`${response.status}|${response.statusText}`);\r\n        })\r\n        .catch(error => {\r\n            let { message } = error;\r\n            let [errorCode, errorMessage] = message.split('|');\r\n            if(onError && typeof(onError) === 'function')\r\n                onError(errorCode, errorMessage, ...callbackArguments);\r\n        })\r\n    }\r\n}","export default class ProjectConfiguration {\r\n    static CLOSET_PROJECT = 'CLOSET';\r\n    static KITCHEN_PROJECT = 'KITCHEN';\r\n    \r\n}","/**\r\n * @author Damián Alanís Ramírez\r\n * @version 1.3.2\r\n */\r\n//Classes\r\nimport Requests from \"../../classes/Helpers/Requests\";\r\nimport ProjectConfiguration from \"../../classes/ProjectConfiguration\";\r\n\r\n//CONSTANTS\r\n//Action types\r\nconst SET_PROJECT_NAME          = 'SET_PROJECT_NAME';\r\nconst SET_PROJECT_TYPE          = 'SET_PROJECT_TYPE';\r\nconst SET_PROJECT_SCENE         = 'SET_PROJECT_SCENE';\r\nconst SET_PROJECT_OBJECTS       = 'SET_PROJECT_OBJECTS';\r\nconst SET_PROJECT_DESCRIPTION   = 'SET_PROJECT_DESCRIPTION';\r\n//Initial state\r\nconst initialState = {\r\n    name: '',\r\n    type: ProjectConfiguration.KITCHEN_PROJECT,\r\n    scene: {},\r\n    objects: [],\r\n    description: '',\r\n}\r\n//Others\r\nconst BASE_ENDPOINT         = '/save_project_progress';\r\n\r\n//REDUCER\r\nconst reducer = (state = initialState, action) => {\r\n    let { type, payload } = action;\r\n    switch(type){\r\n        case SET_PROJECT_NAME:\r\n            return {\r\n                ...state,\r\n                name: payload,\r\n            };\r\n        case SET_PROJECT_TYPE:\r\n            return {\r\n                ...state,\r\n                type: payload,\r\n            };\r\n        case SET_PROJECT_SCENE:\r\n            return {\r\n                ...state,\r\n                scene: payload,\r\n            };\r\n        case SET_PROJECT_OBJECTS:\r\n            return {\r\n                ...state,\r\n                objects: payload,\r\n            };\r\n        case SET_PROJECT_DESCRIPTION:\r\n            return {\r\n                ...state,\r\n                description: payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;\r\n\r\n//Helpers\r\nconst saveProgressSuccess = successMessage => {\r\n    //Create notification with successMessage\r\n    console.log(successMessage)\r\n    \r\n}\r\n\r\nconst saveProgressError = (errorCode, errorMessage) => {\r\n    //Create notification with errorMessage\r\n    console.log(`[${errorCode}]: ${errorMessage}`)\r\n}\r\n\r\n//ACTIONS\r\n/**\r\n * This action sets the name of the project\r\n */\r\nexport let setProjectNameAction = projectName => (dispatch, getState) => {\r\n    dispatch({\r\n        type: SET_PROJECT_NAME,\r\n        payload: projectName,\r\n    });\r\n}\r\n\r\n/**\r\n * This action sets the scene of the project\r\n */\r\nexport let setProjectSceneAction = projectScene => (dispatch, getState) => {\r\n    dispatch({\r\n        type: SET_PROJECT_SCENE,\r\n        payload: projectScene,\r\n    });\r\n}\r\n\r\n/**\r\n * This action sets the dimensions of the 2d room of the project\r\n */\r\nexport let set2DRoomDimensionsAction = (roomWidth, roomHeight) => (dispatch, getState) => {\r\n    let { scene } = { ...getState().project };\r\n    let bidimensionalSceneParameters = scene['2d'];\r\n    let newBidimensionalSceneParameters = {\r\n        ...bidimensionalSceneParameters,\r\n        roomWidth,\r\n        roomHeight\r\n    };\r\n    let projectSceneParameters = {\r\n        ...scene,\r\n        '2d': newBidimensionalSceneParameters\r\n    };\r\n    dispatch({\r\n        type: SET_PROJECT_SCENE,\r\n        payload: projectSceneParameters,\r\n    });\r\n}\r\n\r\n/**\r\n * This action sets the dimensions of the 2d scene of the project\r\n */\r\nexport let set2DSceneDimensionsAction = (sceneWidth, sceneHeight) => (dispatch, getState) => {\r\n    let { scene } = { ...getState().project };\r\n    let bidimensionalSceneParameters = scene['2d'];\r\n    let newBidimensionalSceneParameters = {\r\n        ...bidimensionalSceneParameters,\r\n        sceneWidth,\r\n        sceneHeight\r\n    }\r\n    let projectSceneParameters = {\r\n        ...scene,\r\n        '2d': newBidimensionalSceneParameters\r\n    };\r\n    dispatch({\r\n        type: SET_PROJECT_SCENE,\r\n        payload: projectSceneParameters,\r\n    });\r\n}\r\n\r\n/**\r\n * This action sets the dimensions of the 3d scene of the project\r\n */\r\nexport let set3DSceneDimensionsAction = (sceneWidth, sceneHeight) => (dispatch, getState) => {\r\n    let { scene } = { ...getState().project };\r\n    let tridimensionalSceneParameters = scene['3d'];\r\n    let newTridimensionalSceneParameters = {\r\n        ...tridimensionalSceneParameters,\r\n        sceneWidth,\r\n        sceneHeight\r\n    };\r\n    let projectSceneParameters = {\r\n        ...scene,\r\n        '3d': newTridimensionalSceneParameters\r\n    };\r\n    dispatch({\r\n        type: SET_PROJECT_SCENE,\r\n        payload: projectSceneParameters,\r\n    });\r\n}\r\n\r\n/**\r\n * This action sets the type of the project\r\n */\r\nexport let setProjectTypeAction = projectVersion => (dispatch, getState) => {\r\n    dispatch({ \r\n        type: SET_PROJECT_TYPE,\r\n        payload: projectVersion,\r\n    })\r\n}\r\n\r\n/**\r\n * This action sets project´s objects\r\n */\r\nexport let setProjectObjectsAction = projectObjects => (dispatch, getState) => {\r\n    dispatch({\r\n        type: SET_PROJECT_OBJECTS,\r\n        payload: projectObjects,\r\n    });\r\n}\r\n\r\n/**\r\n * This action sets project´s description\r\n */\r\nexport let setProjectDescriptionAction = projectDescription => (dispatch, getState) => {\r\n    dispatch({\r\n        type: SET_PROJECT_DESCRIPTION,\r\n        payload: projectDescription,\r\n    });\r\n}\r\n\r\n/**\r\n * This action adds a new object to the objects array\r\n */\r\nexport let addObjectToProjectAction = objectToAdd => (dispatch, getState) => {\r\n    let { objects } = { ...getState().project };\r\n    let newProjectObjects = objects.concat(objectToAdd);\r\n    setProjectObjectsAction(newProjectObjects)(dispatch, getState);\r\n}\r\n\r\n/**\r\n * This action updates the project objects by replacing the given updated object in the existing objects array\r\n * @param {object} updatedObject \r\n */\r\nexport let updateProjectObjectAction = updatedObject => (dispatch, getState) => {\r\n    let { objects } = { ...getState().project };\r\n    //We update the objects by replacing the updatedObject in the existing objects array\r\n    let updatedObjects = objects.map(object => {\r\n        if(object.id === updatedObject.id)\r\n            return updatedObject;\r\n        return object;\r\n    });\r\n    setProjectObjectsAction(updatedObjects)(dispatch, getState);\r\n}\r\n\r\n/**\r\n * This action removes a new object from the objects array\r\n */\r\nexport let removeObjectFromProjectAction = objectToRemove => (dispatch, getState) => {\r\n    let { objects } = { ...getState().project };\r\n    let newProjectObjects = objects.filter(object => object.id != objectToRemove.id);\r\n    setProjectObjectsAction(newProjectObjects)(dispatch, getState);\r\n}\r\n\r\n/**\r\n * This action restores the project state based on the received project store (which may come serialized in JSON string)\r\n * @param {string|object} existingProject \r\n */\r\nexport let restoreProjectAction = existingProject => (dispatch, getState) => {\r\n    //We transform the project data to an object if it comes serialized\r\n    if(typeof(existingProject) === 'string')\r\n        existingProject = JSON.parse(existingProject);\r\n    //We get the data from the object\r\n    let { projectData } = existingProject;\r\n    //We get the project properties\r\n    let { name, type, objects } = projectData;\r\n    setProjectNameAction(name)(dispatch, getState);\r\n    setProjectTypeAction(type)(dispatch, getState);\r\n    setProjectObjectsAction(objects)(dispatch, getState);\r\n}\r\n\r\nexport let saveProjectAction = () => (dispatch, getState) => {\r\n    let { project } = { ...getState() };\r\n    let headers = {\r\n        method: 'POST',\r\n        body: project\r\n    }\r\n    Requests.makeRequest(\r\n        BASE_ENDPOINT, \r\n        headers, \r\n        saveProgressSuccess, \r\n        saveProgressError\r\n    );\r\n}","/**\r\n * @author Damián Alanís Ramírez\r\n * @version 1.1.0\r\n */\r\nimport Requests from '../../classes/Helpers/Requests';\r\nimport ProjectConfiguration from '../../classes/ProjectConfiguration';\r\n\r\n//CONSTANTS\r\n//Action types\r\nconst GET_OBJECTS           = 'GET_OBJECTS';\r\nconst GET_OBJECTS_ERROR     = 'GET_OBJECTS_ERROR';\r\nconst GET_OBJECTS_SUCCESS   = 'GET_OBJECTS_SUCCESS';\r\n//Others\r\nconst BASE_ENDPOINT         = `${process.env.REACT_APP_API_ENDPOINT}/familias`;\r\n//Initial state\r\nconst initialState = {\r\n    objects: [],\r\n    fetching: false,\r\n}\r\n\r\n//REDUCER\r\nconst reducer = (state = initialState, action) => {\r\n    let { type, payload } = action;\r\n    switch(type){\r\n        case GET_OBJECTS:\r\n            return {\r\n                ...state,\r\n                fetching: true,\r\n            };\r\n        case GET_OBJECTS_ERROR:\r\n            return {\r\n                ...state,\r\n                error: payload,\r\n                fetching: false,\r\n            };\r\n        case GET_OBJECTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                objects: payload,\r\n                fetching: false,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;\r\n\r\n//Helpers\r\n/**\r\n * Success callback for getObjectsAction\r\n * @param {array} data \r\n * @param {function} dispatch \r\n */\r\nconst getObjectsSuccess = (data, dispatch) => {\r\n    dispatch({\r\n        type: GET_OBJECTS_SUCCESS,\r\n        payload: data,\r\n    });\r\n}\r\n\r\n/**\r\n * Error callback for getObjectsAction\r\n * @param {number} errorCode \r\n * @param {string} errorMessage \r\n * @param {function} dispatch \r\n */\r\nconst getObjectsError = (errorCode, errorMessage, dispatch) => {\r\n    dispatch({ \r\n        type: GET_OBJECTS_ERROR,\r\n        payload: errorMessage,\r\n    });\r\n}\r\n\r\n\r\n\r\n//ACTIONS\r\n\r\n/**\r\n * This action gets objects from the designed endpoint using the requests facade\r\n */\r\nexport let getObjectsAction = () => (dispatch, getState) => {\r\n    let { project: { type } } = { ...getState() };\r\n    console.log({ type })\r\n    let familyId = (type === ProjectConfiguration.KITCHEN_PROJECT) ? 3 : 1;\r\n    let endpoint = `${BASE_ENDPOINT}/${familyId}`\r\n    //We pass dispatch as callback argument to be able to use this method in the callbacks\r\n    let callbackArguments = [dispatch];\r\n    //We dispatch the action to enable the fetching state\r\n    dispatch({\r\n        type: GET_OBJECTS,\r\n    });\r\n    //We make the request using the requests facade\r\n    Requests.makeRequest(endpoint, {},  getObjectsSuccess, getObjectsError, ...callbackArguments);\r\n}","import { compose, createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n//Reducers\r\nimport editorReducer from './reducers/editorDuck';\r\nimport projectReducer from './reducers/projectDuck';\r\nimport objectsReducer from './reducers/objectsDuck';\r\n\r\nlet rootReducer = combineReducers({\r\n    editor: editorReducer,\r\n    project: projectReducer,\r\n    objects: objectsReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n\r\nconst generateStore = () => {\r\n    let store = createStore(\r\n        rootReducer, \r\n        composeEnhancers(applyMiddleware(thunk))\r\n    );\r\n    //Restore project action\r\n    return store;\r\n}\r\n\r\nexport default generateStore;","import React from 'react';\r\n\r\nconst Flex = ({ children, className, ...extraProps }) => (\r\n    <div\r\n        className = { `d-flex ${className || ''}`}\r\n        { ...extraProps }\r\n    >\r\n    { children }\r\n    </div>\r\n);\r\n\r\nexport default Flex;","import React from 'react';\r\n//Components\r\nimport Flex from './Flex';\r\n\r\nconst FlexRow = ({ children, className, }) => (\r\n    <Flex\r\n        className = {`flex-row ${className || ''}`}\r\n    >\r\n        { children }\r\n    </Flex>\r\n);\r\n\r\nexport default FlexRow;","import React from 'react';\r\nimport Flex from './Flex';\r\n\r\nconst FlexColumn = ({ children, className, ...extraProps }) => (\r\n    <Flex\r\n        className = {`flex-column ${className || ''}`}\r\n        { ...extraProps }\r\n    >\r\n        { children }\r\n    </Flex>\r\n);\r\n\r\nexport default FlexColumn;","import React from 'react';\r\nimport FlexRow from '../Flex/FlexRow';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst LabelWithIcon = ({ id, icon, onClick, className, labelText, ...extraProps }) => (\r\n    <label\r\n        id = { id }\r\n        onClick = { onClick }\r\n        className = { className }\r\n        { ...extraProps }\r\n    >\r\n        <FlexRow\r\n            className = 'align-items-center'\r\n        >\r\n            <FontAwesomeIcon \r\n                icon = { icon }\r\n                className = 'mr-2'\r\n            />\r\n            { labelText }\r\n        </FlexRow>\r\n    </label>\r\n);\r\n\r\nexport default LabelWithIcon;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n//Redux\r\nimport { setEditorTypeAction, setEditorWidthAction, setEditorHeightAction } from '../reducers/editorDuck';\r\n\r\nconst withEditorState = WrappedComponent => {\r\n    const WithEditorState = props => {\r\n        let {\r\n            editor,\r\n            setEditorTypeAction, \r\n            setEditorWidthAction, \r\n            setEditorHeightAction,\r\n            ...ownProps\r\n        } = props;\r\n\r\n        return <WrappedComponent \r\n            editorState = { editor }\r\n            setEditorType = { setEditorTypeAction }\r\n            setEditorWidth = { setEditorWidthAction }\r\n            setEditorHeight = { setEditorHeightAction }\r\n            { ...ownProps }\r\n        />\r\n    }\r\n\r\n    const mapStateToProps = (state, ownProps) => {\r\n        return {\r\n            editor: state.editor,\r\n            ...ownProps,\r\n        }\r\n    }\r\n\r\n    let WithState = connect(\r\n        mapStateToProps, \r\n        { \r\n            setEditorTypeAction, \r\n            setEditorWidthAction, \r\n            setEditorHeightAction \r\n        }\r\n    )(WithEditorState);\r\n\r\n    return WithState;\r\n}\r\n\r\nexport default withEditorState;","import React from 'react';\r\n//Components\r\nimport LabelWithIcon from '../../Layout/Labels/LabelWithIcon';\r\n//Icons\r\nimport { faAsterisk } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst ProjectName = ({ projectName, handleSettingChange }) => (\r\n    <div className='form-group'>\r\n        <LabelWithIcon \r\n            icon = { faAsterisk }\r\n            labelText = 'Nombre del proyecto'\r\n            className = 'h6 text-muted'\r\n        />\r\n        <input \r\n            type = 'text'\r\n            name = 'projectName'\r\n            value = { projectName }\r\n            onChange = { handleSettingChange }\r\n            className = 'form-control rounded-lg'\r\n            placeholder = 'Nombre del proyecto'\r\n        />\r\n    </div>\r\n);\r\n\r\nexport default ProjectName;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport FlexRow from '../Flex/FlexRow';\r\n\r\nconst ButtonWithIcon = ({ icon, type, onClick, className, buttonText, ...extraProps }) => (\r\n    <button\r\n        onClick = { onClick }\r\n        className = {`btn btn-${type} ${className || ''}`}\r\n        { ...extraProps }\r\n    >\r\n        <FlexRow\r\n            className = 'align-items-center'\r\n        >\r\n            <FontAwesomeIcon \r\n                icon = { icon }\r\n                className = 'mr-2'\r\n            />\r\n            { buttonText }\r\n        </FlexRow>\r\n\r\n    </button>\r\n);\r\n\r\nexport default ButtonWithIcon;","import React from 'react';\r\n\r\nconst Row = ({ children, className, ...extraProps }) => (\r\n    <div \r\n        className = { `row m-0 ${ className || '' }` }\r\n        { ...extraProps }\r\n    >\r\n        { children }\r\n    </div>\r\n);\r\n\r\nexport default Row;","import React from 'react';\r\n\r\nconst Column = ({ children, className, fixedSize, smBreakpoint, mdBreakpoint, lgBreakpoint, xlBreakpoint }) => {\r\n    const getColumnClassName = () => {\r\n        if(fixedSize)\r\n            return `col-${fixedSize}`;\r\n        let breakPointString = '';\r\n        if(xlBreakpoint)\r\n            breakPointString += `col-xl-${ xlBreakpoint } `;\r\n        if(lgBreakpoint)\r\n            breakPointString += `col-lg-${ lgBreakpoint } `;\r\n        if(mdBreakpoint) \r\n            breakPointString += `col-md-${ mdBreakpoint } `;\r\n        if(smBreakpoint) \r\n            breakPointString += `col-sm-${ smBreakpoint } `;\r\n\r\n        return breakPointString;\r\n    }\r\n    return (\r\n        <div\r\n            className = { `${ getColumnClassName() } ${ className || '' }` }\r\n        >\r\n            { children }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Column;","import React, { Fragment } from 'react';\r\n//Components\r\nimport FlexRow from '../../Layout/Flex/FlexRow';\r\nimport LabelWithIcon from '../../Layout/Labels/LabelWithIcon';\r\n\r\n\r\nconst DimensionInput = ({ icon, name, value, labelText, handleInputChange }) => (\r\n    <div className='form-group'>\r\n        <LabelWithIcon \r\n            icon = { icon }\r\n            labelText = { labelText }\r\n            className = 'h6 text-muted'\r\n        />\r\n        <FlexRow\r\n            className = 'align-items-center justify-content-center'\r\n        >\r\n            <input \r\n                type = 'number'\r\n                name = { name }\r\n                onChange = { handleInputChange }\r\n                className = 'form-control'\r\n                defaultValue = { value }\r\n            />\r\n            <span className='ml-2'>metros</span>\r\n        </FlexRow>\r\n    </div>\r\n);\r\n\r\nexport default DimensionInput;","import React from 'react';\r\n//Components\r\nimport Row from '../../Layout/Grid/Row';\r\nimport Column from '../../Layout/Grid/Column';\r\nimport DimensionInput from './DimensionInput';\r\n//Icons\r\nimport { faArrowsAltH, faArrowsAltV } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst DimensionsSettings = ({ projectEditorWidth, projectEditorHeight, handleSettingChange }) => (\r\n    <Row\r\n        className = 'text-center'\r\n    >\r\n        <Column\r\n            mdBreakpoint = '6'\r\n            smBreakpoint = '12'\r\n        >\r\n            <DimensionInput \r\n                icon = { faArrowsAltH }\r\n                name = 'editorWidth'\r\n                value = { projectEditorWidth }\r\n                labelText = 'Ancho de la habitación'\r\n                handleInputChange = { handleSettingChange }\r\n            />\r\n        </Column>\r\n        <Column\r\n            mdBreakpoint = '6'\r\n            smBreakpoint = '12'\r\n        >\r\n            <DimensionInput \r\n                icon = { faArrowsAltV }\r\n                name = 'editorHeight'\r\n                value = { projectEditorHeight }\r\n                labelText = 'Alto de la habitación'\r\n                handleInputChange = { handleSettingChange }\r\n            />\r\n        </Column>\r\n    </Row>\r\n);\r\n\r\nexport default DimensionsSettings;","import React from 'react';\r\n//Components\r\nimport LabelWithIcon from '../../Layout/Labels/LabelWithIcon';\r\n//Icons\r\nimport { faAlignJustify } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst ProjectDescription = ({ projectDescription, handleSettingChange }) => (\r\n    <div className='form-group'>\r\n        <LabelWithIcon \r\n            icon = { faAlignJustify }\r\n            labelText = 'Descripción del proyecto'\r\n            className = 'h6 text-muted'\r\n        />\r\n        <textarea \r\n            rows = '5'\r\n            name = 'projectDescription'\r\n            value = { projectDescription }\r\n            onChange = { handleSettingChange }\r\n            className='form-control'\r\n        />\r\n    </div>\r\n);\r\n\r\nexport default ProjectDescription;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n//Redux\r\nimport { \r\n    saveProjectAction, \r\n    setProjectNameAction, \r\n    setProjectTypeAction,\r\n    setProjectObjectsAction, \r\n    addObjectToProjectAction, \r\n    updateProjectObjectAction,\r\n    set2DRoomDimensionsAction,\r\n    set2DSceneDimensionsAction,\r\n    set3DSceneDimensionsAction,\r\n    setProjectDescriptionAction,\r\n    removeObjectFromProjectAction, \r\n} from '../reducers/projectDuck';\r\n\r\nconst withProjectState = WrappedComponent => {\r\n    const WithProjectState = props => {\r\n        let { \r\n            project,\r\n            saveProjectAction,\r\n            setProjectNameAction, \r\n            setProjectTypeAction,\r\n            setProjectObjectsAction, \r\n            addObjectToProjectAction,\r\n            updateProjectObjectAction,\r\n            set2DRoomDimensionsAction,\r\n            set2DSceneDimensionsAction,\r\n            set3DSceneDimensionsAction,\r\n            setProjectDescriptionAction,\r\n            removeObjectFromProjectAction,\r\n            ...ownProps\r\n        } = props;\r\n\r\n        return <WrappedComponent \r\n            project = { project }\r\n            addObject = { addObjectToProjectAction }\r\n            updateObject = { updateProjectObjectAction }\r\n            removeObject = { removeObjectFromProjectAction }\r\n            setProjectName = { setProjectNameAction }\r\n            setProjectType = { setProjectTypeAction }\r\n            setProjectObjects = { setProjectNameAction }\r\n            set2DRoomDimensions = { set2DRoomDimensionsAction }\r\n            set2DSceneDimensions = { set2DSceneDimensionsAction }\r\n            set3DSceneDimensions = { set3DSceneDimensionsAction }\r\n            setProjectDescription = { setProjectDescriptionAction }\r\n            { ...ownProps }\r\n        />\r\n    }\r\n\r\n    const mapStateToProps = (state, ownProps) => {\r\n        return {\r\n            project: state.project,\r\n            ...ownProps\r\n        }\r\n    }\r\n\r\n    let WithState = connect(\r\n        mapStateToProps, \r\n        { \r\n            saveProjectAction,\r\n            setProjectNameAction, \r\n            setProjectTypeAction,\r\n            setProjectObjectsAction,  \r\n            addObjectToProjectAction,\r\n            updateProjectObjectAction,\r\n            set2DRoomDimensionsAction,\r\n            set2DSceneDimensionsAction,\r\n            set3DSceneDimensionsAction,\r\n            setProjectDescriptionAction,\r\n            removeObjectFromProjectAction,\r\n        }\r\n    )(WithProjectState);\r\n    return WithState;\r\n}\r\n\r\nexport default withProjectState;\r\n","import React from 'react';\r\n//Components\r\nimport ButtonWithIcon from '../Layout/Buttons/ButtonWithIcon';\r\n//Icons\r\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport FlexRow from '../Layout/Flex/FlexRow';\r\n\r\nconst SaveSettingsButton = ({ unsavedChanges, fieldsValidated, saveProjectChanges }) => (\r\n    unsavedChanges ?\r\n        <FlexRow\r\n            className = 'justify-content-center'\r\n        >\r\n            <ButtonWithIcon \r\n                icon = { faSave }\r\n                onClick = { saveProjectChanges }\r\n                disabled = { !fieldsValidated }\r\n                className = 'btn btn-success'\r\n                buttonText = 'Guardar cambios'\r\n            />\r\n        </FlexRow>\r\n    : null\r\n);\r\n\r\nexport default SaveSettingsButton;","import React from 'react';\r\n\r\nconst Container = ({ children, className, ...extraProps }) => (\r\n    <div\r\n        className = { `container ${ className || '' }` }\r\n        { ...extraProps }\r\n    >\r\n        { children }\r\n    </div>\r\n);\r\n\r\nexport default Container;","import React from 'react';\r\nimport LabelWithIcon from '../../Layout/Labels/LabelWithIcon';\r\nimport { faQuestion } from '@fortawesome/free-solid-svg-icons';\r\nimport ProjectConfiguration from '../../../classes/ProjectConfiguration';\r\n\r\nconst ProjectType = ({ projectType, handleSettingChange }) => (\r\n    <div className='form-group'>\r\n        <LabelWithIcon \r\n            icon = { faQuestion }\r\n            labelText = 'Tipo de proyecto'\r\n            className = 'h6 text-muted'\r\n        />\r\n        <select \r\n            name = 'projectType'\r\n            onChange = { handleSettingChange }\r\n            className = 'form-control'\r\n            defaultValue = { projectType }\r\n        >\r\n            <option \r\n                value = { ProjectConfiguration.CLOSET_PROJECT } \r\n            >\r\n                Closet\r\n            </option>\r\n            <option \r\n                value = { ProjectConfiguration.KITCHEN_PROJECT }\r\n            >\r\n                Cocina\r\n            </option>\r\n\r\n        </select>\r\n    </div>\r\n\r\n);\r\n\r\nexport default ProjectType;","import React, { useState, useEffect } from 'react';\r\n//Components\r\nimport FlexRow from '../Layout/Flex/FlexRow';\r\nimport ProjectName from './Details/ProjectName';\r\nimport LabelWithIcon from '../Layout/Labels/LabelWithIcon';\r\nimport ButtonWithIcon from '../Layout/Buttons/ButtonWithIcon';\r\nimport DimensionsSettings from './Dimensions/DimensionsSettings';\r\nimport ProjectDescription from './Details/ProjectDescription';\r\n//HOC\r\nimport withEditorState from '../../redux/HOC/withEditorState';\r\nimport withProjectState from '../../redux/HOC/withProjectState';\r\n//Icons\r\nimport { faCogs, faSave, faCheckCircle, faCrop  } from '@fortawesome/free-solid-svg-icons';\r\nimport SaveSettingsButton from './SaveSettingsButton';\r\nimport Container from '../Layout/Containers/Container';\r\nimport ProjectType from './Details/ProjectType';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst ProjectSettings = props => {\r\n    //Props destructuring\r\n    const { \r\n        project: { name, type, description }, \r\n        editorState: { editorHeight, editorWidth },\r\n        setProjectName, \r\n        setProjectType,\r\n        setEditorWidth,\r\n        setEditorHeight,\r\n        set3DSceneDimensions,\r\n        setProjectDescription, \r\n    } = props;\r\n\r\n    //Initial state\r\n    const initialState = {\r\n        projectName: name,\r\n        projectType: type,\r\n        editorWidth,\r\n        editorHeight,\r\n        projectDescription: description,\r\n    }\r\n    //HOOKS\r\n    //State\r\n    const [unsavedChanges, setUnsavedChanges] = useState(false);\r\n    const [fieldsValidated, setFieldsValidated] = useState(false);\r\n    const [projectSettings, setProjectSettings] = useState(initialState);\r\n    \r\n    //Project settings destructuring\r\n    const { \r\n        projectName, \r\n        projectType,\r\n        editorWidth: projectEditorWidth, \r\n        editorHeight: projectEditorHeight, \r\n        projectDescription, \r\n    } = projectSettings;\r\n\r\n    //Effects\r\n    useEffect(() => {\r\n        projectName && projectDescription && projectEditorWidth && projectEditorHeight ?\r\n            setFieldsValidated(true)\r\n        : setFieldsValidated(false);\r\n    }, [projectSettings]);\r\n\r\n\r\n\r\n\r\n    const saveProjectChanges = event => {\r\n        event.preventDefault();\r\n        setUnsavedChanges(false);\r\n        setProjectName(projectName);\r\n        setProjectType(projectType);\r\n        setEditorWidth(projectEditorWidth);\r\n        setEditorHeight(projectEditorHeight);\r\n        //Because the 3d scene dimensions don´t deppend on screen size (because they are not set in pixels), we can set them at this point\r\n        set3DSceneDimensions(projectEditorWidth, projectEditorHeight);\r\n        setProjectDescription(projectDescription);\r\n    }\r\n\r\n    const handleSettingChange = event => {\r\n        let { target: { name, value } } = event;\r\n        if(name === 'editorWidth' || name === 'editorHeight')\r\n            value = Number(value);\r\n        setProjectSettings({\r\n            ...projectSettings,\r\n            [name]: value\r\n        });\r\n        setUnsavedChanges(true);\r\n    }\r\n\r\n    return(\r\n        <Container\r\n            className = 'mt-3 py-3'\r\n        >\r\n            <LabelWithIcon \r\n                icon = { faCogs }\r\n                labelText = 'Ajustes del proyecto'\r\n                className = 'h4 text-muted'\r\n            />\r\n            <hr />\r\n            <ProjectType \r\n                projectType = { projectType }\r\n                handleSettingChange = { handleSettingChange }\r\n            />\r\n            <ProjectName \r\n                projectName = { projectName }\r\n                handleSettingChange = { handleSettingChange }\r\n            />\r\n            <ProjectDescription \r\n                projectDescription = { projectDescription }\r\n                handleSettingChange = { handleSettingChange }\r\n            />\r\n            <hr />\r\n            <LabelWithIcon \r\n                icon = { faCrop }\r\n                labelText = 'Ajustes del editor'\r\n                className = 'h5 text-muted'\r\n            />\r\n            <DimensionsSettings \r\n                projectEditorWidth = { projectEditorWidth }\r\n                projectEditorHeight = { projectEditorHeight }\r\n                handleSettingChange = { handleSettingChange }\r\n            />\r\n            <SaveSettingsButton \r\n                unsavedChanges = { unsavedChanges }\r\n                fieldsValidated = { fieldsValidated }\r\n                saveProjectChanges = { saveProjectChanges }\r\n            />\r\n        </Container>\r\n    );\r\n}\r\n\r\n//We apply the project state HOC\r\nlet WithProjectState = withProjectState(ProjectSettings);\r\n//We apply the editor state HOC\r\nlet WithEditorState = withEditorState(WithProjectState);\r\n//We export the decorated component\r\nexport default WithEditorState;","import React from 'react';\r\n//Styles\r\nimport './Heights.css';\r\n\r\nconst FixedHeightContainer = ({ height, children, className, ...extraProps }) => (\r\n    <div\r\n        className = {`h-${height} ${className || ''}`}\r\n        { ...extraProps }\r\n    >\r\n        { children }\r\n    </div>\r\n);\r\n\r\nexport default FixedHeightContainer;","/**\r\n * @author Damián Alanís Ramírez\r\n * @version 1.2.2\r\n */\r\nexport default class PlaneEvents {\r\n    static addPlaneZoomEventListener = stage => {\r\n        let scaleBy = 1.1;\r\n        stage.on('wheel', event => {\r\n            event.evt.preventDefault();\r\n            let oldScale = stage.scaleX();\r\n            let pointer = stage.getPointerPosition();\r\n\r\n            let mousePointTo = {\r\n                x: (pointer.x - stage.x()) / oldScale,\r\n                y: (pointer.y - stage.y()) / oldScale,\r\n            };\r\n\r\n            let newScale = event.evt.deltaY > 0 ? oldScale * scaleBy : oldScale / scaleBy;\r\n            stage.scale({ x: newScale, y: newScale });\r\n\r\n            let newPosition = {\r\n                x: pointer.x - mousePointTo.x * newScale,\r\n                y: pointer.y - mousePointTo.y * newScale,\r\n            };\r\n            stage.position(newPosition);\r\n            stage.batchDraw();\r\n        });\r\n    }\r\n}","/**\r\n * @author Damián Alanís Ramírez\r\n * @version 1.3.3\r\n * @description This class provides a facade for the calculation of the optimal coordinates for the room. \r\n * Which are calculated using the relation within the roomWidth -> containerWidth and roomHeight -> containerHeight, \r\n * in order to get the maximum portion of the container occupied with the minimum scalation, and without losing the\r\n * original aspect ratio.\r\n */\r\n\r\nexport default class RoomCoordinatesCalculator {\r\n    //CONSTANTS\r\n    static PLANE_PADDING  = 20;\r\n\r\n    //CONSTRUCTOR\r\n    constructor(roomWidth, roomHeight, containerWidth, containerHeight ) {\r\n        //Dimensions\r\n        this.roomWidth = roomWidth;\r\n        this.roomHeight = roomHeight;\r\n        this.containerWidth = containerWidth;\r\n        this.containerHeight = containerHeight;\r\n        //Scale \r\n        this.scale = 1;\r\n    }\r\n\r\n    //GETTERS AND SETTERS\r\n\r\n    /**\r\n     * Setter for the scale.\r\n     * @param {number} scale \r\n     */\r\n    setScale(scale){\r\n        this.scale = scale;\r\n    }\r\n\r\n    /**\r\n     * Getter for the scale.\r\n     */\r\n    getScale(){\r\n        return this.scale;\r\n    }\r\n\r\n    /**\r\n     * Sets the width and height of the room in pixels based on the received coordinates.\r\n     * @param {number} initialX \r\n     * @param {number} finalX \r\n     * @param {number} initialY \r\n     * @param {number} finalY \r\n     */\r\n    setRoomDimensionsInPixels(initialX, finalX, initialY, finalY){\r\n        this.widthInPixels = finalX - initialX;\r\n        this.heightInPixels = finalY - initialY;\r\n    }\r\n\r\n    /**\r\n     * Getter for the width and height of the room in pixels.\r\n     */\r\n    getRoomDimensionsInPixels(){\r\n        return {\r\n            width: this.widthInPixels,\r\n            height: this.heightInPixels\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method determines the optimal coordinates to get most of the container dimensions used, applying the minimun\r\n     * scale needed to fit the whole room in the container, and centering it.\r\n     */\r\n    calculate() {\r\n        //We get data from the current instance\r\n        let { roomWidth, roomHeight, containerWidth, containerHeight } = this;\r\n        let { PLANE_PADDING } = RoomCoordinatesCalculator;\r\n        //We initialize the starting points to be the origin plus the half of PLANE_PADDING (10px)\r\n        let initialX = PLANE_PADDING / 2;\r\n        //And the finish points to be the whole width minus the half of PLANE_PADDING (10 px), we make this to use >= 95% of screen width or height\r\n        let finalX = containerWidth - (PLANE_PADDING / 2);\r\n        //We make the same for the initial and final points in Y axis\r\n        let initialY = PLANE_PADDING / 2;\r\n        let finalY = containerHeight - (PLANE_PADDING / 2);\r\n        //The next step is to get the equivalence within the real room dimensions (in meters) and the container dimensions.\r\n        //Starting with the width, the whole container width (minus the padding) represents the roomWidth accordingly\r\n        let roomToContainerWidthRatio = (containerWidth - PLANE_PADDING) / roomWidth;\r\n        //With that relation, we can get the container height that is needed to fulfill the equivalence\r\n        let requiredClientHeight = (roomHeight * roomToContainerWidthRatio) + PLANE_PADDING;\r\n        //In a similar way, we can apply the same approach with the height\r\n        let roomToContainerHeightRatio = (containerHeight - PLANE_PADDING) / roomHeight;\r\n        //So, in this case, we can get the needed container width to fulfill the equivalence based on the height ratio \r\n        let requiredClientWidth = (roomWidth * roomToContainerHeightRatio) + PLANE_PADDING;\r\n        //VALIDATIONS\r\n        //Based on the required client height obtained previously, we verify that the actual DOM container satisfies the requirement\r\n        //If that´s not the case (the DOM container height is smaller than the needed one) we scale the width in order to fit all the plane in the container\r\n        if(containerHeight < requiredClientHeight) {\r\n            //This scale will be the number of times that the required container height exceeds the actual height\r\n            let scale = requiredClientHeight / containerHeight;\r\n            this.setScale(scale);\r\n            //We apply this scale only to the final point in X (to keep the padding before starting point unaltered)\r\n            finalX /= scale;\r\n            //We get the width in pixels\r\n            let width = finalX - initialX; \r\n            //The following part is to center the room in the plane (horizontal alignment)\r\n            let difference = containerWidth - width;\r\n            initialX = (difference / 2);\r\n            finalX = initialX + width;\r\n        }\r\n        //We do the same for the width (because there may be cases where the room width will exceed considerably the height)\r\n        //If the DOM container width is smaller than the needed one, we scale the width in order to fit all the plane in the container\r\n        if(containerWidth < requiredClientWidth) {\r\n            //This scale will be the number of times that the required container width exceeds the actual width\r\n            let scale = requiredClientWidth / containerWidth;\r\n            this.setScale(scale);\r\n            //We apply this scale only to the final point in Y (to keep the padding before starting point unaltered)\r\n            finalY /= scale;\r\n            //We get the height in pixels\r\n            let height = finalY - initialY;\r\n            //The following part is to center the room in the plane (vertical alignment)\r\n            let difference = containerHeight - height;\r\n            initialY = (difference / 2);\r\n            finalY = initialY + height;\r\n        }\r\n        //We set the dimensions in pixels internally, to be able to get this value later with the current instance\r\n        this.setRoomDimensionsInPixels(initialX, finalX, initialY, finalY);\r\n        //We return the optimal coordinates\r\n        return {\r\n            initialX,\r\n            finalX,\r\n            initialY,\r\n            finalY\r\n        }\r\n    }\r\n}","/**\r\n * @author Damián Alanís Ramírez\r\n * @version 1.0.0\r\n * @description Facade for adding a set of listeners to the model, with an interface to add any other in the future, the \r\n * only requirement is to keep a reference to the model instance and provide a callback function.\r\n */\r\n\r\nexport default class ModelEvents {\r\n    //Constants\r\n    static DRAG_END_EVENT    = 'dragend';\r\n    static RIGHT_CLICK_EVENT = 'contextmenu';\r\n\r\n    /**\r\n     * This method adds an event listener to the object\r\n     * @param {object} model \r\n     * @param {string} eventType \r\n     * @param {function} eventCallback \r\n     */\r\n    static addEventListener = (model, eventType, eventCallback) => {\r\n        model.on(eventType, eventCallback);\r\n    }\r\n\r\n    /**\r\n     * This method adds the right click event listener to the model\r\n     * @param {object} model \r\n     * @param {function} eventCallback \r\n     */\r\n    static addRightClickListener = (model, eventCallback) => {\r\n        let {\r\n            addEventListener,\r\n            RIGHT_CLICK_EVENT\r\n        } = ModelEvents;\r\n        addEventListener(model, RIGHT_CLICK_EVENT, event => {\r\n            //We avoid the default action (show the browser´s context menu) to execute the custom logic in eventCallback\r\n            event.evt.preventDefault();\r\n            if(eventCallback && typeof(eventCallback) === 'function')\r\n                eventCallback(event);\r\n            return false;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This method adds the drag end event listener to the model.\r\n     * @param {object} model \r\n     * @param {function} eventCallback \r\n     */\r\n    static addDragEndListener = (model, eventCallback) => {\r\n        let {\r\n            addEventListener,\r\n            DRAG_END_EVENT\r\n        } = ModelEvents;\r\n        addEventListener(model, DRAG_END_EVENT, eventCallback);\r\n    }\r\n\r\n    /**\r\n     * This method adds the 2 basic event listeners for the model, the drag end (to update its position) and the right\r\n     * click event (to show the contextual menu with the available actions to apply to the model)\r\n     * @param {object} model \r\n     * @param {function} onUpdate \r\n     * @param {function} onSelection \r\n     */\r\n    static addModelBasicEventListeners = (model, onUpdate, onSelection) => {\r\n        let {\r\n            addDragEndListener,\r\n            addRightClickListener\r\n        } = ModelEvents;\r\n        addDragEndListener(model, onUpdate);\r\n        addRightClickListener(model, onSelection);\r\n    }\r\n}","/**\r\n * @author Damián Alanís Ramírez\r\n * @version 1.0.0\r\n */\r\n\r\nexport default class RoomBoundDetector {\r\n    /**\r\n     * Bound detector function, takes the current bidimensional instance (scene), the object width and height and the\r\n     * current position. With this data, this function validates that the object cannot overflow from the room, and provides\r\n     * the perfect moment to detect collitions and other utilities like snapping (being the snapping to the border something \r\n     * that is made automatically if the object has overflowed from the room).\r\n     * @param {object} scene \r\n     * @param {number} width \r\n     * @param {number} height \r\n     * @param {object} position \r\n     */\r\n    static boundDetection = (scene, width, height, position) => {\r\n        let {\r\n            containerWidth, \r\n            containerHeight,\r\n            roomDimensionInPixels: { width: roomWidth, height: roomHeight },\r\n        } = scene;\r\n        //We get the padding (because the room is centered in the plane)\r\n        let widthPadding = (containerWidth - roomWidth) / 2;\r\n        let heightPadding = (containerHeight - roomHeight) / 2;\r\n        //We get the object centroid\r\n        let objectWidthOffset = width / 2;\r\n        let objectHeightOffset = height / 2;\r\n        //X axis constraints\r\n        let x = (position.x - objectWidthOffset <= widthPadding)\r\n            ? widthPadding + objectWidthOffset \r\n            : position.x + objectWidthOffset >= roomWidth + widthPadding  \r\n                ? roomWidth - objectWidthOffset + widthPadding \r\n                : position.x;\r\n        //Y axis constraints\r\n        let y = (position.y - objectHeightOffset <= heightPadding) \r\n            ? heightPadding + objectHeightOffset \r\n            : position.y + objectHeightOffset  >= roomHeight + heightPadding \r\n                ? roomHeight - objectHeightOffset + heightPadding \r\n                : position.y;\r\n        return { x, y }\r\n    }\r\n}","/**\r\n * @author Damián Alanís Ramírez\r\n * @version 1.0.0\r\n */\r\n\r\nexport default class BidimensionalModelDimensions {\r\n    /**\r\n     * This method calculates the width and height of the object (in pixels) to fit the requirements (ratio between the \r\n     * room size in pixels and the actual room size - in 'meters')\r\n     * @param {object} scene \r\n     * @param {number} modelWidth \r\n     * @param {number} modelHeight \r\n     */\r\n    static calculate = (scene, modelWidth, modelHeight) => {\r\n        let { \r\n            roomWidth, \r\n            roomHeight, \r\n            roomDimensionInPixels: { width: roomWidthInPixels, height: roomHeightInPixels } \r\n        } = scene;\r\n        let width = (modelWidth * roomWidthInPixels) / roomWidth;\r\n        let height = (modelHeight * roomHeightInPixels) / roomHeight;\r\n        return {\r\n            width,\r\n            height\r\n        }\r\n    }\r\n}","//Model names\r\nexport const WALL           = 'WALL';\r\nexport const KIOSK          = 'KIOSK';\r\nexport const TABLE          = 'TABLE';\r\nexport const BOARD          = 'BOARD';\r\nexport const FURNITURE      = 'FURNITURE';\r\n//2D views\r\nexport const TOP            = 'TOP';\r\nexport const FRONT          = 'FRONT';\r\nexport const FRONT_LEFT     = 'FRONT_LEFT';\r\nexport const FRONT_RIGHT    = 'FRONT_RIGHT';\r\n\r\nexport let models = {\r\n    [KIOSK]: {\r\n        uri: '/assets/models/3D/kiosk/kiosk.glb',\r\n        thumbnail: '/assets/models/3D/kiosk/thumbnail.png',\r\n    },\r\n    [TABLE]: {\r\n        uri: '/assets/models/3D/table/table.glb',\r\n        thumbnail: '/assets/models/3D/table/thumbnail.png',\r\n    },\r\n    [BOARD]: {\r\n        uri: '/assets/models/3D/board/board.glb',\r\n        thumbnail: '/assets/models/3D/board/thumbnail.png',\r\n    },\r\n    [FURNITURE]: {\r\n        uri: '/assets/models/3D/furniture/furniture.glb',\r\n        thumbnail: '/assets/models/3D/furniture/thumbnail.png',\r\n    }\r\n}\r\n\r\nexport let models2D = {\r\n    [FURNITURE]: {\r\n        //Views\r\n        [TOP]: {\r\n            uri: '/assets/models/2D/furniture/furniture_top.svg',\r\n            thumbnail: '/assets/models/3D/furniture/thumbnail.png',\r\n        },\r\n        [FRONT]: {\r\n            uri: '/assets/models/2D/furniture/furniture_front.svg',\r\n            thumbnail: '/assets/models/3D/furniture/thumbnail.png',\r\n        },\r\n        [FRONT_LEFT]: {\r\n            uri: '/assets/models/2D/furniture/furniture_front.svg',\r\n            thumbnail: '/assets/models/3D/furniture/thumbnail.png',\r\n        },\r\n        [FRONT_RIGHT]: {\r\n            uri: '/assets/models/2D/furniture/furniture_front.svg',\r\n            thumbnail: '/assets/models/3D/furniture/thumbnail.png',\r\n        }\r\n    }\r\n}\r\n\r\nexport let getDimensions = type => {\r\n    switch(type){\r\n        case TABLE:\r\n            return {\r\n                width: 0.75,\r\n                depth: 0.5,\r\n                height: 0.75,\r\n            }\r\n        case FURNITURE:\r\n            return {\r\n                width: 7,\r\n                depth: 1.5,\r\n                height: 2,\r\n            }\r\n        default:\r\n            return {\r\n                width: 1,\r\n                depth: 1,\r\n                height: 1\r\n            }\r\n    }\r\n}\r\n\r\nexport let getModelUri = type => {\r\n    switch(type){\r\n        case WALL:\r\n            return '/assets/models/3D/wall.glb'\r\n        case KIOSK:\r\n            return models[KIOSK].uri;\r\n        case TABLE:\r\n            return models[TABLE].uri;\r\n        case BOARD:\r\n            return models[BOARD].uri;\r\n        case FURNITURE:\r\n            return models[FURNITURE].uri;\r\n        default:\r\n            return models[KIOSK].uri;\r\n    }\r\n}\r\n\r\n\r\nexport let getModel2DUri = (type, view) => {\r\n    switch(type){\r\n        case FURNITURE:\r\n            return models2D[FURNITURE][view].uri;\r\n        default:\r\n            return models2D[FURNITURE][view].uri;\r\n    }\r\n}\r\n\r\nexport let getModelThumbnail = type => {\r\n    switch(type){\r\n        case KIOSK:\r\n            return models[KIOSK].thumbnail;\r\n        case TABLE:\r\n            return models[TABLE].thumbnail;\r\n        case BOARD:\r\n            return models[BOARD].thumbnail;\r\n        case FURNITURE:\r\n            return models[FURNITURE].thumbnail;\r\n        default:\r\n            return models[TABLE].thumbnail;\r\n    }\r\n}","//Dependencies\r\nimport Konva from 'konva';\r\nimport ModelEvents from './ModelEvents';\r\nimport RoomBoundDetector from '../Room/RoomBoundDetector';\r\nimport BidimensionalModelDimensions from './BidimensionalModelDimensions';\r\n//Constants and functions\r\nimport { TOP, getModel2DUri, getDimensions } from '../../../constants/models/models';\r\n\r\n\r\n/**\r\n * @author Damián Alanís Ramírez\r\n * @version 2.1.3\r\n */\r\n\r\nexport default class BidimensionalModelFactory {\r\n    /**\r\n     * Factory method, we create the model via the method fromUrl from Konva.Image, we provide this method the \r\n     * width and height - calculated with the class BidimensionalModelDimensions which get the pixel dimensions\r\n     * based on the ratio pixel dimensions / real dimensions (in 'meters') of the room.\r\n     * @param {object} scene \r\n     * @param {string} type \r\n     * @param {function} onSuccess \r\n     * @param {function} onUpdate \r\n     * @param {function} onSelection \r\n     * @param {object} attributes\r\n     */\r\n    static createModel = attributes => {\r\n        //Arguments destructuring\r\n        let {\r\n            x,\r\n            y,\r\n            type,\r\n            scene,\r\n            onUpdate,\r\n            onSuccess, \r\n            onSelection,\r\n        } = attributes;\r\n        //We load the path from catalog based on the model type\r\n        let path = getModel2DUri(type, TOP); //We get the TOP view\r\n        //We get the dimensions of the object (assuming in a 2D top view the \"height\" is the depth)\r\n        let { width: modelWidth, depth: modelHeight } = getDimensions(type);\r\n        //We get the scaled dimensions, making use of the class BidimensionalModelDimensions, which calculates the pixel size of the model based on the ratio (screen dimensions / room dimensions)\r\n        let { width, height } = BidimensionalModelDimensions.calculate(scene, modelWidth, modelHeight);\r\n        Konva.Image.fromURL(path, imageNode => {\r\n            let { containerWidth, containerHeight } = scene;\r\n            imageNode.setAttrs({\r\n                //If no coordinates were given we place the objects in the middle of the plane\r\n                x: x || containerWidth / 2,\r\n                y: y || containerHeight / 2,\r\n                type,\r\n                width,\r\n                height,\r\n                //We set the center of the element\r\n                offsetX: width / 2,\r\n                offsetY: height / 2,\r\n                //We enable the drag and drop interaction for this element\r\n                draggable: 'true',\r\n                //The function that defines the bound for dragging\r\n                dragBoundFunc: position => RoomBoundDetector.boundDetection(scene, width, height, position)\r\n            });\r\n            //We add the models event listeners (drag -> onUpdate, right click -> onSelection)\r\n            ModelEvents.addModelBasicEventListeners(imageNode, onUpdate, onSelection);\r\n            //We add the object to the layer\r\n            scene.layer.add(imageNode);\r\n\r\n            //If given, we execute the success callback passing the created object as argument\r\n            if(onSuccess && typeof(onSuccess) === 'function')\r\n                onSuccess(imageNode);\r\n                \r\n            //We update the layer\r\n            scene.layer.batchDraw();\r\n        });\r\n    }\r\n}","/**\r\n * @author Damián Alanís Ramírez\r\n * @version 3.4.5\r\n * @description Class that contains the logic to compose the 2D renderer, this class provide methods to add objects\r\n * to the scene and allows the mnipulation in several ways of the different components of the 2D scene.\r\n */\r\n//Libraries\r\nimport Konva from 'konva';\r\n//Classes\r\nimport PlaneEvents from '../2D/Plane/PlaneEvents';\r\nimport RoomCoordinatesCalculator from '../2D/Room/RoomCoordinatesCalculator';\r\nimport BidimensionalModelFactory from '../2D/Models/BidimensionalModelFactory';\r\n\r\n\r\nexport default class BidimensionalRenderer {\r\n    //CONSTANTS\r\n    //SCENE IDENTIFICATOR\r\n    static BIDIMENSIONAL_SCENE = '2d';\r\n    //DOM container\r\n    static DOM_CONTAINER_ID = 'bidimensional_renderer';\r\n    //Dimensions\r\n    static DEFAULT_WIDTH = 5;\r\n    static DEFAULT_HEIGHT = 5;\r\n    //Plane\r\n    static PLANE_PADDING = 10; //10 pixels\r\n    //CONSTRUCTOR\r\n    constructor(roomWidth = BidimensionalRenderer.DEFAULT_WIDTH, roomHeight = BidimensionalRenderer.DEFAULT_HEIGHT, enablePlaneControls = false) {\r\n        this.objects = [];\r\n        //Room dimensions\r\n        this.roomWidth = roomWidth;\r\n        this.roomHeight = roomHeight;\r\n        //Plane controls\r\n        this.enablePlaneControls = enablePlaneControls;\r\n        //Container dimensions\r\n        this.domContainer = document.getElementById(BidimensionalRenderer.DOM_CONTAINER_ID);\r\n        this.containerWidth = this.domContainer.clientWidth;\r\n        this.containerHeight = this.domContainer.clientHeight;\r\n        this.containerAspectRatio = this.containerWidth / this.containerHeight;\r\n        //Methods linkage\r\n        this.render = this.render.bind(this);\r\n    }\r\n\r\n    //PRIMARY METHODS\r\n    /**\r\n     * This method initializes the scene, setting the stage, the layer and the plane (which includes the room rendering)\r\n     */\r\n    init(){\r\n        this.setInitialStage();\r\n        this.setInitialLayer();\r\n        this.setPlane();\r\n        this.addZoomEventToStage();\r\n        this.render();\r\n    }\r\n\r\n    /**\r\n     * This method sets the main stage, which is the canvas that is rendered in the specified container, with the desired\r\n     * dimensions.\r\n     */\r\n    setInitialStage(){\r\n        this.stage = new Konva.Stage({\r\n            container: BidimensionalRenderer.DOM_CONTAINER_ID,\r\n            width: this.containerWidth,\r\n            height: this.containerHeight,\r\n            draggable:  this.enablePlaneControls ? 'true' : null,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This method sets the main layer, also, we add the layer to stage and draw it\r\n     */\r\n    setInitialLayer(){\r\n        this.layer = new Konva.Layer();\r\n        this.addLayerToStage(this.layer);\r\n        this.layer.draw();\r\n    }\r\n\r\n    /**\r\n     * Helper method to add a layer to the stage\r\n     * @param {object} layer \r\n     */\r\n    addLayerToStage(layer){\r\n        this.stage.add(layer);\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    addZoomEventToStage(){\r\n        if(!this.enablePlaneControls)\r\n            return;\r\n            \r\n        PlaneEvents.addPlaneZoomEventListener(this.stage);\r\n    }\r\n\r\n    setPlaneCenter(){\r\n        this.planeCenterCoordinates = {\r\n            x: this.containerWidth / 2,\r\n            y: this.containerHeight / 2,\r\n        }\r\n    }\r\n\r\n    setPlane(){\r\n        this.plane = new Konva.Rect({\r\n            x: 0,\r\n            y: 0,\r\n            width: this.containerWidth,\r\n            height: this.containerHeight,\r\n            fill: 'lightgray',\r\n            stroke: 'black',\r\n            opacity: 0.25,\r\n            strokeWidth: 1,\r\n        });\r\n        this.setPlaneCenter();\r\n        this.layer.add(this.plane)\r\n        this.drawGrid();\r\n        this.drawRoom()\r\n    }\r\n\r\n    drawGrid(){\r\n        //Internal constants\r\n        const ROW = 'ROW';\r\n        const COLUMN = 'COLUMN';\r\n        //Internal variables\r\n        let gridSize = 50;\r\n        let numberOfRows = this.containerHeight / gridSize;\r\n        let numberOfCols = this.containerWidth / gridSize;\r\n        //Function that draws the requested number of lines, of the requested type ('row' || 'col') with the desired size\r\n        const drawLinesInAxis = (numberOfLines, type, size, gridSize) => {\r\n            Array.from(new Array(Math.round(numberOfLines))).forEach((row, index) => {\r\n                this.layer.add(\r\n                    new Konva.Rect({\r\n                        x: type === ROW ? 0 : index * gridSize,\r\n                        y: type === ROW ? index * gridSize : 0,\r\n                        width: type === ROW ? size : 0,\r\n                        height: type === ROW ? 0 : size,\r\n                        stroke: 'black',\r\n                        opacity: 0.25,\r\n                        strokeWidth: 1,\r\n                    })\r\n                );\r\n            })\r\n        }\r\n        //We generate the grid by drawing the rows and the columns based on the grid size (each square side)\r\n        drawLinesInAxis(numberOfRows, ROW, this.containerWidth, gridSize);\r\n        drawLinesInAxis(numberOfCols, COLUMN, this.containerHeight, gridSize);\r\n    }\r\n\r\n    drawRoom(){\r\n        let { roomWidth, roomHeight, containerWidth, containerHeight } = this;\r\n        //We create a new room coordinates calculator instance, this facade returns the optimal coordinates to get the more portion of the plane in the screen by applying the less scale posible\r\n        let roomCoordinatesCalculator = new RoomCoordinatesCalculator(roomWidth, roomHeight, containerWidth, containerHeight);\r\n        //We get the coordinates and the room dimensions in pixels\r\n        this.roomCoordinates = roomCoordinatesCalculator.calculate();\r\n        this.roomDimensionInPixels = roomCoordinatesCalculator.getRoomDimensionsInPixels();\r\n        //We get the necessary data to draw the room\r\n        const { initialX, initialY } = this.roomCoordinates; //We only need the initial points\r\n        const { width, height } = this.roomDimensionInPixels;\r\n        //We add the room to the layer\r\n        this.layer.add(\r\n            new Konva.Rect({\r\n                x: initialX,\r\n                y: initialY,\r\n                width: width,\r\n                height: height,\r\n                stroke: 'black',\r\n                opacity: 1,\r\n                strokeWidth: 1,\r\n            })\r\n        );\r\n    }\r\n\r\n    getRoomDimensionInPixels(){\r\n        return this.roomDimensionInPixels;\r\n    }\r\n\r\n    render(){\r\n        requestAnimationFrame(this.render);\r\n        this.stage.batchDraw();\r\n    }\r\n\r\n    \r\n    loadSVGModel(type, { x, y }, onSuccess, onUpdate, onSelection){\r\n        //We bind the instance to a variable\r\n        let scene = this;\r\n        //We create the model, and execute the bussiness logic after its creation via the BidimensionalModelFactory\r\n        BidimensionalModelFactory.createModel({\r\n            x, \r\n            y,\r\n            type,\r\n            scene, \r\n            onUpdate,  \r\n            onSuccess, \r\n            onSelection, \r\n        });\r\n    }\r\n}","import React from 'react';\r\n//Components\r\nimport FixedHeightContainer from '../../Layout/Containers/FixedHeightContainer';\r\n//Classes\r\nimport BidimensionalRenderer from '../../../classes/Renderers/BidimensionalRenderer';\r\n\r\nconst RendererContainer = () => (\r\n    <FixedHeightContainer\r\n        id = { BidimensionalRenderer.DOM_CONTAINER_ID }\r\n        height = { 100 }\r\n    />\r\n);\r\n\r\nexport default RendererContainer;","/**\r\n * @author Damián Alanís Ramírez\r\n * @version 1.1.0\r\n */\r\n\r\nexport default class BoundDetector {\r\n    constructor(object, initialYPosition, planeWidth, planeHeight){\r\n        //Arguments\r\n        this.object = object;\r\n        this.planeWidth = planeWidth;\r\n        this.planeHeight = planeHeight;\r\n        this.initialYPosition = initialYPosition;\r\n        //Parameters that will be obtained from the object\r\n        this.scaleInX = 1;\r\n        this.scaleInZ = 1;\r\n        this.positionX = 0;\r\n        this.positionZ = 0;\r\n        this.maxPointInX = 0;\r\n        this.maxPointInZ = 0;\r\n        this.minPointInX = 0;\r\n        this.minPointInZ = 0;\r\n    }\r\n\r\n    setParametersFromObject(){\r\n        let { \r\n            scale: { x: scaleInX, z: scaleInZ },\r\n            position: { x: positionX, z: positionZ },\r\n            geometry: { boundingBox: { max: { x: maxPointInX, z: maxPointInZ }, min: { x: minPointInX, z: minPointInZ } } }\r\n        } = this.object;\r\n        this.scaleInX = scaleInX;\r\n        this.scaleInZ = scaleInZ;\r\n        this.positionX = positionX;\r\n        this.positionZ = positionZ;\r\n        this.maxPointInX = maxPointInX;\r\n        this.maxPointInZ = maxPointInZ;\r\n        this.minPointInX = minPointInX;\r\n        this.minPointInZ = minPointInZ;\r\n    }\r\n\r\n    setObjectPositionX(x){\r\n        this.object.position.x = x;\r\n    }\r\n\r\n    setObjectPositionY(y){\r\n        this.object.position.y = y;\r\n    }\r\n\r\n    setObjectPositionZ(z){\r\n        this.object.position.z = z;\r\n    }\r\n\r\n    setObjectPosition(x = null, y = null, z = null){\r\n        x && this.setObjectPositionX(x);\r\n        y && this.setObjectPositionY(y);\r\n        z && this.setObjectPositionZ(z);\r\n    }\r\n\r\n    applyBoundDetectionAlgorithm(){    \r\n        //We set parameters (like scale and current position) from the object data received\r\n        this.setParametersFromObject();\r\n        //Position in Y axis fixed to object´s initial Y axis position.\r\n        this.setObjectPositionY(this.initialYPosition);\r\n        //We get the required parameters for the algorithm\r\n        let { \r\n            scaleInX,\r\n            scaleInZ,\r\n            positionX,\r\n            positionZ,\r\n            planeWidth,\r\n            planeHeight,\r\n            maxPointInX,\r\n            maxPointInZ,\r\n            minPointInX,\r\n            minPointInZ,\r\n        } = this;\r\n        //Plane border position\r\n        let planeBorderX = planeWidth / 2;\r\n        let planeBorderZ = planeHeight / 2;\r\n        //Item dimensions in X and Z axis\r\n        let itemSizeInXAxis = (maxPointInX - minPointInX) * scaleInX;\r\n        let itemSizeInZAxis = (maxPointInZ - minPointInZ) * scaleInZ;\r\n        //We get the border location in X and Z axis\r\n        let borderXLocation = Math.abs(positionX) + (itemSizeInXAxis / 2); //It´s the absolute value because it can be the left side or the right side which may be touching the border of the plane\r\n        let borderZLocation = Math.abs(positionZ) + (itemSizeInZAxis / 2);\r\n        //Border conditions (X & Z)\r\n        //If we overflow in x, we go to the end \r\n        if(borderXLocation >= planeBorderX) {\r\n            let newPositionInX = (planeBorderX - (itemSizeInXAxis / 2)) * Math.sign(positionX);\r\n            this.setObjectPositionX(newPositionInX);\r\n        }\r\n        \r\n        if(borderZLocation >= planeBorderZ) { \r\n            let newPositionInZ = (planeBorderZ - (itemSizeInZAxis / 2)) * Math.sign(positionZ);\r\n            this.setObjectPositionZ(newPositionInZ);\r\n        }\r\n    }\r\n}","/**\r\n * @author Damián ALnaís Ramírez\r\n * @version 1.2.3\r\n */\r\n\r\nexport default class ModelScaleCalculator {\r\n    constructor(model, modelWidth, modelHeight, modelDepth) {\r\n        this.model = model;\r\n        this.modelWidth = modelWidth;\r\n        this.modelHeight = modelHeight;\r\n        this.modelDepth = modelDepth;\r\n        this.setAttributesFromModel();\r\n    }\r\n\r\n    /**\r\n     * We set the points of the bounding box\r\n     */\r\n    setAttributesFromModel = () => {\r\n        let {\r\n            geometry: { \r\n                boundingBox: { \r\n                    max: maximumBoundingBoxPoint, \r\n                    min: minimumBoundingBoxPoint \r\n                } \r\n            },\r\n        } = this.model;\r\n        //Maximum points\r\n        let {\r\n            x: maximumPointInX,\r\n            y: maximumPointInY,\r\n            z: maximumPointInZ,\r\n        } = maximumBoundingBoxPoint;\r\n        //Minimum points\r\n        let {\r\n            x: minimumPointInX, \r\n            y: minimumPointInY,\r\n            z: minimumPointInZ,\r\n        } = minimumBoundingBoxPoint;\r\n        //We set the properties\r\n        //Maximum points\r\n        this.maximumPointInX = maximumPointInX;\r\n        this.maximumPointInY = maximumPointInY;\r\n        this.maximumPointInZ = maximumPointInZ;\r\n        //Minimum points\r\n        this.minimumPointInX = minimumPointInX;\r\n        this.minimumPointInY = minimumPointInY;\r\n        this.minimumPointInZ = minimumPointInZ;\r\n    }\r\n\r\n    /**\r\n     * We calculate the proper scale to be accurate between the real life dimensions of the models and the ones in the\r\n     * 3D scene.\r\n     */\r\n    calculateScale = () => {\r\n        //We get instance member variables in the local scope\r\n        let {\r\n            modelWidth,\r\n            modelDepth,\r\n            modelHeight,\r\n            maximumPointInX,\r\n            maximumPointInY,\r\n            maximumPointInZ,\r\n            minimumPointInX,\r\n            minimumPointInY,\r\n            minimumPointInZ\r\n        } = this;\r\n        //We calculate the bounding box dimensions\r\n        let objectBoundingBoxWidth = maximumPointInX - minimumPointInX;\r\n        let objectBoundingBoxHeight = maximumPointInY - minimumPointInY;\r\n        let objectBoundingBoxDepth = maximumPointInZ - minimumPointInZ;\r\n        //And the scale will be the relation between the actual dimensions (from the catalog) and the bounding box dimensions\r\n        return {\r\n            x: modelWidth / objectBoundingBoxWidth,\r\n            y: modelHeight / objectBoundingBoxHeight,\r\n            z: modelDepth / objectBoundingBoxDepth\r\n        };\r\n    }\r\n}","import * as THREE from 'three';\r\n\r\nexport default class PlaneFactory {\r\n    static GRID         = 'GRID';\r\n    static MESH_PLANE   = 'MESH_PLANE';\r\n    static DEFAULT_SIZE = 5;\r\n    static DEFAULT_GRID = 100;\r\n    /**\r\n     * Returns an instance of the desired plane class\r\n     * @param {string} type \r\n     */\r\n    static create(type, width = PlaneFactory.DEFAULT_SIZE, height = PlaneFactory.DEFAULT_SIZE){\r\n        let plane;\r\n        switch(type){\r\n            case PlaneFactory.GRID:\r\n                plane = new THREE.GridHelper(width, PlaneFactory.DEFAULT_GRID);\r\n                break;\r\n            case PlaneFactory.MESH_PLANE:\r\n                const loader = new THREE.TextureLoader();\r\n                plane = new THREE.Mesh(\r\n                    new THREE.PlaneGeometry(\r\n                        width, \r\n                        height, \r\n                        PlaneFactory.DEFAULT_GRID, \r\n                        PlaneFactory.DEFAULT_GRID\r\n                    ),\r\n                    new THREE.MeshBasicMaterial({ //We load the default texture\r\n                        color: 0xD3D3D3\r\n                    })\r\n                );\r\n                //We rotate -90° the plane in order to be aligned with the 3D objects origin\r\n                plane.rotateX(-Math.PI / 2); \r\n                //Double sided material in order to prevent it to disappear when it is rotated\r\n                plane.material.side = THREE.DoubleSide;\r\n                break;\r\n            default:\r\n                plane = new THREE.GridHelper(PlaneFactory.DEFAULT_SIZE, PlaneFactory.DEFAULT_GRID);\r\n        }\r\n        return plane;\r\n    }\r\n}","import * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\nimport { DragControls } from 'three/examples/jsm/controls/DragControls';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { Interaction } from 'three.interaction';\r\n//Classes\r\nimport BoundDetector from '../3D/BoxPositioning/BoundDetector';\r\nimport ModelScaleCalculator from '../3D/Models/ModelScaleCalculator';\r\n//Factories\r\nimport PlaneFactory from '../3D/Plane/PlaneFactory';\r\n//Functions\r\nimport { getModelUri, getDimensions } from '../../constants/models/models';\r\n\r\n\r\n/**\r\n * @author Damián Alanís Ramírez\r\n * @version 7.4.1\r\n * Main class to control the tridimensional scene, making use of the library Three.js and custom logic to\r\n * manipulate the 3D editor and provide actions to change its behavior in runtime.\r\n * It sets scene settings and controls model addition, the only parameters that it receives in the constructor are\r\n * the scene dimensions (which are the same as the real room dimensions that were set in the project settings).\r\n */\r\n\r\nexport default class TridimensionalRenderer{\r\n    //CONSTANTS\r\n    //Scene identifier\r\n    static TRIDIMENSIONAL_SCENE = '3d';\r\n    //DOM container\r\n    static DOM_CONTAINER_ID = 'tridimensional_renderer';\r\n    //Light parameters\r\n    static DEFAULT_LIGHT_COLOR = 0xFFFFFF;\r\n    static DEFAULT_LIGHT_INTENSITY = 1;\r\n    //Default texture\r\n    static DEFAULT_TEXTURE_URI = '/assets/textures/wood.png'\r\n\r\n    //CONSTRUCTOR\r\n    constructor(sceneWidth = PlaneFactory.DEFAULT_SIZE, sceneHeight = PlaneFactory.DEFAULT_SIZE){\r\n        this.objects = [];\r\n        //Scene dimensions\r\n        this.sceneWidth = sceneWidth;\r\n        this.sceneHeight = sceneHeight;\r\n        //Container dimensions\r\n        this.domContainer = document.getElementById(TridimensionalRenderer.DOM_CONTAINER_ID);\r\n        this.containerWidth = this.domContainer.clientWidth;\r\n        this.containerHeight = this.domContainer.clientHeight;\r\n        this.containerAspectRatio = this.containerWidth / this.containerHeight;\r\n        //Plane\r\n        this.plane = null;\r\n        //Controls\r\n        this.orbitControls = null;\r\n        this.dragControls = null;\r\n        this.enableOrbitControls = true;\r\n        //Methods linkage\r\n        this.render = this.render.bind(this);\r\n\r\n    }\r\n\r\n    //PRIMARY METHODS\r\n\r\n    /**\r\n     * Main method, creates a scene and adds the necessary items. It also invokes the render method that will run\r\n     * as the mainloop.\r\n     */\r\n    init(){\r\n        this.setInitialScene();\r\n        this.setInitialCameraState();\r\n        this.setInitialRenderer();\r\n        this.addControls();\r\n        this.addPlane();\r\n        this.addResizeListener();\r\n        this.addInteractionEvents();\r\n        this.render()\r\n    }\r\n\r\n    /**\r\n     * This method creates a scene and adds the light to it\r\n     */\r\n    setInitialScene(){\r\n        this.scene = new THREE.Scene();\r\n        this.addLight();\r\n    }\r\n\r\n    /**\r\n     * This method creates a perspective camera, providing the aspect ratio and other parameters (most of them equal\r\n     * to the default ones) and setting it far enough to cover the whole scene\r\n     */\r\n    setInitialCameraState(){\r\n        //We get optimal camera distance\r\n        let cameraDistance = this.getOptimalCameraDistance();\r\n        //Then we instantiate a perspective camera and set it´s parameters (position and look point)\r\n        this.camera = new THREE.PerspectiveCamera(50, this.containerAspectRatio, 0.01, 3000);\r\n        this.camera.position.set(0, cameraDistance, 0);\r\n        this.camera.lookAt(0, cameraDistance, 0)\r\n    }\r\n\r\n    /**\r\n     * This method creates the WebGLRenderer and set its size. Also, it appends the canvas where the scene is generated\r\n     * to the dom container.\r\n     */\r\n    setInitialRenderer(){\r\n        this.renderer = new THREE.WebGLRenderer({ antialias: true });\r\n        //Renderer settings\r\n        this.renderer.setClearColor('#e5e5e5');\r\n        this.renderer.setSize(this.containerWidth, this.containerHeight);\r\n        //Append renderer in DOM\r\n        this.domContainer.appendChild(this.renderer.domElement);\r\n    }\r\n\r\n    /**\r\n     * This method creates the necessary controls to the scene (orbit controls and drag controls)\r\n     */\r\n    addControls(){\r\n        this.orbitControls = new OrbitControls( this.camera, this.renderer.domElement );\r\n        this.dragControls = new DragControls(this.objects, this.camera, this.renderer.domElement);\r\n        this.addControlsEventListeners();\r\n    }\r\n\r\n    /**\r\n     * This method adds the main event listeners for the drag controls\r\n     */\r\n    addControlsEventListeners(){\r\n        let initialYPosition = 0;\r\n        //On drag event start we disable orbit controls to avoid events interference (we don´t want to trigger orbit controls while dragging an object)\r\n        this.dragControls.addEventListener('dragstart', event => {\r\n            initialYPosition = event.object.position.y;\r\n            if(this.orbitControls)\r\n                this.orbitControls.enabled = false\r\n        })\r\n        //During the drag event we apply validations in the position where the object is trying to be placed via the BoundDetector class\r\n        this.dragControls.addEventListener('drag', event => {\r\n            let { sceneHeight, sceneWidth } = this;\r\n            let boundDetector = new BoundDetector(event.object, initialYPosition, sceneWidth, sceneHeight);\r\n            boundDetector.applyBoundDetectionAlgorithm();\r\n        });\r\n        //On drag event end we enable the orbit controls again\r\n        this.dragControls.addEventListener('dragend', event => {\r\n            event.object.material.opacity = 1;\r\n            if(this.onDragEnd && typeof(this.onDragEnd) === 'function')\r\n                this.onDragEnd(event);\r\n            if(this.orbitControls)\r\n                this.orbitControls.enabled = this.enableOrbitControls;\r\n        })\r\n\r\n        \r\n    }\r\n\r\n    /**\r\n     * This method creates a plane and adds it to the scene\r\n     */\r\n    addPlane(){\r\n        //Grid plane\r\n        let gridPlane = PlaneFactory.create(PlaneFactory.GRID, 50)\r\n        this.addToScene(gridPlane)\r\n        //Main plane (which can be personalized with different textures)\r\n        this.plane = PlaneFactory.create(PlaneFactory.MESH_PLANE, this.sceneWidth, this.sceneHeight);\r\n        this.addToScene(this.plane);  \r\n    }\r\n\r\n    /**\r\n     * This method adds a listener to the window resize event, in order to change the renderer dimensions to make it\r\n     * responsive, likewise, with the camera aspect ratio based on the new container dimensions\r\n     */\r\n    addResizeListener(){\r\n        window.addEventListener('resize', () => {\r\n            this.setContainerDimensions();\r\n            this.renderer && this.renderer.setSize(this.containerWidth, this.containerHeight);\r\n            if(this.camera){\r\n                this.camera.aspect = this.containerAspectRatio;\r\n                this.camera.updateProjectionMatrix()\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * This method adds the interaction capabilities, so we can handle events like click or mouse events in the objects.\r\n     */\r\n    addInteractionEvents(){\r\n        this.interaction = new Interaction(this.renderer, this.scene, this.camera);\r\n    }\r\n\r\n    /**\r\n     * This method conforms the mainloop of the 3d scene, by requesting the animation frame on a recursive way it'll always\r\n     * be executing the render method of the WebGLRenderer. Also, the orbit controls are updated in order to reflect the \r\n     * camera´s perspective changes made by the user interaction with mouse/keyboard events\r\n     */\r\n    render(){\r\n        requestAnimationFrame(this.render);\r\n        if(this.renderer && this.scene && this.camera){\r\n            this.renderer.render(this.scene, this.camera);\r\n        }\r\n        if(this.orbitControls){\r\n            this.orbitControls.update();\r\n        }\r\n    }\r\n\r\n    //SECONDARY METHODS\r\n\r\n    /**\r\n     * This methos sets the global callback for the drag end event\r\n     * @param {function} callback \r\n     */\r\n    setDragEndCallback(callback){\r\n        if(callback && typeof(callback) === 'function')\r\n            this.onDragEnd = callback;\r\n        //We bind the this context (instance)\r\n        this.onDragEnd = this.onDragEnd.bind(this);\r\n    }\r\n\r\n    /**\r\n     * This method adds an item to the current scene\r\n     * @param {any} element \r\n     */\r\n    addToScene(element){\r\n        this.scene.add(element);\r\n    }\r\n\r\n    /**\r\n     * Light creation and incorporation to the scene\r\n     */\r\n    addLight(){\r\n        let light = new THREE.AmbientLight(TridimensionalRenderer.DEFAULT_LIGHT_COLOR, TridimensionalRenderer.DEFAULT_LIGHT_INTENSITY)\r\n        light.position.set(0, 0, 0);\r\n        this.addToScene(light);\r\n       \r\n    }\r\n\r\n    /**\r\n     * This method sets the current dimensions of the DOM container\r\n     */\r\n    setContainerDimensions(){\r\n        this.containerWidth = this.domContainer.clientWidth;\r\n        this.containerHeight = this.domContainer.clientHeight;\r\n        this.containerAspectRatio = this.containerWidth / this.containerHeight;\r\n    }\r\n\r\n    /**\r\n     * This method adds a single object to the existing array of objects and updates the drag controls in order to be \r\n     * able to manipulate the object.\r\n     * @param {any} object \r\n     */\r\n    addObject(object){\r\n        this.objects.push(object);\r\n    }\r\n\r\n    /**\r\n     * This method sets the object's array with the provided one. Also, as in the addObject method, it updates the drag controls.\r\n     * @param {array} objects \r\n     */\r\n    setObjects(objects){\r\n        if(Array.isArray(objects))\r\n            this.objects = objects;\r\n    }\r\n\r\n    /**\r\n     * This method loads a 3D model of the specified type and in the provided coordinates to the scene.\r\n     * @param {string} type \r\n     * @param {object} initialCoordinates \r\n     * @param {function} onSuccess \r\n     */\r\n    load3DModel(type, { x = 0, y = 0, z = 0 }, onSuccess, onSelection){\r\n        //We get the data of the model based on the type (uri of the model and dimensions)\r\n        let uri = getModelUri(type);\r\n        let { width, height, depth } = getDimensions(type);\r\n        //We load the model\r\n        let loader = new GLTFLoader();\r\n        loader.load(\r\n            uri,\r\n            gltf => {\r\n                //Scaled to real dimensions\r\n                gltf.scene.scale.set(1, 1, 1);\r\n                //New objects starts at origin\r\n                gltf.scene.position.set(0, 0, 0);\r\n                //We add the object to the scene\r\n                this.addToScene(gltf.scene)\r\n                //We get the object of the scene and apply additional settings, finally we add it to the objects array (needed for drag controls)\r\n                gltf.scene.traverse( object => {\r\n                    if(object.isMesh) {\r\n                        object.on('click', event => {\r\n                            const { data: { originalEvent: { detail } } } = event;\r\n                            //On double click we execute the onSelection callback\r\n                            if(detail > 1)\r\n                                onSelection && typeof(onSelection) === 'function' && onSelection(event);\r\n                        });\r\n                        //We set the proper scale to be accurate between the real dimensions and the dimensions in the 3D scene\r\n                        let scaleCalculator = new ModelScaleCalculator(object, width, height, depth);\r\n                        let { x: scaleInX, y: scaleInY, z: scaleInZ } = scaleCalculator.calculateScale();\r\n                        object.scale.set(scaleInX, scaleInY, scaleInZ)\r\n                        //We set the object´s position, for the Y axis, we calculate the exact position to get the desired height\r\n                        let yPosition = this.getObjectYInitialPosition(y, object);\r\n                        object.position.set(x, yPosition, z);\r\n                        //We load the default texture to the object if this does not have one already\r\n                        if(!object.material.map)\r\n                            this.addTextureToObject(object, TridimensionalRenderer.DEFAULT_TEXTURE_URI);\r\n                        if(onSuccess && typeof(onSuccess) === 'function')\r\n                            onSuccess(object);\r\n                        \r\n                        //We add the object to the array\r\n                        this.addObject(object);\r\n\r\n                    }\r\n                }) \r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * This method gets the object Y position in order to get it to the desired height (initialY). \r\n     * If initialY = 0, it will appear at the origin of that axis.\r\n     * This is done by the addition of the scaled minimum Y point and the initialY.\r\n     * @param {number} initialY \r\n     * @param {object} object \r\n     */\r\n    getObjectYInitialPosition(initialY, object){\r\n        return  initialY + (Math.abs(object.geometry.boundingBox.min.y) * object.scale.y);\r\n    }\r\n\r\n    /**\r\n     * This method adds a texture to the object´s material, it can be modified at runtime\r\n     * @param {mesh} object \r\n     * @param {string} textureUri\r\n     */\r\n    addTextureToObject = (object, textureUri = null) => {\r\n        if(!object.isMesh)\r\n            return;\r\n        /**\r\n         * @todo Texture factory\r\n         */\r\n        //We load the texture \r\n        let texture = new THREE.TextureLoader().load(textureUri || TridimensionalRenderer.DEFAULT_TEXTURE_URI);\r\n        //Required parameters, specially encoding, which is set to LuminanceFormat\r\n        texture.encoding = THREE.LuminanceFormat;\r\n        texture.flipY = false;\r\n        //We add the texture in the material property of the object\r\n        object.material = new THREE.MeshPhongMaterial({\r\n            map: texture,\r\n        });\r\n        object.material.side = THREE.DoubleSide;\r\n    }\r\n\r\n    /**\r\n     * This method sets the status of the orbit controls (true means enabled, false is blocked)\r\n     * @param {boolean} value \r\n     */\r\n    setOrbitControlsEnabled(value){\r\n        this.enableOrbitControls = value;\r\n        this.orbitControls.enabled = value;\r\n    }\r\n\r\n    /**\r\n     * Method to get camera´s optimal distance, we need to get far enough to get the whole scene, therefore we \r\n     * take the maximum value between height and width\r\n     */\r\n    getOptimalCameraDistance = () => Math.max(this.sceneHeight, this.sceneWidth)  * 1.15;\r\n}","//Dependencies\r\nimport BidimensionalRenderer from '../Renderers/BidimensionalRenderer';\r\nimport TridimensionalRenderer from '../Renderers/TridimensionalRenderer';\r\n\r\n/**\r\n * @author Damián Alanís Ramírez\r\n * @version 3.2.4\r\n * @description Facade for coordinates transformation, it provides methods to pass from 2D to 3D coordinates and vice versa.\r\n * This way we keep a consistent state between both editors and we can calculate the coordinates that will be applied to a modified \r\n * object in a certain editor to the other.\r\n */\r\nexport default class CoordinatesTransformation {\r\n    //CONSTRUCTOR\r\n    constructor(scene, x, y, z){\r\n        //Scene\r\n        this.scene = scene;\r\n        this.bidimensionalScene = scene[BidimensionalRenderer.BIDIMENSIONAL_SCENE];\r\n        this.tridimensionalScene = scene[TridimensionalRenderer.TRIDIMENSIONAL_SCENE];\r\n        //We set the aditional parameters (scene dimensions)\r\n        this.setParametersFromScene();\r\n        //Coordinates\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n\r\n    /**\r\n     * This method sets the dimensions of the scenes (bidimensional and tridimensional).\r\n     */\r\n    setParametersFromScene = () => {\r\n        //We apply object destructuring to obteain the required scene dimensions\r\n        let { \r\n            roomWidth: bidimensionalRoomWidth,\r\n            roomHeight: bidimensionalRoomHeight,\r\n            sceneWidth: bidimensionalSceneWidth, \r\n            sceneHeight: bidimensionalSceneHeight,\r\n        } = { ...this.bidimensionalScene };\r\n        let { \r\n            sceneWidth: tridimensionalSceneWidth, \r\n            sceneHeight: tridimensionalSceneHeight \r\n        } = { ...this.tridimensionalScene };\r\n        //We set the obtained dimensions in the current instance state\r\n        this.bidimensionalRoomWidth = bidimensionalRoomWidth;\r\n        this.bidimensionalRoomHeight = bidimensionalRoomHeight;\r\n        this.bidimensionalSceneWidth = bidimensionalSceneWidth;\r\n        this.bidimensionalSceneHeight = bidimensionalSceneHeight;\r\n        this.tridimensionalSceneWidth = tridimensionalSceneWidth;\r\n        this.tridimensionalSceneHeight = tridimensionalSceneHeight;\r\n    }\r\n\r\n    /**\r\n     * 2D to 3D\r\n     * 3Dx = -1 * offsetInX * widthRatio\r\n     * 3Dz = -1 * offsetInY * heightRatio\r\n     * Where:\r\n     * - offset: the distance from the 2D plane center in x (PCx - 2Dx) or y (PCy - 2Dy), (PCx = 2DSceneWidth / 2, PCy = 2DSceneHeight / 2)\r\n     * - ratio: the ratio between the dimensions of both scenes, width (3DSceneWidth / 2DRoomWidth) and height \r\n     * (3DSceneHeight / 2DRoomHeight). This ratio needs to be calculated, since 3D dimensions are the same as the specified\r\n     * dimensions of the editor (because three.js does not deppend on screen dimensions), and the 2D room is fixed to that \r\n     * ratio, but it´s dimension is measured in pixels, so we need to get the equivalence from pixels to the editor dimensions\r\n     * that represent 'meters'.\r\n     * Therefore:\r\n     * 3Dx = -1 * (PCx - 2Dx) * (3DSceneWidth / 2DRoomWidth)\r\n     * 3Dz = -1 * (PCy - 2Dy) * (3DSceneHeight / 2DRoomHeight)\r\n     * \r\n     * @note 2DSceneWidth and 2DRoomWidth are two different things, the 2DSceneWidth measures the size in pixels of the \r\n     * DOM container of the 2D editor, while 2DRoomWidth measures the actual width occupied by the usable area of the editor,\r\n     * i.e the room (that represents the kitchen or closet), which keeps the real dimensions scale, so there could be empty \r\n     * spaces on the sides. The same applies for 2DSceneHeight and 2DRoomWidth.\r\n     */\r\n    \r\n\r\n    /**\r\n     * This method calculates the coordinates regarding the origin of the bidimensional plane (the center).\r\n     */\r\n    originBidimensionalPlaneCoordinates = () => {\r\n        //We obtain the required variable from the current instance in a local scope\r\n        let { \r\n            x, \r\n            y, \r\n            bidimensionalSceneWidth, \r\n            bidimensionalSceneHeight,\r\n        } = this;\r\n\r\n        //We get the plane centroid\r\n        let planeCenterX = bidimensionalSceneWidth / 2;\r\n        let planeCenterY = bidimensionalSceneHeight / 2;\r\n\r\n        return {\r\n            x: planeCenterX - x,\r\n            y: planeCenterY - y,\r\n        };\r\n    }\r\n\r\n    /**\r\n    * This method transforms the 2D coordinates to the corresponding 3D ones, to get the object placed in the same\r\n    * way between both scenes.\r\n     */\r\n    bidimensionalToTridimensionalCoordinates = () => {\r\n        //We obtain the required variable from the current instance in a local scope\r\n        let { \r\n            bidimensionalRoomWidth, \r\n            bidimensionalRoomHeight, \r\n            tridimensionalSceneWidth, \r\n            tridimensionalSceneHeight ,\r\n            originBidimensionalPlaneCoordinates\r\n        } = this;\r\n        //We get the coordinates from the origin of the bidimensional plane (centroid)\r\n        let { x: originX, y: originY } = originBidimensionalPlaneCoordinates();\r\n        //We get the ratio between the two scenes dimensions (being in the bidimensional scene, the width and height of the room, which may not be the whole screen)\r\n        let xRatio = tridimensionalSceneWidth / bidimensionalRoomWidth;\r\n        let yRatio = tridimensionalSceneHeight / bidimensionalRoomHeight;\r\n        return {\r\n            x:  -1 * originX * xRatio,\r\n            y: 0,\r\n            z: -1 * originY * yRatio\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 3D to 2D\r\n     * Solving the equation to get 3D coordinates from 2D ones, we get that the inverse operation can be done with the \r\n     * following equation:\r\n     * 2Dx = [3Dx * (2DRoomWidth / 3DSceneWidth)] + PCx\r\n     * 2Dy = [3Dz * (2DRoomHeight / 3DSceneHeight)] + PCy\r\n     * Where:\r\n     * -PCx and PCy are still the 2D plane center coordinates (PCx = 2DSceneWidth / 2, PCy = 2DSceneHeight / 2)\r\n     */\r\n\r\n    /**\r\n     * This method calculates the coordinates regarding the origin of the bidimensional plane (the center), but in the opposite \r\n     * way that it is done in 2D to 3D i.e it adds the x coordinate to the origin.\r\n     * @param {number} x \r\n     * @param {number} y \r\n     */\r\n    originTridimensionalPlaneCoordinates = (x, y) => {\r\n        //We obtain the required variable from the current instance in a local scope\r\n        let { \r\n            bidimensionalSceneWidth, \r\n            bidimensionalSceneHeight,\r\n        } = this;\r\n\r\n        //We get the plane centroid\r\n        let planeCenterX = bidimensionalSceneWidth / 2;\r\n        let planeCenterY = bidimensionalSceneHeight / 2;\r\n\r\n        return {\r\n            x: planeCenterX + x,\r\n            y: planeCenterY + y,\r\n        };\r\n    }\r\n\r\n    /**\r\n    * This method transforms the 3D coordinates to the corresponding 2D ones, to get the object placed in the same\r\n    * way between both scenes.\r\n     */\r\n    tridimensionalToBidimensionalCoordinates = () => {\r\n        let { \r\n            x,\r\n            y,\r\n            z,\r\n            bidimensionalRoomWidth,\r\n            bidimensionalRoomHeight,\r\n            tridimensionalSceneWidth,\r\n            tridimensionalSceneHeight,\r\n            originTridimensionalPlaneCoordinates\r\n        } = this;\r\n        //We get the ratio between the two scenes dimensions\r\n        let xRatio = bidimensionalRoomWidth / tridimensionalSceneWidth;\r\n        let yRatio = bidimensionalRoomHeight / tridimensionalSceneHeight;\r\n        //Remembering that z (depth) in 3D editor is y in 2D editor (TOP_VIEW), and that they are inverted\r\n        return originTridimensionalPlaneCoordinates(x * xRatio, z * yRatio);\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\n//Classes\r\nimport BidimensionalRenderer from '../../../../classes/Renderers/BidimensionalRenderer';\r\nimport withProjectState from '../../../../redux/HOC/withProjectState';\r\nimport withEditorState from '../../../../redux/HOC/withEditorState';\r\nimport TridimensionalRenderer from '../../../../classes/Renderers/TridimensionalRenderer';\r\nimport CoordinatesTransformation from '../../../../classes/Coordinates/CoordinatesTransformation';\r\n\r\nconst with2DRenderer = WrappedComponent => {\r\n    const With2DRenderer = props => {\r\n        //CONSTANTS\r\n        const BIDIMENSIONAL  = BidimensionalRenderer.BIDIMENSIONAL_SCENE;\r\n        const TRIDIMENSIONAL = TridimensionalRenderer.TRIDIMENSIONAL_SCENE;\r\n        //PROPS\r\n        //Destructuring\r\n        const { \r\n            project,\r\n            addObject, \r\n            editorState: { editorWidth, editorHeight },\r\n            updateObject, \r\n            removeObject, \r\n            set2DRoomDimensions,\r\n            set2DSceneDimensions, \r\n            ...ownProps \r\n        } = props;\r\n        const { objects: projectObjects } = project;\r\n        //HOOKS\r\n        //State\r\n        const [models, setModels] = useState({});\r\n        const [sceneInstance, setSceneInstance] = useState();\r\n        const [draggedObject, setDraggedObject] = useState();\r\n        \r\n\r\n        //Effects\r\n        useEffect(() => {\r\n            //We set the scene instance\r\n            let sceneInstance = new BidimensionalRenderer(editorWidth, editorHeight);\r\n            sceneInstance.init();\r\n            setSceneInstance(sceneInstance);\r\n            //We set the container dimensions\r\n            let { containerWidth, containerHeight } = sceneInstance;\r\n            set2DSceneDimensions(containerWidth, containerHeight);\r\n            //We set the room dimensions \r\n            const { width: roomWidth, height: roomHeight } = sceneInstance.getRoomDimensionInPixels();\r\n            set2DRoomDimensions(roomWidth, roomHeight);\r\n\r\n            /**\r\n             * This method restores the existing objects in the plane\r\n             */\r\n            const restoreModels = () => {\r\n                //We retrieve the existing models in state\r\n                let modelsCopy = { ...models };\r\n                //We iterate over the existing models and create the 2d model\r\n                projectObjects.forEach(model => {\r\n                    //We get the type and the coordinates (of the 2d key)\r\n                    const { type } = model;\r\n                    const { coordinates } = model[BIDIMENSIONAL];\r\n                    //We update the model quantity\r\n                    modelsCopy[type] ? modelsCopy[type].quantity++ : modelsCopy[type] = { quantity: 1 };\r\n                    //We create the SVG model\r\n                    sceneInstance.loadSVGModel(\r\n                        type,\r\n                        coordinates,\r\n                        createdModel => { //onSuccess callback\r\n                            let { _id, attrs: { x, y } } = createdModel;\r\n                            let modelWithUpdatedId = {\r\n                                ...model,\r\n                                [BIDIMENSIONAL]: {\r\n                                    uuid: _id,\r\n                                    coordinates: { x, y }\r\n                                }\r\n                            };\r\n                            updateObject(modelWithUpdatedId) //updateCallback\r\n                        },\r\n                        updateModel\r\n                    );\r\n                });\r\n                setModels(modelsCopy);\r\n            }\r\n            restoreModels();\r\n            \r\n        }, []);\r\n\r\n\r\n        /**\r\n         * Effect used to update the dragged object\r\n         */\r\n        useEffect(() => {\r\n            if(!draggedObject)\r\n                return;\r\n            //We get the id and the coordinates from the dragged object\r\n            const { _id, x, y } = draggedObject\r\n            \r\n            let existingObject = findObjectBy2DModelId(_id);\r\n            if(!existingObject)\r\n                return;\r\n            let tridimensionalEditorState = { ...existingObject[TRIDIMENSIONAL] };\r\n            let updatedObject = { \r\n                ...existingObject,\r\n                [BIDIMENSIONAL]: {\r\n                    uuid: _id,\r\n                    coordinates: { x, y }\r\n                },\r\n                [TRIDIMENSIONAL]: {\r\n                    ...tridimensionalEditorState,\r\n                    coordinates: get3DCoordinates(x, y), //We get the 3D coordinates, because movements in 2D editor take effect on 3D editor too\r\n                }\r\n            };\r\n            updateObject(updatedObject);\r\n        }, [draggedObject]);\r\n        /**\r\n         * Success callback for the loadSVGModel method, in this callback we add the created object at project´s level, \r\n         * generating the id and the 2d and 3d keys, which will contain the id´s and coordinates of the object in the current\r\n         * project.\r\n         * @param {object} createdModel \r\n         */\r\n        const onCreationSuccess = createdModel => {\r\n            //We get the id, type and the coordinates of the created model\r\n            let { _id, attrs: { x, y, type } } = createdModel;\r\n            //We generate an object with all the properties needed to keep it in the state\r\n            let objectToAdd = {\r\n                id: projectObjects.length,\r\n                type,\r\n                [BIDIMENSIONAL]: {\r\n                    uuid: _id, //Konva generated ID\r\n                    coordinates: { x, y }\r\n                },\r\n                [TRIDIMENSIONAL]: {\r\n                    uuid: '', //We don´t know the id for the 3D model, it will be generated and updated on render time\r\n                    coordinates: { x: 0, y: 0, z: 0 }\r\n                }\r\n            }\r\n            //We add the object at project´s level\r\n            addObject(objectToAdd);\r\n        }\r\n\r\n        /**\r\n         * This method return the complete object based on it´s 2d model id\r\n         * @param {string} id2DModel \r\n         */\r\n        const findObjectBy2DModelId = id2DModel => projectObjects.find(object => object[BIDIMENSIONAL].uuid === id2DModel);\r\n\r\n        const updateModel = event => {\r\n            if(!event.target)\r\n                return;\r\n            //We get the 2d model id and the new coordinates\r\n            const { target: { _id, attrs: { x, y } } } = event;\r\n            setDraggedObject({ x, y, _id });       \r\n        }\r\n\r\n        /**\r\n         * This method adds a new model of the specified type to the scene\r\n         * @param {string} type \r\n         */\r\n        const addModel = (type, coordinates = { }) => {\r\n            increaseModelQuantity(type);\r\n            //We provide the success callback to add the object at project´s level\r\n            sceneInstance.loadSVGModel(type, coordinates, onCreationSuccess, updateModel);\r\n        }\r\n\r\n        /**\r\n         * This method increases the quantity of the specified model\r\n         * @param {string} type \r\n         */\r\n        const increaseModelQuantity = type => {\r\n            let modelsCopy = { ...models };\r\n            modelsCopy[type] ? modelsCopy[type].quantity++ : modelsCopy[type] = { quantity: 1 };\r\n            setModels(modelsCopy);\r\n        }\r\n\r\n        /**\r\n         * This method transforms the 2D coordinates to the corresponding 3D ones, to get the object placed in the same\r\n         * way between both editors, making use of the class CoordinatesTransformation.\r\n         * @param {number} x \r\n         * @param {number} y \r\n         */\r\n        const get3DCoordinates = (x, y) => {\r\n            const { scene } = project;\r\n            let coordinatesTransformation = new CoordinatesTransformation(scene, x, y);\r\n            return coordinatesTransformation.bidimensionalToTridimensionalCoordinates();\r\n        }\r\n\r\n        return <WrappedComponent \r\n            models = { models }\r\n            addModel = { addModel }\r\n            { ...ownProps }\r\n        />\r\n    }\r\n\r\n    //We apply the project state HOC\r\n    let WithProjectState = withProjectState(With2DRenderer);\r\n    //We apply the editor state decorator\r\n    let WithEditorState = withEditorState(WithProjectState);\r\n    //We return the decorated component\r\n    return WithEditorState;\r\n}\r\n\r\n\r\nexport default with2DRenderer;","import React from 'react';\r\n//Styles\r\nimport './Widths.css';\r\n\r\nconst FixedWidthContainer = ({ width, children, className, ...extraProps }) => (\r\n    <div\r\n        className = {`w-${width} ${className || ''}`}\r\n        { ...extraProps }\r\n    >\r\n        { children }\r\n    </div>\r\n);\r\n\r\nexport default FixedWidthContainer;","import React from 'react';\r\n//Functions\r\nimport { getModelThumbnail } from '../../../../../../constants/models/models';\r\n//Styles\r\nimport './ModelThumbnail.css';\r\n\r\n\r\nconst ModelThumbnail = ({ title, model, onClick, className, modelQuantity, imageClassName }) => {\r\n    return(\r\n        <div \r\n            title = { title }\r\n            onClick = { onClick }\r\n            className = { `model-thumbnail-container cursor-click ${className || ''}` }\r\n            data-toggle = 'tooltip' \r\n            data-placement = 'right' \r\n        >\r\n            <img \r\n                src = { getModelThumbnail(model) } \r\n                alt = { model }\r\n                className =  { imageClassName || 'model-thumbnail' }\r\n                \r\n            />\r\n            {\r\n                modelQuantity > 0 && \r\n                <div className='quantity-tile'>\r\n                    <span className='rounded-circle bg-primary circle-tile text-light'>{ modelQuantity }</span>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModelThumbnail;","import React from 'react';\r\nimport FlexRow from '../../../../../../Layout/Flex/FlexRow';\r\nimport ModelThumbnail from '../ModelThumbnail';\r\n\r\nconst ModelsLibrary = ({ models, addModel, className }) => (\r\n    <FlexRow\r\n        className = { `justify-content-start pt-2 ${className || ''}` }\r\n    >\r\n        <ModelThumbnail\r\n            model = 'TABLE'\r\n            title = 'Mesa'\r\n            onClick = { (e) => addModel('TABLE') }\r\n            className = 'mr-3'\r\n            modelQuantity = { models['TABLE'] ? models['TABLE'].quantity : 0 }\r\n        />\r\n        <ModelThumbnail\r\n            model = 'KIOSK'\r\n            title = 'Kiosko'\r\n            onClick = { (e) => addModel('KIOSK') }\r\n            className = 'mr-3'\r\n            modelQuantity = { models['KIOSK'] ? models['KIOSK'].quantity : 0 }\r\n        />\r\n        <ModelThumbnail\r\n            model = 'BOARD'\r\n            title = 'Pizarrón'\r\n            onClick = { (e) => addModel('BOARD') }\r\n            className = 'mr-3'\r\n            modelQuantity = { models['BOARD'] ? models['BOARD'].quantity : 0 }\r\n        />\r\n        <ModelThumbnail \r\n            model = 'FURNITURE'\r\n            title = 'Entrepaños'\r\n            onClick = { (e) => addModel('FURNITURE') }\r\n            className = 'mr-3'\r\n            modelQuantity = { models['FURNITURE'] ? models['FURNITURE'].quantity : 0 }\r\n        />\r\n    </FlexRow>\r\n);\r\n\r\nexport default ModelsLibrary;","import React from 'react';\r\nimport FlexRow from '../../../../Layout/Flex/FlexRow';\r\nimport FixedWidthContainer from '../../../../Layout/Containers/FixedWidthContainer';\r\nimport ModelsLibrary from '../../../3D/Layout/Editor/EditorActions/ModelsLibrary/ModelsLibrary';\r\n\r\nconst EditorActions = ({ models, addModel }) => (\r\n    <FlexRow>\r\n        <FixedWidthContainer\r\n            width = { 75 }\r\n            className = 'overflow-auto h-100'\r\n        >\r\n            \r\n            <ModelsLibrary \r\n                models = { models }\r\n                addModel = { addModel }\r\n            />\r\n        </FixedWidthContainer>\r\n\r\n    </FlexRow>\r\n);\r\n\r\nexport default EditorActions;","import React from 'react';\r\n//Components\r\nimport RendererContainer from '../RendererContainer';\r\nimport FixedHeightContainer from '../../../Layout/Containers/FixedHeightContainer';\r\nimport with2DRenderer from '../../../Renderer/2D/HOC/with2DRenderer';\r\nimport EditorActions from '../../2D/Editor/EditorActions/EditorActions';\r\n\r\n\r\nconst Editor = ({ models, addModel }) => {\r\n    return (\r\n        <FixedHeightContainer\r\n            height = { 100 }\r\n        >\r\n            <FixedHeightContainer\r\n                height = { 90 }\r\n            >\r\n                <RendererContainer />\r\n            </FixedHeightContainer>\r\n            <FixedHeightContainer\r\n                height = { 10 }\r\n                className = 'bg-none'\r\n            >\r\n                <EditorActions \r\n                    models = { models }\r\n                    addModel = { addModel }\r\n                />\r\n            </FixedHeightContainer>\r\n        </FixedHeightContainer>\r\n    )\r\n}\r\n\r\nexport default with2DRenderer(Editor);","/**\r\n * @todo Posteriormente esto vendrá de BD\r\n */\r\nconst WOOD_TEXTURE_URI = '/assets/textures/wood.png';\r\nconst FLOOR_TEXTURE_URI = '/assets/textures/floor.png';\r\n\r\nexport default class TextureFactory {\r\n    static WOOD_TEXTURE = 'WOOD_TEXTURE';\r\n    static FLOOR_TEXTURE = 'FLOOR_TEXTURE';\r\n\r\n    static getTextureUri = textureType => {\r\n        let { WOOD_TEXTURE, FLOOR_TEXTURE } = TextureFactory;\r\n        switch(textureType){\r\n            case WOOD_TEXTURE:\r\n                return WOOD_TEXTURE_URI;\r\n            case FLOOR_TEXTURE:\r\n                return FLOOR_TEXTURE_URI;\r\n            default:\r\n                return FLOOR_TEXTURE_URI;\r\n        }\r\n    }\r\n}","import React from 'react';\r\n//Components\r\nimport ButtonWithIcon from '../../../../../../../Layout/Buttons/ButtonWithIcon';\r\n//Factories\r\nimport TextureFactory from '../../../../../../../../classes/3D/Models/TextureFactory';\r\n//Icons\r\nimport { faCog } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst PlaneSettings = ({ editorWidth, editorHeight, setEditorHeight, setEditorWidth, handleTextureChange }) => (\r\n    <div className='dropup'\r\n        title = 'Ajustes de escena 3D'\r\n        data-toggle = 'tooltip' \r\n        data-placement = 'top' \r\n    >\r\n        <div className='dropdown'>\r\n            <ButtonWithIcon \r\n                id = '3d_scene_settings'\r\n                icon = { faCog }\r\n                type = 'outline-secondary'\r\n                className = 'rounded-pill pr-1 py-2 mr-2'\r\n                data-toggle='dropdown' \r\n                aria-haspopup='true' \r\n                aria-expanded='false'\r\n            />\r\n            <div className='dropdown-menu mb-5 px-3 oveflow-auto' aria-labelledby='3d_scene_settings'>\r\n                <h5>Plane</h5>\r\n                \r\n                <div className='form-group'>\r\n                    <h6>Dimensiones: </h6>\r\n                    <label>Alto: </label>\r\n                    <input \r\n                        type = 'text' \r\n                        value = { editorHeight }\r\n                        onChange = { event => setEditorHeight(event.target.value) }\r\n                        className = 'form-control' \r\n                    />\r\n                    <label>Ancho: </label>\r\n                    <input \r\n                        type='text' \r\n                        value = { editorWidth }\r\n                        onChange = { event => setEditorWidth(event.target.value) }\r\n                        className='form-control' \r\n                    />\r\n                </div>\r\n                \r\n                \r\n                <div className='form-group'>\r\n                    <h6>Textura:</h6>\r\n                    <div>\r\n                        <label>\r\n                            <input \r\n                                type = 'checkbox'\r\n                                value = { TextureFactory.FLOOR_TEXTURE } \r\n                                onChange = { handleTextureChange }\r\n                                className = 'mr-2'\r\n                            />\r\n                            <img \r\n                                src = { TextureFactory.getTextureUri(TextureFactory.FLOOR_TEXTURE) } \r\n                                width = '30px' \r\n                                height = '30px' \r\n                                className = 'mr-2'\r\n                            />\r\n                            Piso\r\n                        </label>\r\n                    </div>\r\n                    <div className='mt-2'>\r\n                        <label>\r\n                            <input \r\n                                type = 'checkbox'\r\n                                value = { TextureFactory.WOOD_TEXTURE } \r\n                                onChange = { handleTextureChange }\r\n                                className = 'mr-2'\r\n                            />\r\n                            <img \r\n                                src = { TextureFactory.getTextureUri(TextureFactory.WOOD_TEXTURE) } \r\n                                width = '30px' \r\n                                height = '30px' \r\n                                className = 'mr-2'\r\n                            />\r\n                            Duela\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default PlaneSettings;","import * as THREE from 'three';\r\nimport TridimensionalRenderer from \"../../Renderers/TridimensionalRenderer\";\r\n\r\nexport default class CameraRotationFactory {\r\n    /**\r\n     * Predefined views (top, front - with 4 modes - and isometric);\r\n     */\r\n    //TOP VIEW\r\n    static TOP_VIEW = 'TOP_VIEW';\r\n    //FRONT VIEW\r\n    static BACK_VIEW    = 'BACK_VIEW';\r\n    static FRONT_VIEW   = 'FRONT_VIEW';\r\n    static FRONT_LEFT   = 'FRONT_LEFT';\r\n    static FRONT_RIGHT  = 'FRONT_RIGHT';\r\n    //ISOMETRIC\r\n    static ISOMETRIC_VIEW = 'ISOMETRIC_VIEW';\r\n\r\n    /**\r\n     * Creates an instance of a tridimensional vector, which represents the position of the camera in the desired point of view.\r\n     * It also accepts a number representing the distance (how far is the camera). If not defined, the default value in TridimendionalRenderer\r\n     * will be used instead.\r\n     * @param {string} type \r\n     * @param {number} distance \r\n     */\r\n    static createCameraRotationVector = (type, distance = null) => {\r\n        let cameraDistance = distance || TridimensionalRenderer.DEFAULT_CAMERA_DISTANCE;\r\n        //The 3d vector to be returned is initialized with 0´s\r\n        let cameraPosition = new THREE.Vector3(0, 0, 0);\r\n        //We get the type of views (just to avoid writing the name of the class before all of them in the switch)\r\n        let { TOP_VIEW, BACK_VIEW, FRONT_VIEW, FRONT_LEFT, FRONT_RIGHT, ISOMETRIC_VIEW } = CameraRotationFactory;\r\n\r\n        switch(type){\r\n            case TOP_VIEW:\r\n                //In top view we only make non-zero the Y axis\r\n                cameraPosition.setY(cameraDistance);\r\n                break;\r\n            case BACK_VIEW:\r\n                //In back view we only make non-zero the Z axis (but in negative way)\r\n                cameraPosition.setZ(-cameraDistance);\r\n                break;\r\n            case FRONT_VIEW:\r\n                //In front view we make non-zero the Z axis\r\n                cameraPosition.setZ(cameraDistance);\r\n                break;\r\n            case FRONT_LEFT:\r\n                //In front left view we only make non-zero the X axis (but in negative way)\r\n                cameraPosition.setX(-cameraDistance);\r\n                break;\r\n            case FRONT_RIGHT:\r\n                //In front right view we only make non-zero the X axis\r\n                cameraPosition.setX(cameraDistance);\r\n                break;\r\n            case ISOMETRIC_VIEW:\r\n                //We get a little closer\r\n                cameraDistance -= 2;\r\n                //In isometric view we set the X axis and the Z axis equal, and we make the Y axis half the distance value\r\n                cameraPosition.setX(cameraDistance);\r\n                cameraPosition.setY(cameraDistance / 2);\r\n                cameraPosition.setZ(cameraDistance);\r\n                break;\r\n            default:\r\n                //By default we get the top view\r\n                cameraPosition.setY(cameraDistance);\r\n        }\r\n        //We return the 3d vector which represents the position that the camera needs to acquire in order to get the desired view\r\n        return cameraPosition;\r\n    }\r\n}","import React from 'react';\r\n//Components\r\nimport FlexColumn from '../../../../../../Layout/Flex/FlexColumn';\r\nimport LabelWithIcon from '../../../../../../Layout/Labels/LabelWithIcon';\r\n//Icons\r\nimport { faCrosshairs, faCaretSquareUp, faWindowMaximize, faWindowRestore, faCaretSquareLeft, faCaretSquareRight, faCube } from '@fortawesome/free-solid-svg-icons';\r\n//Classes\r\nimport CameraRotationFactory from '../../../../../../../classes/3D/Camera/CameraRotationFactory';\r\n\r\n\r\n\r\nconst CameraPositionMenu = ({ rotateCamera }) => {\r\n    //Available views\r\n    let { TOP_VIEW, BACK_VIEW, FRONT_VIEW, FRONT_LEFT, FRONT_RIGHT, ISOMETRIC_VIEW } = CameraRotationFactory;\r\n    return(\r\n        <div \r\n            title = 'Vistas'\r\n            className = 'dropup'\r\n            data-toggle = 'tooltip' \r\n            data-placement = 'top' \r\n        >\r\n            <LabelWithIcon \r\n                icon = { faCrosshairs }\r\n                title = 'Vistas'\r\n                className = 'cursor-click mb-0 btn btn-outline-secondary rounded-pill pr-1 mr-2 py-2'\r\n                data-toggle = 'dropdown' \r\n                aria-haspopup = 'true' \r\n                aria-expanded = 'false'\r\n            />\r\n            <div className='dropdown-menu mb-3 px-2 py-2'>\r\n                <FlexColumn>\r\n                    <LabelWithIcon \r\n                        icon = { faCaretSquareUp }\r\n                        labelText = 'Superior'\r\n                        onClick = { e => rotateCamera(TOP_VIEW) }\r\n                        className = 'cursor-click dropdown-item'\r\n                    />\r\n                    <LabelWithIcon \r\n                        icon = { faWindowMaximize }\r\n                        labelText = 'Frente'\r\n                        onClick = { e => rotateCamera(FRONT_VIEW) }\r\n                        className = 'cursor-click dropdown-item'\r\n                    />\r\n                    <LabelWithIcon \r\n                        icon = { faWindowRestore }\r\n                        labelText = 'Atras'\r\n                        onClick = { e => rotateCamera(BACK_VIEW) }\r\n                        className = 'cursor-click dropdown-item'\r\n                    />\r\n                    <LabelWithIcon \r\n                        icon = { faCaretSquareRight }\r\n                        labelText = 'Derecha'\r\n                        onClick = { e => rotateCamera(FRONT_RIGHT) }\r\n                        className = 'cursor-click dropdown-item'\r\n                    />\r\n                    <LabelWithIcon \r\n                        icon = { faCaretSquareLeft }\r\n                        labelText = 'Izquierda'\r\n                        onClick = { e => rotateCamera(FRONT_LEFT) }\r\n                        className = 'cursor-click dropdown-item'\r\n                    />\r\n                    <LabelWithIcon \r\n                        icon = { faCube }\r\n                        labelText = 'Isométrico'\r\n                        onClick = { e => rotateCamera(ISOMETRIC_VIEW) }\r\n                        className = 'cursor-click dropdown-item'\r\n                    />\r\n\r\n                </FlexColumn>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CameraPositionMenu;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n//Components\r\nimport FlexRow from '../../../../../../Layout/Flex/FlexRow';\r\nimport PlaneSettings from './PlaneSettings/PlaneSettings';\r\nimport ButtonWithIcon from '../../../../../../Layout/Buttons/ButtonWithIcon';\r\nimport CameraPositionMenu from './CameraPositionMenu';\r\n//HOC\r\nimport withProjectState from '../../../../../../../redux/HOC/withProjectState';\r\nimport withEditorState from '../../../../../../../redux/HOC/withEditorState';\r\n//Icons\r\nimport { faArrowsAlt, faLock, faLockOpen } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n\r\n\r\nconst PlaneActions = props => {\r\n    //PROPS\r\n    let {\r\n        //From editor state HOC\r\n        editorState, \r\n        setEditorWidth, \r\n        setEditorHeight, \r\n        //From parent component\r\n        rotateCamera, \r\n        addTextureToPlane, \r\n        toggleOrbitControls, \r\n        orbitControlsEnabled, \r\n    } = props;\r\n\r\n    //Object destructuring\r\n    const { editorHeight, editorWidth } = editorState;\r\n    \r\n    /**\r\n     * Method that changes the plane texture based on the desired one\r\n     * @param {object} event \r\n     */\r\n    const handleTextureChange = event => {\r\n        let { checked, value } = event.target;\r\n        if(checked)\r\n            addTextureToPlane(value);\r\n    }\r\n    \r\n    return(\r\n        <FlexRow\r\n            className = 'justify-content-start align-items-center'\r\n        >  \r\n            <CameraPositionMenu \r\n                rotateCamera = { rotateCamera }\r\n            />\r\n            <PlaneSettings \r\n                editorWidth = { editorWidth }\r\n                editorHeight = { editorHeight }\r\n                setEditorWidth = { setEditorWidth }\r\n                setEditorHeight = { setEditorHeight }\r\n                handleTextureChange = { handleTextureChange }\r\n            />\r\n            <ButtonWithIcon \r\n                icon = { orbitControlsEnabled ? faLock : faLockOpen }\r\n                title = 'Bloquear/desbloquear plano'\r\n                type = { orbitControlsEnabled ?  'outline-secondary' : 'secondary' }\r\n                onClick = { toggleOrbitControls }\r\n                className = 'btn-sm rounded-pill px-3 py-2 mr-2'\r\n                buttonText = {\r\n                    <FontAwesomeIcon \r\n                        icon = { faArrowsAlt }\r\n                    />\r\n                }\r\n                data-toggle = 'tooltip' \r\n                data-placement = 'top' \r\n            />    \r\n        </FlexRow>\r\n    );\r\n}\r\n\r\n//We apply the project state HOC\r\nlet WithProjectState = withProjectState(PlaneActions);\r\n//We apply the editor state decorator \r\nlet WithEditorState = withEditorState(WithProjectState);\r\n//We return the decorated component\r\nexport default WithEditorState;","import React from 'react';\r\n//Components\r\nimport FlexRow from '../../../../../Layout/Flex/FlexRow';\r\nimport ModelsLibrary from './ModelsLibrary/ModelsLibrary';\r\nimport FixedWidthContainer from '../../../../../Layout/Containers/FixedWidthContainer';\r\nimport PlaneActions from './PlaneActions/PlaneActions';\r\n\r\nconst EditorActions = ({ models, addModel, rotateCamera, addTextureToPlane, toggleOrbitControls, orbitControlsEnabled }) => (\r\n    <FlexRow\r\n        className = 'justify-content-around align-items-center'\r\n    >\r\n        <FixedWidthContainer\r\n            width = { 75 }\r\n            className = 'overflow-auto h-100'\r\n        >\r\n            <ModelsLibrary \r\n                models = { models }\r\n                addModel = { addModel }\r\n            />\r\n        </FixedWidthContainer>\r\n        <FixedWidthContainer\r\n            width = { 25 }\r\n        >\r\n            <PlaneActions \r\n                rotateCamera = { rotateCamera }\r\n                addTextureToPlane = { addTextureToPlane }\r\n                toggleOrbitControls = { toggleOrbitControls }\r\n                orbitControlsEnabled = { orbitControlsEnabled }\r\n            />\r\n        </FixedWidthContainer>\r\n\r\n    </FlexRow>\r\n);\r\n\r\nexport default EditorActions;","import React from 'react';\r\n//Components\r\nimport FixedHeightContainer from '../../../Layout/Containers/FixedHeightContainer';\r\n\r\nconst RendererContainer = () => (\r\n    <FixedHeightContainer\r\n        id = 'tridimensional_renderer'\r\n        height = { 100 }\r\n    />\r\n);\r\n\r\nexport default RendererContainer;","import React from 'react';\r\n//Components\r\nimport EditorActions from './EditorActions/EditorActions';\r\nimport RendererContainer from '../RendererContainer';\r\nimport FixedHeightContainer from '../../../../Layout/Containers/FixedHeightContainer';\r\n//HOC\r\nimport with3DRenderer from '../../../../Renderer/3D/HOC/with3DRenderer';\r\n\r\n\r\nconst Editor = ({ models, addModel, rotateCamera, addTextureToPlane, toggleOrbitControls, orbitControlsEnabled }) => {\r\n    return(\r\n        <FixedHeightContainer\r\n            height = { 100 }\r\n        >\r\n            \r\n            <FixedHeightContainer\r\n                height = { 90 }\r\n            >\r\n                <RendererContainer />\r\n            </FixedHeightContainer>\r\n            <FixedHeightContainer\r\n                height = { 10 }\r\n            >\r\n                <EditorActions\r\n                    models = { models } \r\n                    addModel = { addModel }\r\n                    rotateCamera = { rotateCamera }\r\n                    addTextureToPlane = { addTextureToPlane }\r\n                    toggleOrbitControls = { toggleOrbitControls }\r\n                    orbitControlsEnabled = { orbitControlsEnabled }\r\n                />\r\n                \r\n            </FixedHeightContainer>\r\n        </FixedHeightContainer>\r\n    );\r\n}\r\n\r\nexport default with3DRenderer(Editor);\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\n//Classes\r\nimport TridimensionalRenderer from '../../../../classes/Renderers/TridimensionalRenderer';\r\n//Factories\r\nimport TextureFactory from '../../../../classes/3D/Models/TextureFactory';\r\nimport CameraRotationFactory from '../../../../classes/3D/Camera/CameraRotationFactory';\r\n//Functions\r\nimport withProjectState from '../../../../redux/HOC/withProjectState';\r\nimport withEditorState from '../../../../redux/HOC/withEditorState';\r\nimport CoordinatesTransformation from '../../../../classes/Coordinates/CoordinatesTransformation';\r\n\r\n\r\nconst with3DRenderer = (WrappedComponent) => {\r\n\r\n    const With3DRenderer = props => {\r\n        //PROPS\r\n        //Destructuring\r\n        const { \r\n            project, \r\n            addObject,\r\n            editorState: { editorWidth, editorHeight },\r\n            updateObject, \r\n            removeObject, \r\n            set2DSceneDimensions, \r\n            set3DSceneDimensions, \r\n            ...extraProps\r\n        } = props;\r\n        const { objects: projectObjects } = project;\r\n\r\n        //HOOKS\r\n        //State\r\n        const [models, setModels] = useState({});\r\n        const [sceneInstance, setSceneInstance] = useState();\r\n        const [draggedObject, setDraggedObject] = useState();\r\n        const [orbitControlsEnabled, setOrbitControlsEnabled] = useState(true);\r\n        \r\n\r\n        //Effects\r\n        useEffect(() => {\r\n            //We generate a tridimensional renderer instance with the width and height that are currently set in the state\r\n            let sceneInstance = new TridimensionalRenderer(editorWidth, editorHeight);\r\n            //We initialize the scene instance and provide the drag end callback, which is the update model function\r\n            sceneInstance.init();\r\n            sceneInstance.setDragEndCallback(updateModel);\r\n            setSceneInstance(sceneInstance);\r\n            /**\r\n             * This method restores the existing objects in the plane\r\n             */\r\n            const restoreModels = () => {\r\n                //We retrieve the existing models\r\n                let modelsCopy = { ...models };\r\n                //We iterate over the existing models and create the 2d model\r\n                projectObjects.forEach(model => {\r\n                    //We get the type and the coordinates (of the 2d key)\r\n                    const { type } = model;\r\n                    const { coordinates } = model['3d'];\r\n                    //We update the model quantity\r\n                    modelsCopy[type] ? modelsCopy[type].quantity++ : modelsCopy[type] = { quantity: 1 };\r\n                    \r\n                    //We create the 3D model\r\n                    sceneInstance.load3DModel(\r\n                        type,\r\n                        coordinates,\r\n                        createdModel => { //onSuccess callback\r\n                            const { uuid } = createdModel;\r\n                            let modelWithUpdatedId = {\r\n                                ...model,\r\n                                '3d': {\r\n                                    uuid: uuid,\r\n                                    container: getBoxBound(createdModel),\r\n                                    coordinates,\r\n                                }\r\n                            };\r\n                            updateObject(modelWithUpdatedId);\r\n                        },\r\n                        updateModel //updateCallback\r\n                    );\r\n                });\r\n                setModels(modelsCopy);\r\n            }\r\n            restoreModels();\r\n            sceneInstance = null;\r\n        }, []);\r\n\r\n        useEffect(() => {\r\n            if(!draggedObject)\r\n                return;\r\n            let { uuid, x, y, z } = draggedObject;\r\n            let existingObject = findObjectBy3DModelId(uuid);\r\n\r\n\r\n            if(!existingObject){\r\n                console.log('Objeto no encontrado')\r\n                return;\r\n            }\r\n\r\n\r\n            let bidimensionalEditorState = { ...existingObject['2d'] };\r\n            let tridimensionalEditorState = { ...existingObject['3d'] };\r\n            let updatedObject = {\r\n                ...existingObject,\r\n                '2d': {\r\n                    ...bidimensionalEditorState,\r\n                    coordinates: get2DCoordinates(x, y, z)\r\n                },\r\n                '3d': {\r\n                    ...tridimensionalEditorState,\r\n                    uuid,\r\n                    coordinates: { x, y: 0, z }\r\n                }\r\n            }\r\n            updateObject(updatedObject);\r\n            \r\n        }, [draggedObject]);\r\n\r\n        useEffect(() => {\r\n            if(sceneInstance){\r\n                sceneInstance.setOrbitControlsEnabled(orbitControlsEnabled);\r\n            }\r\n        }, [orbitControlsEnabled]);\r\n\r\n        /**\r\n         * Success callback for the load3DModel method, in this callback we add the created object at project´s level, \r\n         * generating the id and 3d keys, which will contain the id´s and coordinates of the object in the current\r\n         * project.\r\n         * @param {object} createdModel \r\n         */\r\n        const onCreationSuccess = (createdModel, type) => {\r\n            //We get the id, type and the coordinates of the created model\r\n            const { uuid, position: { x, y, z } } = createdModel;\r\n            //We generate an object with all the properties needed to keep it in the state\r\n            let objectToAdd = {\r\n                id: projectObjects.length,\r\n                type,\r\n                '2d': {\r\n                    uuid: '', //We don´t know the id for the 3D model, it will be generated and updated on render time\r\n                    coordinates: get2DCoordinates(x, y, z)\r\n                },\r\n                '3d': {\r\n                    uuid: uuid, //THREE.js generated ID \r\n                    container: getBoxBound(createdModel),\r\n                    coordinates: { x, y: 0, z }\r\n                }\r\n            }\r\n            //We add the object at project´s level\r\n            addObject(objectToAdd);\r\n        }\r\n        const addModel = type => {\r\n            increaseModelQuantity(type);\r\n            sceneInstance.load3DModel(type, {x: 0, y: 0, z: 0}, model => onCreationSuccess(model, type));\r\n        }\r\n\r\n        const getBoxBound = object => {\r\n            const { \r\n                scale: { x: scaleX, z: scaleZ },\r\n                geometry: { boundingBox: { min: { x: minimumX, z: minimumZ }, max: { x: maximumX, z: maximumZ }} },\r\n            } = object;\r\n            let itemSizeInXAxis = (maximumX - minimumX) * scaleX;\r\n            let itemSizeInZAxis = (maximumZ - minimumZ) * scaleZ;\r\n            return {\r\n                itemDepth: itemSizeInZAxis,\r\n                itemWidth: itemSizeInXAxis,\r\n            }\r\n        }\r\n\r\n        const updateModel = event => {\r\n            //We get the position and the id of the object\r\n            const { object: { position: { x, y, z }, uuid } } = event;\r\n            setDraggedObject({ x, y, z, uuid });\r\n        }\r\n\r\n        /**\r\n         * This method return the complete object based on it´s 3d model id\r\n         * @param {string} id2DModel \r\n         */\r\n        const findObjectBy3DModelId = id3DModel => projectObjects.find(object => object['3d'].uuid === id3DModel);\r\n        \r\n        /**\r\n         * This method transforms the 3D coordinates to the corresponding 2D ones, to get the object placed in the same\r\n         * way between both editors, making use of the class CoordinatesTransformation.\r\n         * @param {number} x \r\n         * @param {number} y \r\n         * @param {number} z\r\n         */\r\n        const get2DCoordinates = (x, y, z) => {\r\n            const { scene } = project;\r\n            let coordinatesTransformation = new CoordinatesTransformation(scene, x, y, z);\r\n            return coordinatesTransformation.tridimensionalToBidimensionalCoordinates();\r\n        }\r\n\r\n        const toggleOrbitControls = () => {\r\n            setOrbitControlsEnabled(!orbitControlsEnabled);\r\n        }\r\n\r\n        const increaseModelQuantity = type => {\r\n            let modelsCopy = { ...models };\r\n            modelsCopy[type] ? modelsCopy[type].quantity++ : modelsCopy[type] = { quantity: 1 };\r\n            setModels(modelsCopy);\r\n        }\r\n\r\n        const addTextureToObject = (object, textureUri) => sceneInstance.addTextureToObject(object, textureUri);\r\n\r\n        const addTextureToPlane = texture => {\r\n            let textureUri = TextureFactory.getTextureUri(texture);\r\n            sceneInstance.addTextureToObject(sceneInstance.plane, textureUri);\r\n        }\r\n\r\n        const rotateCamera = (view = CameraRotationFactory.TOP_VIEW) => {\r\n            let cameraDistance = sceneInstance.getOptimalCameraDistance();\r\n            //We get the available views\r\n            let cameraPositionVector = CameraRotationFactory.createCameraRotationVector(view, cameraDistance);\r\n            sceneInstance.camera.position.copy(cameraPositionVector);\r\n        }\r\n        \r\n\r\n\r\n        return <WrappedComponent\r\n            models = { models }\r\n            addModel = { addModel }\r\n            rotateCamera = { rotateCamera }\r\n            addTextureToPlane = { addTextureToPlane }\r\n            addTextureToObject = { addTextureToObject }\r\n            toggleOrbitControls = { toggleOrbitControls }\r\n            orbitControlsEnabled = { orbitControlsEnabled }\r\n            { ...extraProps }\r\n        />\r\n    }\r\n\r\n    //We apply the project state HOC\r\n    let WithProjectState = withProjectState(With3DRenderer);\r\n    //We apply the editor state HOC\r\n    let WithEditorState = withEditorState(WithProjectState);\r\n    //We return the decorated component\r\n    return WithEditorState;\r\n}\r\n\r\nexport default with3DRenderer;","import { FURNITURE, TABLE } from \"../../../constants/models/models\";\r\n\r\nconst models = [\r\n    {\r\n        model_id: FURNITURE,\r\n        name: 'Entrepaños',\r\n        description: 'Conjunto de entrepaños de distintos tamaños y con múltiples cajones.',\r\n    },\r\n    {\r\n        model_id: TABLE,\r\n        name: 'Mesa',\r\n        description: 'Mesa de madera de 1m x 1m.'\r\n    }\r\n]\r\n\r\nexport default models;","import React, { useState, useEffect } from 'react';\r\n//Components\r\nimport Flex from '../../Layout/Flex/Flex';\r\n//Data\r\nimport data from '../Data/data';\r\nimport ModelThumbnail from '../../Editor/3D/Layout/Editor/EditorActions/ModelThumbnail';\r\nimport ButtonWithIcon from '../../Layout/Buttons/ButtonWithIcon';\r\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\r\n//Styles\r\nimport './ModelsLibrary.css';\r\nimport withProjectState from '../../../redux/HOC/withProjectState';\r\n\r\nconst ModelsLibrary = ({ project, addObject }) => {\r\n    //PROPS\r\n    //Destructuring\r\n    const { objects: projectObjects } = project;\r\n\r\n    //HOOKS\r\n    //State\r\n    const [models, setModels] = useState({});\r\n\r\n    //Effects\r\n    useEffect(() => {\r\n        let modelsCopy = { ...models };\r\n        projectObjects.forEach(model => {\r\n            const { type } = model;\r\n            modelsCopy[type] ? modelsCopy[type].quantity++ : modelsCopy[type] = { quantity: 1 };\r\n        });\r\n        setModels(modelsCopy);\r\n    }, [])\r\n    //Methods\r\n    const addObjectToProject = type => {\r\n        let objectToAdd = {\r\n            id: projectObjects.length,\r\n            type,\r\n            '2d': {\r\n                uuid: '', //We don´t know the id for the 2D model, it will be generated and updated on render time\r\n                coordinates: { x: 0, y: 0 }\r\n            },\r\n            '3d': {\r\n                uuid: '', //We don´t know the id for the 3D model, it will be generated and updated on render time\r\n                coordinates: { x: 0, y: 0, z: 0 }\r\n            }\r\n        }\r\n        addObject(objectToAdd);\r\n        let modelsCopy = { ...models };\r\n        modelsCopy[type] ? modelsCopy[type].quantity++ : modelsCopy[type] = { quantity: 1 };\r\n        setModels(modelsCopy)\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Flex\r\n            className = 'justify-content-around align-items-between flex-wrap'\r\n        >\r\n            {\r\n                data.map(item => (\r\n                    <div\r\n                        className = 'card rounded-lg border-muted catalog-tile mt-3'\r\n                    >\r\n                        <div className='card-body px-2 py-2'>\r\n                            <table className='table table-sm table-borderless'>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th colSpan='2'>\r\n                                            <ModelThumbnail \r\n                                                model = { item.model_id }\r\n                                                title = { item.name }\r\n                                                className = 'mr-3 mt-3'\r\n                                                modelQuantity = { models[item.model_id] ? models[item.model_id].quantity : 0}\r\n                                                imageClassName = 'catalog-thumbnail'\r\n                                            />\r\n                                        </th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <th>Nombre</th>\r\n                                        <td>{ item.name }</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <th>Descripción</th>\r\n                                        <td>{ item.description }</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <th colSpan='2'>\r\n                                            <ButtonWithIcon \r\n                                                id = { item.model_id }\r\n                                                icon = { faPlusCircle }\r\n                                                onClick = { event => addObjectToProject(item.model_id) }\r\n                                                className = 'btn btn-primary rounded-lg shadow'\r\n                                                buttonText = 'Agregar'\r\n                                            />\r\n                                        </th>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                ))\r\n            }\r\n\r\n        </Flex>\r\n    )\r\n}\r\n\r\nlet WithProjectState = withProjectState(ModelsLibrary);\r\n\r\nexport default WithProjectState;","import React, { Fragment } from 'react';\r\nimport LabelWithIcon from '../Layout/Labels/LabelWithIcon';\r\nimport { faBook } from '@fortawesome/free-solid-svg-icons';\r\nimport ModelsLibrary from './ModelsLibrary/ModelsLibrary';\r\n\r\nconst Catalog = () => (\r\n    <div className='container mt-3 text-center'>\r\n        <LabelWithIcon \r\n            icon = { faBook }\r\n            className = 'text-muted h4'\r\n            labelText = 'Catálogo de productos'\r\n        />\r\n        <ModelsLibrary \r\n            models = {{}}\r\n        />\r\n    </div>\r\n);\r\n\r\nexport default Catalog;\r\n\r\n","import React from 'react';\r\n//Components\r\nimport ProjectSettings from '../../components/ProjectSettings/ProjectSettings';\r\nimport BidimensionalEditor from '../../components/Editor/2D/Editor/Editor';\r\nimport TridimensionalEditor from '../../components/Editor/3D/Layout/Editor/Editor';\r\nimport Catalog from '../../components/Catalog/Catalog';\r\n\r\n\r\n//Sections\r\nexport const CATALOG                = 'CATALOG';    \r\nexport const PROJECT_SETTINGS       = 'PROJECT_SETTINGS';\r\nexport const BIDIMENSIONAL_EDITOR   = 'BIDIMENSIONAL EDITOR';\r\nexport const TRIDIMENSIONAL_EDITOR  = 'TRIDIMENSIONAL_EDITOR';\r\n\r\n\r\nexport const SectionComponentToRender = {\r\n    [CATALOG]: <Catalog />,\r\n    [PROJECT_SETTINGS]: <ProjectSettings />,\r\n    [BIDIMENSIONAL_EDITOR]: <BidimensionalEditor />,\r\n    [TRIDIMENSIONAL_EDITOR]: <TridimensionalEditor />,\r\n}","import React from 'react';\r\n//Components\r\nimport FlexColumn from '../../Flex/FlexColumn';\r\nimport LabelWithIcon from '../../Labels/LabelWithIcon';\r\n//HOC\r\nimport withEditorState from '../../../../redux/HOC/withEditorState';\r\n//Icons\r\nimport { faToolbox, faObjectGroup, faCube, faCog } from '@fortawesome/free-solid-svg-icons';\r\n//Constants\r\nimport { CATALOG, TRIDIMENSIONAL_EDITOR, BIDIMENSIONAL_EDITOR, PROJECT_SETTINGS } from '../../../../constants/sections/sections';\r\n\r\n\r\nconst EditorActions = ({ setEditorType }) => {\r\n    return(\r\n        <FlexColumn\r\n            className = 'align-items-center justify-content-around'\r\n        >\r\n            <LabelWithIcon \r\n                icon = { faToolbox }\r\n                title = 'Catálogo'\r\n                onClick = { event => setEditorType(CATALOG) }\r\n                className = 'text-sidebar-icon cursor-click mb-3'\r\n                data-toggle = 'tooltip' \r\n                data-placement = 'right' \r\n                \r\n            />\r\n            <LabelWithIcon \r\n                icon = { faCube }\r\n                title = '3D'\r\n                onClick = { event => setEditorType(TRIDIMENSIONAL_EDITOR) }\r\n                className = 'text-sidebar-icon cursor-click mb-3'\r\n                data-toggle = 'tooltip' \r\n                data-placement = 'right' \r\n            />\r\n            <LabelWithIcon \r\n                icon = { faObjectGroup }\r\n                title = '2D'\r\n                onClick = { event => setEditorType(BIDIMENSIONAL_EDITOR) }\r\n                className = 'text-sidebar-icon cursor-click mb-3'\r\n                data-toggle = 'tooltip' \r\n                data-placement = 'right' \r\n            />\r\n            <LabelWithIcon \r\n                icon = { faCog }\r\n                title = 'Ajustes del proyecto'\r\n                onClick = { event => setEditorType(PROJECT_SETTINGS) }\r\n                className = 'text-sidebar-icon cursor-click'\r\n                data-toggle = 'tooltip' \r\n                data-placement = 'right' \r\n            />\r\n\r\n        </FlexColumn>\r\n    );\r\n}\r\n\r\n//We apply the editor state HOC to get access to the setEditorType method\r\nlet WithEditorState = withEditorState(EditorActions);\r\n//We export the decorated component\r\nexport default WithEditorState;","import React from 'react';\r\n//Components\r\nimport FlexColumn from '../../Flex/FlexColumn';\r\nimport LabelWithIcon from '../../Labels/LabelWithIcon';\r\n//Icons\r\nimport { faSave, faDownload, faFolderOpen,} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst ProjectActions = ({ className }) => {\r\n    return(\r\n        <FlexColumn\r\n            className = {`align-items-center justify-content-around ${className || ''}`}\r\n        >\r\n            <LabelWithIcon \r\n                icon = { faSave }\r\n                title = 'Guardar'\r\n                className = 'text-sidebar-icon cursor-click mb-3'\r\n                data-toggle = 'tooltip' \r\n                data-placement = 'right' \r\n            />\r\n            <LabelWithIcon \r\n                icon = { faFolderOpen }\r\n                title = 'Abrir'\r\n                className = 'text-sidebar-icon cursor-click mb-3'\r\n                data-toggle = 'tooltip' \r\n                data-placement = 'right' \r\n            />\r\n            <LabelWithIcon \r\n                icon = { faDownload }\r\n                title = 'Descargar'\r\n                className = 'text-sidebar-icon cursor-click mb-3'\r\n                data-toggle = 'tooltip' \r\n                data-placement = 'right' \r\n            />\r\n        </FlexColumn>\r\n    );\r\n}\r\n\r\nexport default ProjectActions;","import React from 'react';\r\n//Components\r\nimport FlexColumn from '../Flex/FlexColumn';\r\nimport EditorActions from './Sections/EditorActions';\r\nimport ProjectActions from './Sections/ProjectActions';\r\n//Styles\r\nimport './Sidebar.css';\r\nimport FixedWidthContainer from '../Containers/FixedWidthContainer';\r\nimport FixedHeightContainer from '../Containers/FixedHeightContainer';\r\n\r\nconst Sidebar = () => {\r\n    \r\n    return(\r\n        <FixedWidthContainer\r\n            width = { 5 }\r\n            className = 'position-relative'\r\n        >\r\n            <FixedHeightContainer\r\n                height = { 100 }\r\n                className = 'sidebar-width position-fixed bg-dark pt-4'\r\n            >\r\n                <FlexColumn\r\n                    className = 'align-items-center justify-content-start'\r\n                >\r\n                    <ProjectActions \r\n                        className = 'my-4'\r\n                    />\r\n                    <EditorActions />\r\n                </FlexColumn>\r\n            </FixedHeightContainer>\r\n        </FixedWidthContainer>\r\n    );\r\n}\r\n\r\nexport default Sidebar;","import React from 'react';\r\n//Components\r\nimport ProjectSettings from '../ProjectSettings/ProjectSettings';\r\n//HOC\r\nimport withEditorState from '../../redux/HOC/withEditorState';\r\n//Constants\r\nimport { SectionComponentToRender } from '../../constants/sections/sections';\r\n\r\nconst MainSectionRender = ({ editorState: { editorType, editorWidth, editorHeight } }) => (\r\n    editorWidth && editorHeight ?\r\n        SectionComponentToRender[editorType]\r\n    : <ProjectSettings />\r\n);\r\n\r\n//We apply the editor state HOC\r\nlet WithEditorState = withEditorState(MainSectionRender);\r\n//We export the decorated component\r\nexport default WithEditorState;","import React, { Fragment, useEffect } from 'react';\r\nimport $ from 'jquery';\r\n//Components\r\nimport FlexRow from './components/Layout/Flex/FlexRow';\r\nimport SideBar from './components/Layout/Sidebar/Sidebar';\r\nimport MainSectionRender from './components/SectionRenderer/MainSectionRender';\r\nimport FixedWidthContainer from './components/Layout/Containers/FixedWidthContainer';\r\n\r\n\r\nconst App = () => {\r\n    //HOOKS\r\n    //Effects\r\n    useEffect(() => {\r\n        //We enable tooltips\r\n        $(() => $('[data-toggle=\"tooltip\"]').tooltip());\r\n    }, [])\r\n\r\n    return (\r\n        <Fragment>\r\n            <FlexRow\r\n                className = 'w-100 h-100'\r\n            >\r\n                <SideBar />\r\n                <FixedWidthContainer\r\n                    width = { 95 }\r\n                >\r\n                    <MainSectionRender />\r\n                </FixedWidthContainer>\r\n            </FlexRow>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n//Redux store\nimport generateStore from './redux/store';\n//Components\nimport App from './App';\n//Styles\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//Libraries\nimport 'bootstrap/dist/js/bootstrap.bundle';\n//Service worker\nimport * as serviceWorker from './serviceWorker';\n\nlet store = generateStore();\n\nlet WithStore = <Provider store = { store }><App /></Provider>\n\nReactDOM.render(WithStore, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}